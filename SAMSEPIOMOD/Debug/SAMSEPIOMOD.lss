
SAMSEPIOMOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002430  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402430  00402430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000438  20000000  00402438  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000ec  20000438  00402870  00020438  2**2
                  ALLOC
  4 .stack        00003004  20000524  0040295c  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007609  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001385  00000000  00000000  00027ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005112  00000000  00000000  00028e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008e8  00000000  00000000  0002df5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000818  00000000  00000000  0002e843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012bfe  00000000  00000000  0002f05b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a99c  00000000  00000000  00041c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004e887  00000000  00000000  0004c5f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002698  00000000  00000000  0009ae7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003528 	.word	0x20003528
  400004:	004019a5 	.word	0x004019a5
  400008:	00401a6d 	.word	0x00401a6d
  40000c:	00401a6d 	.word	0x00401a6d
  400010:	00401a6d 	.word	0x00401a6d
  400014:	00401a6d 	.word	0x00401a6d
  400018:	00401a6d 	.word	0x00401a6d
	...
  40002c:	00401a6d 	.word	0x00401a6d
  400030:	00401a6d 	.word	0x00401a6d
  400034:	00000000 	.word	0x00000000
  400038:	00401a6d 	.word	0x00401a6d
  40003c:	00401a6d 	.word	0x00401a6d
  400040:	00401a6d 	.word	0x00401a6d
  400044:	00401a6d 	.word	0x00401a6d
  400048:	00401a6d 	.word	0x00401a6d
  40004c:	00401a6d 	.word	0x00401a6d
  400050:	00401a6d 	.word	0x00401a6d
  400054:	00401a6d 	.word	0x00401a6d
  400058:	00401a6d 	.word	0x00401a6d
  40005c:	00401a6d 	.word	0x00401a6d
  400060:	00401a6d 	.word	0x00401a6d
  400064:	00401a6d 	.word	0x00401a6d
  400068:	00000000 	.word	0x00000000
  40006c:	00400ccd 	.word	0x00400ccd
  400070:	00400ce5 	.word	0x00400ce5
  400074:	00400cfd 	.word	0x00400cfd
  400078:	00401a6d 	.word	0x00401a6d
  40007c:	00400ae5 	.word	0x00400ae5
	...
  400088:	00401a6d 	.word	0x00401a6d
  40008c:	00401a6d 	.word	0x00401a6d
  400090:	00401a6d 	.word	0x00401a6d
  400094:	00401a6d 	.word	0x00401a6d
  400098:	00401a6d 	.word	0x00401a6d
  40009c:	00401a6d 	.word	0x00401a6d
  4000a0:	00401a6d 	.word	0x00401a6d
  4000a4:	00401a6d 	.word	0x00401a6d
  4000a8:	00401a6d 	.word	0x00401a6d
  4000ac:	00401a6d 	.word	0x00401a6d
  4000b0:	00401a6d 	.word	0x00401a6d
  4000b4:	00401a6d 	.word	0x00401a6d
  4000b8:	00401a6d 	.word	0x00401a6d
  4000bc:	00401a6d 	.word	0x00401a6d
  4000c0:	00401a6d 	.word	0x00401a6d
  4000c4:	00401a6d 	.word	0x00401a6d
  4000c8:	00401a6d 	.word	0x00401a6d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000438 	.word	0x20000438
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402438 	.word	0x00402438

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	2000043c 	.word	0x2000043c
  40011c:	00402438 	.word	0x00402438
  400120:	00402438 	.word	0x00402438
  400124:	00000000 	.word	0x00000000

00400128 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400128:	b480      	push	{r7}
  40012a:	b089      	sub	sp, #36	; 0x24
  40012c:	af00      	add	r7, sp, #0
  40012e:	60f8      	str	r0, [r7, #12]
  400130:	60b9      	str	r1, [r7, #8]
  400132:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400134:	68bb      	ldr	r3, [r7, #8]
  400136:	011a      	lsls	r2, r3, #4
  400138:	687b      	ldr	r3, [r7, #4]
  40013a:	429a      	cmp	r2, r3
  40013c:	d802      	bhi.n	400144 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40013e:	2310      	movs	r3, #16
  400140:	61fb      	str	r3, [r7, #28]
  400142:	e001      	b.n	400148 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400144:	2308      	movs	r3, #8
  400146:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400148:	687b      	ldr	r3, [r7, #4]
  40014a:	00da      	lsls	r2, r3, #3
  40014c:	69fb      	ldr	r3, [r7, #28]
  40014e:	68b9      	ldr	r1, [r7, #8]
  400150:	fb01 f303 	mul.w	r3, r1, r3
  400154:	085b      	lsrs	r3, r3, #1
  400156:	441a      	add	r2, r3
  400158:	69fb      	ldr	r3, [r7, #28]
  40015a:	68b9      	ldr	r1, [r7, #8]
  40015c:	fb01 f303 	mul.w	r3, r1, r3
  400160:	fbb2 f3f3 	udiv	r3, r2, r3
  400164:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400166:	69bb      	ldr	r3, [r7, #24]
  400168:	08db      	lsrs	r3, r3, #3
  40016a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40016c:	69bb      	ldr	r3, [r7, #24]
  40016e:	f003 0307 	and.w	r3, r3, #7
  400172:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400174:	697b      	ldr	r3, [r7, #20]
  400176:	2b00      	cmp	r3, #0
  400178:	d003      	beq.n	400182 <usart_set_async_baudrate+0x5a>
  40017a:	697b      	ldr	r3, [r7, #20]
  40017c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400180:	d301      	bcc.n	400186 <usart_set_async_baudrate+0x5e>
		return 1;
  400182:	2301      	movs	r3, #1
  400184:	e00f      	b.n	4001a6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400186:	69fb      	ldr	r3, [r7, #28]
  400188:	2b08      	cmp	r3, #8
  40018a:	d105      	bne.n	400198 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40018c:	68fb      	ldr	r3, [r7, #12]
  40018e:	685b      	ldr	r3, [r3, #4]
  400190:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400194:	68fb      	ldr	r3, [r7, #12]
  400196:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400198:	693b      	ldr	r3, [r7, #16]
  40019a:	041a      	lsls	r2, r3, #16
  40019c:	697b      	ldr	r3, [r7, #20]
  40019e:	431a      	orrs	r2, r3
  4001a0:	68fb      	ldr	r3, [r7, #12]
  4001a2:	621a      	str	r2, [r3, #32]

	return 0;
  4001a4:	2300      	movs	r3, #0
}
  4001a6:	4618      	mov	r0, r3
  4001a8:	3724      	adds	r7, #36	; 0x24
  4001aa:	46bd      	mov	sp, r7
  4001ac:	bc80      	pop	{r7}
  4001ae:	4770      	bx	lr

004001b0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4001b0:	b580      	push	{r7, lr}
  4001b2:	b082      	sub	sp, #8
  4001b4:	af00      	add	r7, sp, #0
  4001b6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4001b8:	6878      	ldr	r0, [r7, #4]
  4001ba:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <usart_reset+0x48>)
  4001bc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4001be:	687b      	ldr	r3, [r7, #4]
  4001c0:	2200      	movs	r2, #0
  4001c2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4001c4:	687b      	ldr	r3, [r7, #4]
  4001c6:	2200      	movs	r2, #0
  4001c8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4001ca:	687b      	ldr	r3, [r7, #4]
  4001cc:	2200      	movs	r2, #0
  4001ce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4001d0:	6878      	ldr	r0, [r7, #4]
  4001d2:	4b0a      	ldr	r3, [pc, #40]	; (4001fc <usart_reset+0x4c>)
  4001d4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4001d6:	6878      	ldr	r0, [r7, #4]
  4001d8:	4b09      	ldr	r3, [pc, #36]	; (400200 <usart_reset+0x50>)
  4001da:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4001dc:	6878      	ldr	r0, [r7, #4]
  4001de:	4b09      	ldr	r3, [pc, #36]	; (400204 <usart_reset+0x54>)
  4001e0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4001e2:	6878      	ldr	r0, [r7, #4]
  4001e4:	4b08      	ldr	r3, [pc, #32]	; (400208 <usart_reset+0x58>)
  4001e6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4001e8:	6878      	ldr	r0, [r7, #4]
  4001ea:	4b08      	ldr	r3, [pc, #32]	; (40020c <usart_reset+0x5c>)
  4001ec:	4798      	blx	r3
#endif
}
  4001ee:	bf00      	nop
  4001f0:	3708      	adds	r7, #8
  4001f2:	46bd      	mov	sp, r7
  4001f4:	bd80      	pop	{r7, pc}
  4001f6:	bf00      	nop
  4001f8:	00400435 	.word	0x00400435
  4001fc:	00400305 	.word	0x00400305
  400200:	0040034d 	.word	0x0040034d
  400204:	00400399 	.word	0x00400399
  400208:	004003d1 	.word	0x004003d1
  40020c:	004003b5 	.word	0x004003b5

00400210 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400210:	b580      	push	{r7, lr}
  400212:	b084      	sub	sp, #16
  400214:	af00      	add	r7, sp, #0
  400216:	60f8      	str	r0, [r7, #12]
  400218:	60b9      	str	r1, [r7, #8]
  40021a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40021c:	68f8      	ldr	r0, [r7, #12]
  40021e:	4b1a      	ldr	r3, [pc, #104]	; (400288 <usart_init_rs232+0x78>)
  400220:	4798      	blx	r3

	ul_reg_val = 0;
  400222:	4b1a      	ldr	r3, [pc, #104]	; (40028c <usart_init_rs232+0x7c>)
  400224:	2200      	movs	r2, #0
  400226:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400228:	68bb      	ldr	r3, [r7, #8]
  40022a:	2b00      	cmp	r3, #0
  40022c:	d009      	beq.n	400242 <usart_init_rs232+0x32>
  40022e:	68bb      	ldr	r3, [r7, #8]
  400230:	681b      	ldr	r3, [r3, #0]
  400232:	687a      	ldr	r2, [r7, #4]
  400234:	4619      	mov	r1, r3
  400236:	68f8      	ldr	r0, [r7, #12]
  400238:	4b15      	ldr	r3, [pc, #84]	; (400290 <usart_init_rs232+0x80>)
  40023a:	4798      	blx	r3
  40023c:	4603      	mov	r3, r0
  40023e:	2b00      	cmp	r3, #0
  400240:	d001      	beq.n	400246 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400242:	2301      	movs	r3, #1
  400244:	e01b      	b.n	40027e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400246:	68bb      	ldr	r3, [r7, #8]
  400248:	685a      	ldr	r2, [r3, #4]
  40024a:	68bb      	ldr	r3, [r7, #8]
  40024c:	689b      	ldr	r3, [r3, #8]
  40024e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400250:	68bb      	ldr	r3, [r7, #8]
  400252:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400254:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400256:	68bb      	ldr	r3, [r7, #8]
  400258:	68db      	ldr	r3, [r3, #12]
  40025a:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <usart_init_rs232+0x7c>)
  40025e:	681b      	ldr	r3, [r3, #0]
  400260:	4313      	orrs	r3, r2
  400262:	4a0a      	ldr	r2, [pc, #40]	; (40028c <usart_init_rs232+0x7c>)
  400264:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400266:	4b09      	ldr	r3, [pc, #36]	; (40028c <usart_init_rs232+0x7c>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	4a08      	ldr	r2, [pc, #32]	; (40028c <usart_init_rs232+0x7c>)
  40026c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40026e:	68fb      	ldr	r3, [r7, #12]
  400270:	685a      	ldr	r2, [r3, #4]
  400272:	4b06      	ldr	r3, [pc, #24]	; (40028c <usart_init_rs232+0x7c>)
  400274:	681b      	ldr	r3, [r3, #0]
  400276:	431a      	orrs	r2, r3
  400278:	68fb      	ldr	r3, [r7, #12]
  40027a:	605a      	str	r2, [r3, #4]

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3710      	adds	r7, #16
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	004001b1 	.word	0x004001b1
  40028c:	20000454 	.word	0x20000454
  400290:	00400129 	.word	0x00400129

00400294 <usart_init_rs485>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400294:	b580      	push	{r7, lr}
  400296:	b084      	sub	sp, #16
  400298:	af00      	add	r7, sp, #0
  40029a:	60f8      	str	r0, [r7, #12]
  40029c:	60b9      	str	r1, [r7, #8]
  40029e:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  4002a0:	687a      	ldr	r2, [r7, #4]
  4002a2:	68b9      	ldr	r1, [r7, #8]
  4002a4:	68f8      	ldr	r0, [r7, #12]
  4002a6:	4b0a      	ldr	r3, [pc, #40]	; (4002d0 <usart_init_rs485+0x3c>)
  4002a8:	4798      	blx	r3
  4002aa:	4603      	mov	r3, r0
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	d001      	beq.n	4002b4 <usart_init_rs485+0x20>
		return 1;
  4002b0:	2301      	movs	r3, #1
  4002b2:	e008      	b.n	4002c6 <usart_init_rs485+0x32>
	}

	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  4002b4:	68fb      	ldr	r3, [r7, #12]
  4002b6:	685b      	ldr	r3, [r3, #4]
  4002b8:	f023 030f 	bic.w	r3, r3, #15
  4002bc:	f043 0201 	orr.w	r2, r3, #1
  4002c0:	68fb      	ldr	r3, [r7, #12]
  4002c2:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_RS485;

	return 0;
  4002c4:	2300      	movs	r3, #0
}
  4002c6:	4618      	mov	r0, r3
  4002c8:	3710      	adds	r7, #16
  4002ca:	46bd      	mov	sp, r7
  4002cc:	bd80      	pop	{r7, pc}
  4002ce:	bf00      	nop
  4002d0:	00400211 	.word	0x00400211

004002d4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4002d4:	b480      	push	{r7}
  4002d6:	b083      	sub	sp, #12
  4002d8:	af00      	add	r7, sp, #0
  4002da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4002dc:	687b      	ldr	r3, [r7, #4]
  4002de:	2240      	movs	r2, #64	; 0x40
  4002e0:	601a      	str	r2, [r3, #0]
}
  4002e2:	bf00      	nop
  4002e4:	370c      	adds	r7, #12
  4002e6:	46bd      	mov	sp, r7
  4002e8:	bc80      	pop	{r7}
  4002ea:	4770      	bx	lr

004002ec <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  4002ec:	b480      	push	{r7}
  4002ee:	b083      	sub	sp, #12
  4002f0:	af00      	add	r7, sp, #0
  4002f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  4002f4:	687b      	ldr	r3, [r7, #4]
  4002f6:	2280      	movs	r2, #128	; 0x80
  4002f8:	601a      	str	r2, [r3, #0]
}
  4002fa:	bf00      	nop
  4002fc:	370c      	adds	r7, #12
  4002fe:	46bd      	mov	sp, r7
  400300:	bc80      	pop	{r7}
  400302:	4770      	bx	lr

00400304 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400304:	b480      	push	{r7}
  400306:	b083      	sub	sp, #12
  400308:	af00      	add	r7, sp, #0
  40030a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40030c:	687b      	ldr	r3, [r7, #4]
  40030e:	2288      	movs	r2, #136	; 0x88
  400310:	601a      	str	r2, [r3, #0]
}
  400312:	bf00      	nop
  400314:	370c      	adds	r7, #12
  400316:	46bd      	mov	sp, r7
  400318:	bc80      	pop	{r7}
  40031a:	4770      	bx	lr

0040031c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  40031c:	b480      	push	{r7}
  40031e:	b083      	sub	sp, #12
  400320:	af00      	add	r7, sp, #0
  400322:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400324:	687b      	ldr	r3, [r7, #4]
  400326:	2210      	movs	r2, #16
  400328:	601a      	str	r2, [r3, #0]
}
  40032a:	bf00      	nop
  40032c:	370c      	adds	r7, #12
  40032e:	46bd      	mov	sp, r7
  400330:	bc80      	pop	{r7}
  400332:	4770      	bx	lr

00400334 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
  400334:	b480      	push	{r7}
  400336:	b083      	sub	sp, #12
  400338:	af00      	add	r7, sp, #0
  40033a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
  40033c:	687b      	ldr	r3, [r7, #4]
  40033e:	2220      	movs	r2, #32
  400340:	601a      	str	r2, [r3, #0]
}
  400342:	bf00      	nop
  400344:	370c      	adds	r7, #12
  400346:	46bd      	mov	sp, r7
  400348:	bc80      	pop	{r7}
  40034a:	4770      	bx	lr

0040034c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40034c:	b480      	push	{r7}
  40034e:	b083      	sub	sp, #12
  400350:	af00      	add	r7, sp, #0
  400352:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2224      	movs	r2, #36	; 0x24
  400358:	601a      	str	r2, [r3, #0]
}
  40035a:	bf00      	nop
  40035c:	370c      	adds	r7, #12
  40035e:	46bd      	mov	sp, r7
  400360:	bc80      	pop	{r7}
  400362:	4770      	bx	lr

00400364 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400364:	b480      	push	{r7}
  400366:	b083      	sub	sp, #12
  400368:	af00      	add	r7, sp, #0
  40036a:	6078      	str	r0, [r7, #4]
  40036c:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40036e:	687b      	ldr	r3, [r7, #4]
  400370:	683a      	ldr	r2, [r7, #0]
  400372:	60da      	str	r2, [r3, #12]
}
  400374:	bf00      	nop
  400376:	370c      	adds	r7, #12
  400378:	46bd      	mov	sp, r7
  40037a:	bc80      	pop	{r7}
  40037c:	4770      	bx	lr
  40037e:	bf00      	nop

00400380 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400380:	b480      	push	{r7}
  400382:	b083      	sub	sp, #12
  400384:	af00      	add	r7, sp, #0
  400386:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400388:	687b      	ldr	r3, [r7, #4]
  40038a:	695b      	ldr	r3, [r3, #20]
}
  40038c:	4618      	mov	r0, r3
  40038e:	370c      	adds	r7, #12
  400390:	46bd      	mov	sp, r7
  400392:	bc80      	pop	{r7}
  400394:	4770      	bx	lr
  400396:	bf00      	nop

00400398 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400398:	b480      	push	{r7}
  40039a:	b083      	sub	sp, #12
  40039c:	af00      	add	r7, sp, #0
  40039e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4003a0:	687b      	ldr	r3, [r7, #4]
  4003a2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003a6:	601a      	str	r2, [r3, #0]
}
  4003a8:	bf00      	nop
  4003aa:	370c      	adds	r7, #12
  4003ac:	46bd      	mov	sp, r7
  4003ae:	bc80      	pop	{r7}
  4003b0:	4770      	bx	lr
  4003b2:	bf00      	nop

004003b4 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4003b4:	b480      	push	{r7}
  4003b6:	b083      	sub	sp, #12
  4003b8:	af00      	add	r7, sp, #0
  4003ba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4003bc:	687b      	ldr	r3, [r7, #4]
  4003be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4003c2:	601a      	str	r2, [r3, #0]
}
  4003c4:	bf00      	nop
  4003c6:	370c      	adds	r7, #12
  4003c8:	46bd      	mov	sp, r7
  4003ca:	bc80      	pop	{r7}
  4003cc:	4770      	bx	lr
  4003ce:	bf00      	nop

004003d0 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4003d0:	b480      	push	{r7}
  4003d2:	b083      	sub	sp, #12
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4003d8:	687b      	ldr	r3, [r7, #4]
  4003da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4003de:	601a      	str	r2, [r3, #0]
}
  4003e0:	bf00      	nop
  4003e2:	370c      	adds	r7, #12
  4003e4:	46bd      	mov	sp, r7
  4003e6:	bc80      	pop	{r7}
  4003e8:	4770      	bx	lr
  4003ea:	bf00      	nop

004003ec <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  4003ec:	b480      	push	{r7}
  4003ee:	b085      	sub	sp, #20
  4003f0:	af00      	add	r7, sp, #0
  4003f2:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  4003f4:	2300      	movs	r3, #0
  4003f6:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	4a0a      	ldr	r2, [pc, #40]	; (400424 <usart_get_pdc_base+0x38>)
  4003fc:	4293      	cmp	r3, r2
  4003fe:	d103      	bne.n	400408 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  400400:	4b09      	ldr	r3, [pc, #36]	; (400428 <usart_get_pdc_base+0x3c>)
  400402:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  400404:	68fb      	ldr	r3, [r7, #12]
  400406:	e008      	b.n	40041a <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  400408:	687b      	ldr	r3, [r7, #4]
  40040a:	4a08      	ldr	r2, [pc, #32]	; (40042c <usart_get_pdc_base+0x40>)
  40040c:	4293      	cmp	r3, r2
  40040e:	d103      	bne.n	400418 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  400410:	4b07      	ldr	r3, [pc, #28]	; (400430 <usart_get_pdc_base+0x44>)
  400412:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  400414:	68fb      	ldr	r3, [r7, #12]
  400416:	e000      	b.n	40041a <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  400418:	68fb      	ldr	r3, [r7, #12]
}
  40041a:	4618      	mov	r0, r3
  40041c:	3714      	adds	r7, #20
  40041e:	46bd      	mov	sp, r7
  400420:	bc80      	pop	{r7}
  400422:	4770      	bx	lr
  400424:	40024000 	.word	0x40024000
  400428:	40024100 	.word	0x40024100
  40042c:	40028000 	.word	0x40028000
  400430:	40028100 	.word	0x40028100

00400434 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400434:	b480      	push	{r7}
  400436:	b083      	sub	sp, #12
  400438:	af00      	add	r7, sp, #0
  40043a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40043c:	687b      	ldr	r3, [r7, #4]
  40043e:	4a04      	ldr	r2, [pc, #16]	; (400450 <usart_disable_writeprotect+0x1c>)
  400440:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400444:	bf00      	nop
  400446:	370c      	adds	r7, #12
  400448:	46bd      	mov	sp, r7
  40044a:	bc80      	pop	{r7}
  40044c:	4770      	bx	lr
  40044e:	bf00      	nop
  400450:	55534100 	.word	0x55534100

00400454 <parseMbusPkt>:
//Write function pointer
void (*writeFunc)(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);

/* Modbus stack parser function */
void parseMbusPkt(uint8_t slaveAddr, uint8_t *buff, uint8_t len, uint8_t *respBuff, uint8_t *respLen)
{
  400454:	b580      	push	{r7, lr}
  400456:	b08a      	sub	sp, #40	; 0x28
  400458:	af00      	add	r7, sp, #0
  40045a:	60b9      	str	r1, [r7, #8]
  40045c:	607b      	str	r3, [r7, #4]
  40045e:	4603      	mov	r3, r0
  400460:	73fb      	strb	r3, [r7, #15]
  400462:	4613      	mov	r3, r2
  400464:	73bb      	strb	r3, [r7, #14]
	 uint16_t crc = 0, recvCrc = 0;
  400466:	2300      	movs	r3, #0
  400468:	83fb      	strh	r3, [r7, #30]
  40046a:	2300      	movs	r3, #0
  40046c:	83bb      	strh	r3, [r7, #28]
	 uint16_t regAddr = 0, numReg = 0;
  40046e:	2300      	movs	r3, #0
  400470:	837b      	strh	r3, [r7, #26]
  400472:	2300      	movs	r3, #0
  400474:	833b      	strh	r3, [r7, #24]
	 uint16_t regVal = 0;
  400476:	2300      	movs	r3, #0
  400478:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t fCode = 0, genErrRsp = 0;
  40047a:	2300      	movs	r3, #0
  40047c:	75fb      	strb	r3, [r7, #23]
  40047e:	2300      	movs	r3, #0
  400480:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t expFuncCode = 0, expCode = 0;
  400484:	2300      	movs	r3, #0
  400486:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  40048a:	2300      	movs	r3, #0
  40048c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 uint8_t i = 0, ind = 0;
  400490:	2300      	movs	r3, #0
  400492:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400496:	2300      	movs	r3, #0
  400498:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 
	 /* Self Addr recvd or Broadcast Addr = 0 recvd */
	 if(buff[0]==slaveAddr||buff[0]==0)
  40049c:	68bb      	ldr	r3, [r7, #8]
  40049e:	781b      	ldrb	r3, [r3, #0]
  4004a0:	7bfa      	ldrb	r2, [r7, #15]
  4004a2:	429a      	cmp	r2, r3
  4004a4:	d004      	beq.n	4004b0 <parseMbusPkt+0x5c>
  4004a6:	68bb      	ldr	r3, [r7, #8]
  4004a8:	781b      	ldrb	r3, [r3, #0]
  4004aa:	2b00      	cmp	r3, #0
  4004ac:	f040 81fb 	bne.w	4008a6 <parseMbusPkt+0x452>
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
  4004b0:	7bbb      	ldrb	r3, [r7, #14]
  4004b2:	3b01      	subs	r3, #1
  4004b4:	68ba      	ldr	r2, [r7, #8]
  4004b6:	4413      	add	r3, r2
  4004b8:	781b      	ldrb	r3, [r3, #0]
  4004ba:	021b      	lsls	r3, r3, #8
  4004bc:	b21a      	sxth	r2, r3
  4004be:	7bbb      	ldrb	r3, [r7, #14]
  4004c0:	3b02      	subs	r3, #2
  4004c2:	68b9      	ldr	r1, [r7, #8]
  4004c4:	440b      	add	r3, r1
  4004c6:	781b      	ldrb	r3, [r3, #0]
  4004c8:	b21b      	sxth	r3, r3
  4004ca:	4313      	orrs	r3, r2
  4004cc:	b21b      	sxth	r3, r3
  4004ce:	83bb      	strh	r3, [r7, #28]
		 crc = calcCRC(buff,len-2);
  4004d0:	7bbb      	ldrb	r3, [r7, #14]
  4004d2:	3b02      	subs	r3, #2
  4004d4:	b2db      	uxtb	r3, r3
  4004d6:	4619      	mov	r1, r3
  4004d8:	68b8      	ldr	r0, [r7, #8]
  4004da:	4b90      	ldr	r3, [pc, #576]	; (40071c <parseMbusPkt+0x2c8>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	83fb      	strh	r3, [r7, #30]
		 /* If CRC Matched */
		 if(crc==recvCrc)
  4004e2:	8bfa      	ldrh	r2, [r7, #30]
  4004e4:	8bbb      	ldrh	r3, [r7, #28]
  4004e6:	429a      	cmp	r2, r3
  4004e8:	f040 81e0 	bne.w	4008ac <parseMbusPkt+0x458>
		 {
			 /* Function Code Extraction */
			 fCode = buff[1];
  4004ec:	68bb      	ldr	r3, [r7, #8]
  4004ee:	785b      	ldrb	r3, [r3, #1]
  4004f0:	75fb      	strb	r3, [r7, #23]
			 switch(fCode)
  4004f2:	7dfb      	ldrb	r3, [r7, #23]
  4004f4:	2b06      	cmp	r3, #6
  4004f6:	f000 80a9 	beq.w	40064c <parseMbusPkt+0x1f8>
  4004fa:	2b10      	cmp	r3, #16
  4004fc:	f000 8114 	beq.w	400728 <parseMbusPkt+0x2d4>
  400500:	2b03      	cmp	r3, #3
  400502:	f040 81c2 	bne.w	40088a <parseMbusPkt+0x436>
			 {
				 /* Read Analog Reg Func Code Recvd */
				 case 0x03:
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  400506:	68bb      	ldr	r3, [r7, #8]
  400508:	3304      	adds	r3, #4
  40050a:	781b      	ldrb	r3, [r3, #0]
  40050c:	021b      	lsls	r3, r3, #8
  40050e:	b21a      	sxth	r2, r3
  400510:	68bb      	ldr	r3, [r7, #8]
  400512:	3305      	adds	r3, #5
  400514:	781b      	ldrb	r3, [r3, #0]
  400516:	b21b      	sxth	r3, r3
  400518:	4313      	orrs	r3, r2
  40051a:	b21b      	sxth	r3, r3
  40051c:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  40051e:	8b3b      	ldrh	r3, [r7, #24]
  400520:	2b00      	cmp	r3, #0
  400522:	f000 8088 	beq.w	400636 <parseMbusPkt+0x1e2>
  400526:	8b3b      	ldrh	r3, [r7, #24]
  400528:	2b7d      	cmp	r3, #125	; 0x7d
  40052a:	f200 8084 	bhi.w	400636 <parseMbusPkt+0x1e2>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  40052e:	68bb      	ldr	r3, [r7, #8]
  400530:	3302      	adds	r3, #2
  400532:	781b      	ldrb	r3, [r3, #0]
  400534:	021b      	lsls	r3, r3, #8
  400536:	b21a      	sxth	r2, r3
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	3303      	adds	r3, #3
  40053c:	781b      	ldrb	r3, [r3, #0]
  40053e:	b21b      	sxth	r3, r3
  400540:	4313      	orrs	r3, r2
  400542:	b21b      	sxth	r3, r3
  400544:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400546:	8b7a      	ldrh	r2, [r7, #26]
  400548:	8b3b      	ldrh	r3, [r7, #24]
  40054a:	4413      	add	r3, r2
  40054c:	2b0c      	cmp	r3, #12
  40054e:	dc68      	bgt.n	400622 <parseMbusPkt+0x1ce>
					 {
						 /* Process Read Reg Req */
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  400550:	687b      	ldr	r3, [r7, #4]
  400552:	7bfa      	ldrb	r2, [r7, #15]
  400554:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x03;
  400556:	687b      	ldr	r3, [r7, #4]
  400558:	3301      	adds	r3, #1
  40055a:	2203      	movs	r2, #3
  40055c:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = (numReg *2); //No of Data Bytes
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	3302      	adds	r3, #2
  400562:	8b3a      	ldrh	r2, [r7, #24]
  400564:	b2d2      	uxtb	r2, r2
  400566:	0052      	lsls	r2, r2, #1
  400568:	b2d2      	uxtb	r2, r2
  40056a:	701a      	strb	r2, [r3, #0]
						 
						 i = 3;
  40056c:	2303      	movs	r3, #3
  40056e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						 for(ind = 0; ind < numReg; ind++)
  400572:	2300      	movs	r3, #0
  400574:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  400578:	e028      	b.n	4005cc <parseMbusPkt+0x178>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
  40057a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  40057e:	1c5a      	adds	r2, r3, #1
  400580:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400584:	461a      	mov	r2, r3
  400586:	687b      	ldr	r3, [r7, #4]
  400588:	4413      	add	r3, r2
  40058a:	8b79      	ldrh	r1, [r7, #26]
  40058c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400590:	440a      	add	r2, r1
  400592:	4963      	ldr	r1, [pc, #396]	; (400720 <parseMbusPkt+0x2cc>)
  400594:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  400598:	0a12      	lsrs	r2, r2, #8
  40059a:	b292      	uxth	r2, r2
  40059c:	b2d2      	uxtb	r2, r2
  40059e:	701a      	strb	r2, [r3, #0]
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
  4005a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4005a4:	1c5a      	adds	r2, r3, #1
  4005a6:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  4005aa:	461a      	mov	r2, r3
  4005ac:	687b      	ldr	r3, [r7, #4]
  4005ae:	4413      	add	r3, r2
  4005b0:	8b79      	ldrh	r1, [r7, #26]
  4005b2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  4005b6:	440a      	add	r2, r1
  4005b8:	4959      	ldr	r1, [pc, #356]	; (400720 <parseMbusPkt+0x2cc>)
  4005ba:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  4005be:	b2d2      	uxtb	r2, r2
  4005c0:	701a      	strb	r2, [r3, #0]
						 respBuff[0] = slaveAddr;
						 respBuff[1] = 0x03;
						 respBuff[2] = (numReg *2); //No of Data Bytes
						 
						 i = 3;
						 for(ind = 0; ind < numReg; ind++)
  4005c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  4005c6:	3301      	adds	r3, #1
  4005c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  4005cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  4005d0:	b29b      	uxth	r3, r3
  4005d2:	8b3a      	ldrh	r2, [r7, #24]
  4005d4:	429a      	cmp	r2, r3
  4005d6:	d8d0      	bhi.n	40057a <parseMbusPkt+0x126>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
						 }
						 crc = calcCRC(respBuff, i);
  4005d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4005dc:	4619      	mov	r1, r3
  4005de:	6878      	ldr	r0, [r7, #4]
  4005e0:	4b4e      	ldr	r3, [pc, #312]	; (40071c <parseMbusPkt+0x2c8>)
  4005e2:	4798      	blx	r3
  4005e4:	4603      	mov	r3, r0
  4005e6:	83fb      	strh	r3, [r7, #30]
						 respBuff[i++] = (crc&0x00FF);
  4005e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4005ec:	1c5a      	adds	r2, r3, #1
  4005ee:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  4005f2:	461a      	mov	r2, r3
  4005f4:	687b      	ldr	r3, [r7, #4]
  4005f6:	4413      	add	r3, r2
  4005f8:	8bfa      	ldrh	r2, [r7, #30]
  4005fa:	b2d2      	uxtb	r2, r2
  4005fc:	701a      	strb	r2, [r3, #0]
						 respBuff[i++] = (crc>>8);
  4005fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400602:	1c5a      	adds	r2, r3, #1
  400604:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400608:	461a      	mov	r2, r3
  40060a:	687b      	ldr	r3, [r7, #4]
  40060c:	4413      	add	r3, r2
  40060e:	8bfa      	ldrh	r2, [r7, #30]
  400610:	0a12      	lsrs	r2, r2, #8
  400612:	b292      	uxth	r2, r2
  400614:	b2d2      	uxtb	r2, r2
  400616:	701a      	strb	r2, [r3, #0]
						 *respLen = i;
  400618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40061a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
  40061e:	701a      	strb	r2, [r3, #0]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400620:	e013      	b.n	40064a <parseMbusPkt+0x1f6>
						 *respLen = i;
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  400622:	2301      	movs	r3, #1
  400624:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x83;
  400628:	2383      	movs	r3, #131	; 0x83
  40062a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  40062e:	2302      	movs	r3, #2
  400630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400634:	e009      	b.n	40064a <parseMbusPkt+0x1f6>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  400636:	2301      	movs	r3, #1
  400638:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x83;
  40063c:	2383      	movs	r3, #131	; 0x83
  40063e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  400642:	2303      	movs	r3, #3
  400644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  400648:	e12c      	b.n	4008a4 <parseMbusPkt+0x450>
  40064a:	e12b      	b.n	4008a4 <parseMbusPkt+0x450>
				 /* Write Single Analog Reg */
				 case 0x06:
				 /* Output Value = 0x0000 or 0xFF00 */
				 regVal = (((uint16_t)buff[4])<<8)|(buff[5]);
  40064c:	68bb      	ldr	r3, [r7, #8]
  40064e:	3304      	adds	r3, #4
  400650:	781b      	ldrb	r3, [r3, #0]
  400652:	021b      	lsls	r3, r3, #8
  400654:	b21a      	sxth	r2, r3
  400656:	68bb      	ldr	r3, [r7, #8]
  400658:	3305      	adds	r3, #5
  40065a:	781b      	ldrb	r3, [r3, #0]
  40065c:	b21b      	sxth	r3, r3
  40065e:	4313      	orrs	r3, r2
  400660:	b21b      	sxth	r3, r3
  400662:	84fb      	strh	r3, [r7, #38]	; 0x26
				 if(1)
				 {
					 /* Output Address = OK */
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400664:	68bb      	ldr	r3, [r7, #8]
  400666:	3302      	adds	r3, #2
  400668:	781b      	ldrb	r3, [r3, #0]
  40066a:	021b      	lsls	r3, r3, #8
  40066c:	b21a      	sxth	r2, r3
  40066e:	68bb      	ldr	r3, [r7, #8]
  400670:	3303      	adds	r3, #3
  400672:	781b      	ldrb	r3, [r3, #0]
  400674:	b21b      	sxth	r3, r3
  400676:	4313      	orrs	r3, r2
  400678:	b21b      	sxth	r3, r3
  40067a:	837b      	strh	r3, [r7, #26]
					 if(regAddr <= MBUS_MAX_REGS)
  40067c:	8b7b      	ldrh	r3, [r7, #26]
  40067e:	2b0c      	cmp	r3, #12
  400680:	d841      	bhi.n	400706 <parseMbusPkt+0x2b2>
					 {
						 /* Gen Valid Mbus Resp */
						 mBusRegs[regAddr] = regVal;
  400682:	8b7b      	ldrh	r3, [r7, #26]
  400684:	4926      	ldr	r1, [pc, #152]	; (400720 <parseMbusPkt+0x2cc>)
  400686:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  400688:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						 /* Success Error Code */
						 respBuff[0] = slaveAddr;
  40068c:	687b      	ldr	r3, [r7, #4]
  40068e:	7bfa      	ldrb	r2, [r7, #15]
  400690:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x06;
  400692:	687b      	ldr	r3, [r7, #4]
  400694:	3301      	adds	r3, #1
  400696:	2206      	movs	r2, #6
  400698:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  40069a:	687b      	ldr	r3, [r7, #4]
  40069c:	3302      	adds	r3, #2
  40069e:	68ba      	ldr	r2, [r7, #8]
  4006a0:	7892      	ldrb	r2, [r2, #2]
  4006a2:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	3303      	adds	r3, #3
  4006a8:	68ba      	ldr	r2, [r7, #8]
  4006aa:	78d2      	ldrb	r2, [r2, #3]
  4006ac:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  4006ae:	687b      	ldr	r3, [r7, #4]
  4006b0:	3304      	adds	r3, #4
  4006b2:	68ba      	ldr	r2, [r7, #8]
  4006b4:	7912      	ldrb	r2, [r2, #4]
  4006b6:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  4006b8:	687b      	ldr	r3, [r7, #4]
  4006ba:	3305      	adds	r3, #5
  4006bc:	68ba      	ldr	r2, [r7, #8]
  4006be:	7952      	ldrb	r2, [r2, #5]
  4006c0:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  4006c2:	2106      	movs	r1, #6
  4006c4:	6878      	ldr	r0, [r7, #4]
  4006c6:	4b15      	ldr	r3, [pc, #84]	; (40071c <parseMbusPkt+0x2c8>)
  4006c8:	4798      	blx	r3
  4006ca:	4603      	mov	r3, r0
  4006cc:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  4006ce:	687b      	ldr	r3, [r7, #4]
  4006d0:	3306      	adds	r3, #6
  4006d2:	8bfa      	ldrh	r2, [r7, #30]
  4006d4:	b2d2      	uxtb	r2, r2
  4006d6:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  4006d8:	687b      	ldr	r3, [r7, #4]
  4006da:	3307      	adds	r3, #7
  4006dc:	8bfa      	ldrh	r2, [r7, #30]
  4006de:	0a12      	lsrs	r2, r2, #8
  4006e0:	b292      	uxth	r2, r2
  4006e2:	b2d2      	uxtb	r2, r2
  4006e4:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  4006e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4006e8:	2208      	movs	r2, #8
  4006ea:	701a      	strb	r2, [r3, #0]
						 
						 /* Process Write Reg Req */
						 if(writeFunc!=NULL)
  4006ec:	4b0d      	ldr	r3, [pc, #52]	; (400724 <parseMbusPkt+0x2d0>)
  4006ee:	681b      	ldr	r3, [r3, #0]
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	f000 80d6 	beq.w	4008a2 <parseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
  4006f6:	4b0b      	ldr	r3, [pc, #44]	; (400724 <parseMbusPkt+0x2d0>)
  4006f8:	681b      	ldr	r3, [r3, #0]
  4006fa:	8b7a      	ldrh	r2, [r7, #26]
  4006fc:	b2d1      	uxtb	r1, r2
  4006fe:	2201      	movs	r2, #1
  400700:	4807      	ldr	r0, [pc, #28]	; (400720 <parseMbusPkt+0x2cc>)
  400702:	4798      	blx	r3
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  400704:	e0cd      	b.n	4008a2 <parseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
					 }
					 else
					 {
						 /* Illegal Data Address Error */
						 genErrRsp = 1;
  400706:	2301      	movs	r3, #1
  400708:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x86;
  40070c:	2386      	movs	r3, #134	; 0x86
  40070e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  400712:	2302      	movs	r3, #2
  400714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  400718:	e0c3      	b.n	4008a2 <parseMbusPkt+0x44e>
  40071a:	bf00      	nop
  40071c:	0040090d 	.word	0x0040090d
  400720:	20000458 	.word	0x20000458
  400724:	200004e4 	.word	0x200004e4
				 case 0x10: /* Write Mul Register */
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  400728:	68bb      	ldr	r3, [r7, #8]
  40072a:	3304      	adds	r3, #4
  40072c:	781b      	ldrb	r3, [r3, #0]
  40072e:	021b      	lsls	r3, r3, #8
  400730:	b21a      	sxth	r2, r3
  400732:	68bb      	ldr	r3, [r7, #8]
  400734:	3305      	adds	r3, #5
  400736:	781b      	ldrb	r3, [r3, #0]
  400738:	b21b      	sxth	r3, r3
  40073a:	4313      	orrs	r3, r2
  40073c:	b21b      	sxth	r3, r3
  40073e:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  400740:	8b3b      	ldrh	r3, [r7, #24]
  400742:	2b00      	cmp	r3, #0
  400744:	f000 8096 	beq.w	400874 <parseMbusPkt+0x420>
  400748:	8b3b      	ldrh	r3, [r7, #24]
  40074a:	2b7d      	cmp	r3, #125	; 0x7d
  40074c:	f200 8092 	bhi.w	400874 <parseMbusPkt+0x420>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400750:	68bb      	ldr	r3, [r7, #8]
  400752:	3302      	adds	r3, #2
  400754:	781b      	ldrb	r3, [r3, #0]
  400756:	021b      	lsls	r3, r3, #8
  400758:	b21a      	sxth	r2, r3
  40075a:	68bb      	ldr	r3, [r7, #8]
  40075c:	3303      	adds	r3, #3
  40075e:	781b      	ldrb	r3, [r3, #0]
  400760:	b21b      	sxth	r3, r3
  400762:	4313      	orrs	r3, r2
  400764:	b21b      	sxth	r3, r3
  400766:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400768:	8b7a      	ldrh	r2, [r7, #26]
  40076a:	8b3b      	ldrh	r3, [r7, #24]
  40076c:	4413      	add	r3, r2
  40076e:	2b0c      	cmp	r3, #12
  400770:	dc76      	bgt.n	400860 <parseMbusPkt+0x40c>
					 {
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  400772:	687b      	ldr	r3, [r7, #4]
  400774:	7bfa      	ldrb	r2, [r7, #15]
  400776:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x10;
  400778:	687b      	ldr	r3, [r7, #4]
  40077a:	3301      	adds	r3, #1
  40077c:	2210      	movs	r2, #16
  40077e:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  400780:	687b      	ldr	r3, [r7, #4]
  400782:	3302      	adds	r3, #2
  400784:	68ba      	ldr	r2, [r7, #8]
  400786:	7892      	ldrb	r2, [r2, #2]
  400788:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  40078a:	687b      	ldr	r3, [r7, #4]
  40078c:	3303      	adds	r3, #3
  40078e:	68ba      	ldr	r2, [r7, #8]
  400790:	78d2      	ldrb	r2, [r2, #3]
  400792:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  400794:	687b      	ldr	r3, [r7, #4]
  400796:	3304      	adds	r3, #4
  400798:	68ba      	ldr	r2, [r7, #8]
  40079a:	7912      	ldrb	r2, [r2, #4]
  40079c:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  40079e:	687b      	ldr	r3, [r7, #4]
  4007a0:	3305      	adds	r3, #5
  4007a2:	68ba      	ldr	r2, [r7, #8]
  4007a4:	7952      	ldrb	r2, [r2, #5]
  4007a6:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  4007a8:	2106      	movs	r1, #6
  4007aa:	6878      	ldr	r0, [r7, #4]
  4007ac:	4b54      	ldr	r3, [pc, #336]	; (400900 <parseMbusPkt+0x4ac>)
  4007ae:	4798      	blx	r3
  4007b0:	4603      	mov	r3, r0
  4007b2:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  4007b4:	687b      	ldr	r3, [r7, #4]
  4007b6:	3306      	adds	r3, #6
  4007b8:	8bfa      	ldrh	r2, [r7, #30]
  4007ba:	b2d2      	uxtb	r2, r2
  4007bc:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  4007be:	687b      	ldr	r3, [r7, #4]
  4007c0:	3307      	adds	r3, #7
  4007c2:	8bfa      	ldrh	r2, [r7, #30]
  4007c4:	0a12      	lsrs	r2, r2, #8
  4007c6:	b292      	uxth	r2, r2
  4007c8:	b2d2      	uxtb	r2, r2
  4007ca:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  4007cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4007ce:	2208      	movs	r2, #8
  4007d0:	701a      	strb	r2, [r3, #0]
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
  4007d2:	68bb      	ldr	r3, [r7, #8]
  4007d4:	3306      	adds	r3, #6
  4007d6:	781b      	ldrb	r3, [r3, #0]
  4007d8:	b29b      	uxth	r3, r3
  4007da:	3307      	adds	r3, #7
  4007dc:	833b      	strh	r3, [r7, #24]
						 ind = 0;
  4007de:	2300      	movs	r3, #0
  4007e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 for(i = 7; i < numReg; i++)
  4007e4:	2307      	movs	r3, #7
  4007e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  4007ea:	e02a      	b.n	400842 <parseMbusPkt+0x3ee>
						 {
							 if(i%2==1)
  4007ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4007f0:	f003 0301 	and.w	r3, r3, #1
  4007f4:	b2db      	uxtb	r3, r3
  4007f6:	2b00      	cmp	r3, #0
  4007f8:	d008      	beq.n	40080c <parseMbusPkt+0x3b8>
							 {
								 regVal = ((uint16_t)buff[i])<<8;
  4007fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4007fe:	68ba      	ldr	r2, [r7, #8]
  400800:	4413      	add	r3, r2
  400802:	781b      	ldrb	r3, [r3, #0]
  400804:	b29b      	uxth	r3, r3
  400806:	021b      	lsls	r3, r3, #8
  400808:	84fb      	strh	r3, [r7, #38]	; 0x26
  40080a:	e015      	b.n	400838 <parseMbusPkt+0x3e4>
							 }
							 else
							 {
								 regVal |= buff[i];
  40080c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400810:	68ba      	ldr	r2, [r7, #8]
  400812:	4413      	add	r3, r2
  400814:	781b      	ldrb	r3, [r3, #0]
  400816:	b29a      	uxth	r2, r3
  400818:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  40081a:	4313      	orrs	r3, r2
  40081c:	84fb      	strh	r3, [r7, #38]	; 0x26
								 mBusRegs[regAddr+ind] = regVal;
  40081e:	8b7a      	ldrh	r2, [r7, #26]
  400820:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400824:	4413      	add	r3, r2
  400826:	4937      	ldr	r1, [pc, #220]	; (400904 <parseMbusPkt+0x4b0>)
  400828:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  40082a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								 ind ++;
  40082e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400832:	3301      	adds	r3, #1
  400834:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 *respLen = 8;
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
						 ind = 0;
						 for(i = 7; i < numReg; i++)
  400838:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  40083c:	3301      	adds	r3, #1
  40083e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400842:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400846:	b29b      	uxth	r3, r3
  400848:	8b3a      	ldrh	r2, [r7, #24]
  40084a:	429a      	cmp	r2, r3
  40084c:	d8ce      	bhi.n	4007ec <parseMbusPkt+0x398>
								 mBusRegs[regAddr+ind] = regVal;
								 ind ++;
							 }
						 }
						 /* Process Write Reg Req */
						 writeFunc(mBusRegs,regAddr,ind);
  40084e:	4b2e      	ldr	r3, [pc, #184]	; (400908 <parseMbusPkt+0x4b4>)
  400850:	681b      	ldr	r3, [r3, #0]
  400852:	8b7a      	ldrh	r2, [r7, #26]
  400854:	b2d1      	uxtb	r1, r2
  400856:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  40085a:	482a      	ldr	r0, [pc, #168]	; (400904 <parseMbusPkt+0x4b0>)
  40085c:	4798      	blx	r3
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  40085e:	e013      	b.n	400888 <parseMbusPkt+0x434>
						 writeFunc(mBusRegs,regAddr,ind);
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  400860:	2301      	movs	r3, #1
  400862:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x90;
  400866:	2390      	movs	r3, #144	; 0x90
  400868:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  40086c:	2302      	movs	r3, #2
  40086e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400872:	e009      	b.n	400888 <parseMbusPkt+0x434>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  400874:	2301      	movs	r3, #1
  400876:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x90;
  40087a:	2390      	movs	r3, #144	; 0x90
  40087c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  400880:	2303      	movs	r3, #3
  400882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  400886:	e00d      	b.n	4008a4 <parseMbusPkt+0x450>
  400888:	e00c      	b.n	4008a4 <parseMbusPkt+0x450>
				 default:
				 /* Illegal Function Code Error */
				 /* Set MSB of recvd Function code */
				 /* Error Code 0x01 */
				 expFuncCode = fCode|(1<<7);
  40088a:	7dfb      	ldrb	r3, [r7, #23]
  40088c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  400890:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				 expCode = 0x01;
  400894:	2301      	movs	r3, #1
  400896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 genErrRsp = 1;
  40089a:	2301      	movs	r3, #1
  40089c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				 break;
  4008a0:	e000      	b.n	4008a4 <parseMbusPkt+0x450>
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  4008a2:	bf00      	nop
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
		 crc = calcCRC(buff,len-2);
		 /* If CRC Matched */
		 if(crc==recvCrc)
  4008a4:	e002      	b.n	4008ac <parseMbusPkt+0x458>
			 }
		 }
	 }
	 else
	 {
		 *respLen = 0;
  4008a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4008a8:	2200      	movs	r2, #0
  4008aa:	701a      	strb	r2, [r3, #0]
	 }
	 
	 if(genErrRsp)
  4008ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
  4008b0:	2b00      	cmp	r3, #0
  4008b2:	d021      	beq.n	4008f8 <parseMbusPkt+0x4a4>
	 {
		 respBuff[0] = slaveAddr;
  4008b4:	687b      	ldr	r3, [r7, #4]
  4008b6:	7bfa      	ldrb	r2, [r7, #15]
  4008b8:	701a      	strb	r2, [r3, #0]
		 respBuff[1] = expFuncCode;
  4008ba:	687b      	ldr	r3, [r7, #4]
  4008bc:	3301      	adds	r3, #1
  4008be:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
  4008c2:	701a      	strb	r2, [r3, #0]
		 respBuff[2] = expCode;
  4008c4:	687b      	ldr	r3, [r7, #4]
  4008c6:	3302      	adds	r3, #2
  4008c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
  4008cc:	701a      	strb	r2, [r3, #0]
		 crc = calcCRC(respBuff, 3);
  4008ce:	2103      	movs	r1, #3
  4008d0:	6878      	ldr	r0, [r7, #4]
  4008d2:	4b0b      	ldr	r3, [pc, #44]	; (400900 <parseMbusPkt+0x4ac>)
  4008d4:	4798      	blx	r3
  4008d6:	4603      	mov	r3, r0
  4008d8:	83fb      	strh	r3, [r7, #30]
		 respBuff[3] = (crc&0x00FF);
  4008da:	687b      	ldr	r3, [r7, #4]
  4008dc:	3303      	adds	r3, #3
  4008de:	8bfa      	ldrh	r2, [r7, #30]
  4008e0:	b2d2      	uxtb	r2, r2
  4008e2:	701a      	strb	r2, [r3, #0]
		 respBuff[4] = (crc>>8);
  4008e4:	687b      	ldr	r3, [r7, #4]
  4008e6:	3304      	adds	r3, #4
  4008e8:	8bfa      	ldrh	r2, [r7, #30]
  4008ea:	0a12      	lsrs	r2, r2, #8
  4008ec:	b292      	uxth	r2, r2
  4008ee:	b2d2      	uxtb	r2, r2
  4008f0:	701a      	strb	r2, [r3, #0]
		 *respLen = 5;
  4008f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4008f4:	2205      	movs	r2, #5
  4008f6:	701a      	strb	r2, [r3, #0]
	 }
 }
  4008f8:	bf00      	nop
  4008fa:	3728      	adds	r7, #40	; 0x28
  4008fc:	46bd      	mov	sp, r7
  4008fe:	bd80      	pop	{r7, pc}
  400900:	0040090d 	.word	0x0040090d
  400904:	20000458 	.word	0x20000458
  400908:	200004e4 	.word	0x200004e4

0040090c <calcCRC>:

 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
  40090c:	b480      	push	{r7}
  40090e:	b085      	sub	sp, #20
  400910:	af00      	add	r7, sp, #0
  400912:	6078      	str	r0, [r7, #4]
  400914:	460b      	mov	r3, r1
  400916:	70fb      	strb	r3, [r7, #3]
	 uint16_t crcReg = 0xFFFF;
  400918:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40091c:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;
  40091e:	2300      	movs	r3, #0
  400920:	737b      	strb	r3, [r7, #13]
  400922:	2300      	movs	r3, #0
  400924:	733b      	strb	r3, [r7, #12]

	 for(i=0;i<len;i++)
  400926:	2300      	movs	r3, #0
  400928:	737b      	strb	r3, [r7, #13]
  40092a:	e026      	b.n	40097a <calcCRC+0x6e>
	 {
		 crcReg = crcReg ^ buff[i];
  40092c:	7b7b      	ldrb	r3, [r7, #13]
  40092e:	687a      	ldr	r2, [r7, #4]
  400930:	4413      	add	r3, r2
  400932:	781b      	ldrb	r3, [r3, #0]
  400934:	b29a      	uxth	r2, r3
  400936:	89fb      	ldrh	r3, [r7, #14]
  400938:	4053      	eors	r3, r2
  40093a:	81fb      	strh	r3, [r7, #14]
		 for(j=0;j<8;j++)
  40093c:	2300      	movs	r3, #0
  40093e:	733b      	strb	r3, [r7, #12]
  400940:	e015      	b.n	40096e <calcCRC+0x62>
		 {

			 if(bitIsSet(crcReg,0))
  400942:	89fb      	ldrh	r3, [r7, #14]
  400944:	f003 0301 	and.w	r3, r3, #1
  400948:	2b00      	cmp	r3, #0
  40094a:	d00a      	beq.n	400962 <calcCRC+0x56>
			 {
				 crcReg = crcReg >> 1;
  40094c:	89fb      	ldrh	r3, [r7, #14]
  40094e:	085b      	lsrs	r3, r3, #1
  400950:	81fb      	strh	r3, [r7, #14]
				 crcReg = crcReg ^ MBUS_CRC_POLY;
  400952:	89fb      	ldrh	r3, [r7, #14]
  400954:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
  400958:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
  40095c:	43db      	mvns	r3, r3
  40095e:	81fb      	strh	r3, [r7, #14]
  400960:	e002      	b.n	400968 <calcCRC+0x5c>
			 }
			 else
			 {
				 crcReg = crcReg >> 1;
  400962:	89fb      	ldrh	r3, [r7, #14]
  400964:	085b      	lsrs	r3, r3, #1
  400966:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
	 {
		 crcReg = crcReg ^ buff[i];
		 for(j=0;j<8;j++)
  400968:	7b3b      	ldrb	r3, [r7, #12]
  40096a:	3301      	adds	r3, #1
  40096c:	733b      	strb	r3, [r7, #12]
  40096e:	7b3b      	ldrb	r3, [r7, #12]
  400970:	2b07      	cmp	r3, #7
  400972:	d9e6      	bls.n	400942 <calcCRC+0x36>
 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
	 uint16_t crcReg = 0xFFFF;
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
  400974:	7b7b      	ldrb	r3, [r7, #13]
  400976:	3301      	adds	r3, #1
  400978:	737b      	strb	r3, [r7, #13]
  40097a:	7b7a      	ldrb	r2, [r7, #13]
  40097c:	78fb      	ldrb	r3, [r7, #3]
  40097e:	429a      	cmp	r2, r3
  400980:	d3d4      	bcc.n	40092c <calcCRC+0x20>
			 {
				 crcReg = crcReg >> 1;
			 }
		 }
	 }
	 return crcReg;
  400982:	89fb      	ldrh	r3, [r7, #14]
 }
  400984:	4618      	mov	r0, r3
  400986:	3714      	adds	r7, #20
  400988:	46bd      	mov	sp, r7
  40098a:	bc80      	pop	{r7}
  40098c:	4770      	bx	lr
  40098e:	bf00      	nop

00400990 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400990:	b480      	push	{r7}
  400992:	b083      	sub	sp, #12
  400994:	af00      	add	r7, sp, #0
  400996:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400998:	687b      	ldr	r3, [r7, #4]
  40099a:	2b07      	cmp	r3, #7
  40099c:	d825      	bhi.n	4009ea <osc_get_rate+0x5a>
  40099e:	a201      	add	r2, pc, #4	; (adr r2, 4009a4 <osc_get_rate+0x14>)
  4009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009a4:	004009c5 	.word	0x004009c5
  4009a8:	004009cb 	.word	0x004009cb
  4009ac:	004009d1 	.word	0x004009d1
  4009b0:	004009d7 	.word	0x004009d7
  4009b4:	004009db 	.word	0x004009db
  4009b8:	004009df 	.word	0x004009df
  4009bc:	004009e3 	.word	0x004009e3
  4009c0:	004009e7 	.word	0x004009e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4009c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4009c8:	e010      	b.n	4009ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4009ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009ce:	e00d      	b.n	4009ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4009d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009d4:	e00a      	b.n	4009ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4009d6:	4b08      	ldr	r3, [pc, #32]	; (4009f8 <osc_get_rate+0x68>)
  4009d8:	e008      	b.n	4009ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4009da:	4b08      	ldr	r3, [pc, #32]	; (4009fc <osc_get_rate+0x6c>)
  4009dc:	e006      	b.n	4009ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4009de:	4b08      	ldr	r3, [pc, #32]	; (400a00 <osc_get_rate+0x70>)
  4009e0:	e004      	b.n	4009ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4009e2:	4b07      	ldr	r3, [pc, #28]	; (400a00 <osc_get_rate+0x70>)
  4009e4:	e002      	b.n	4009ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4009e6:	4b06      	ldr	r3, [pc, #24]	; (400a00 <osc_get_rate+0x70>)
  4009e8:	e000      	b.n	4009ec <osc_get_rate+0x5c>
	}

	return 0;
  4009ea:	2300      	movs	r3, #0
}
  4009ec:	4618      	mov	r0, r3
  4009ee:	370c      	adds	r7, #12
  4009f0:	46bd      	mov	sp, r7
  4009f2:	bc80      	pop	{r7}
  4009f4:	4770      	bx	lr
  4009f6:	bf00      	nop
  4009f8:	003d0900 	.word	0x003d0900
  4009fc:	007a1200 	.word	0x007a1200
  400a00:	00b71b00 	.word	0x00b71b00

00400a04 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400a04:	b580      	push	{r7, lr}
  400a06:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400a08:	2006      	movs	r0, #6
  400a0a:	4b04      	ldr	r3, [pc, #16]	; (400a1c <sysclk_get_main_hz+0x18>)
  400a0c:	4798      	blx	r3
  400a0e:	4602      	mov	r2, r0
  400a10:	4613      	mov	r3, r2
  400a12:	009b      	lsls	r3, r3, #2
  400a14:	4413      	add	r3, r2
  400a16:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400a18:	4618      	mov	r0, r3
  400a1a:	bd80      	pop	{r7, pc}
  400a1c:	00400991 	.word	0x00400991

00400a20 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400a20:	b580      	push	{r7, lr}
  400a22:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400a24:	4b02      	ldr	r3, [pc, #8]	; (400a30 <sysclk_get_peripheral_hz+0x10>)
  400a26:	4798      	blx	r3
  400a28:	4603      	mov	r3, r0
  400a2a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400a2c:	4618      	mov	r0, r3
  400a2e:	bd80      	pop	{r7, pc}
  400a30:	00400a05 	.word	0x00400a05

00400a34 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400a34:	b580      	push	{r7, lr}
  400a36:	b082      	sub	sp, #8
  400a38:	af00      	add	r7, sp, #0
  400a3a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400a3c:	6878      	ldr	r0, [r7, #4]
  400a3e:	4b03      	ldr	r3, [pc, #12]	; (400a4c <sysclk_enable_peripheral_clock+0x18>)
  400a40:	4798      	blx	r3
}
  400a42:	bf00      	nop
  400a44:	3708      	adds	r7, #8
  400a46:	46bd      	mov	sp, r7
  400a48:	bd80      	pop	{r7, pc}
  400a4a:	bf00      	nop
  400a4c:	00401905 	.word	0x00401905

00400a50 <InitRs485Pdc>:

 //volatile uint8_t txDone = 1;
 //volatile uint8_t rxDone = 1;

 void InitRs485Pdc(void)
 {
  400a50:	b5b0      	push	{r4, r5, r7, lr}
  400a52:	b086      	sub	sp, #24
  400a54:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  400a56:	4b18      	ldr	r3, [pc, #96]	; (400ab8 <InitRs485Pdc+0x68>)
  400a58:	463c      	mov	r4, r7
  400a5a:	461d      	mov	r5, r3
  400a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400a60:	e895 0003 	ldmia.w	r5, {r0, r1}
  400a64:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(RS485_USART_ID);
  400a68:	200f      	movs	r0, #15
  400a6a:	4b14      	ldr	r3, [pc, #80]	; (400abc <InitRs485Pdc+0x6c>)
  400a6c:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs485(RS485_USART, &usart_console_settings,
  400a6e:	4b14      	ldr	r3, [pc, #80]	; (400ac0 <InitRs485Pdc+0x70>)
  400a70:	4798      	blx	r3
  400a72:	4602      	mov	r2, r0
  400a74:	463b      	mov	r3, r7
  400a76:	4619      	mov	r1, r3
  400a78:	4812      	ldr	r0, [pc, #72]	; (400ac4 <InitRs485Pdc+0x74>)
  400a7a:	4b13      	ldr	r3, [pc, #76]	; (400ac8 <InitRs485Pdc+0x78>)
  400a7c:	4798      	blx	r3
	 sysclk_get_peripheral_hz());


	 /* Disable all the interrupts. */
	 usart_disable_interrupt(RS485_USART, 0xFFFFFFFF);
  400a7e:	f04f 31ff 	mov.w	r1, #4294967295
  400a82:	4810      	ldr	r0, [pc, #64]	; (400ac4 <InitRs485Pdc+0x74>)
  400a84:	4b11      	ldr	r3, [pc, #68]	; (400acc <InitRs485Pdc+0x7c>)
  400a86:	4798      	blx	r3

	 /* Enable TX & RX function. */
	 usart_enable_tx(RS485_USART);
  400a88:	480e      	ldr	r0, [pc, #56]	; (400ac4 <InitRs485Pdc+0x74>)
  400a8a:	4b11      	ldr	r3, [pc, #68]	; (400ad0 <InitRs485Pdc+0x80>)
  400a8c:	4798      	blx	r3
	 usart_enable_rx(RS485_USART);
  400a8e:	480d      	ldr	r0, [pc, #52]	; (400ac4 <InitRs485Pdc+0x74>)
  400a90:	4b10      	ldr	r3, [pc, #64]	; (400ad4 <InitRs485Pdc+0x84>)
  400a92:	4798      	blx	r3
 	 
	 /* Configure and enable interrupt of USART. */
	 //NVIC_EnableIRQ(RS485_USART_IRQn);
 
	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 rs485PdcBase = usart_get_pdc_base(RS485_USART);
  400a94:	480b      	ldr	r0, [pc, #44]	; (400ac4 <InitRs485Pdc+0x74>)
  400a96:	4b10      	ldr	r3, [pc, #64]	; (400ad8 <InitRs485Pdc+0x88>)
  400a98:	4798      	blx	r3
  400a9a:	4602      	mov	r2, r0
  400a9c:	4b0f      	ldr	r3, [pc, #60]	; (400adc <InitRs485Pdc+0x8c>)
  400a9e:	601a      	str	r2, [r3, #0]
	 pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400aa0:	4b0e      	ldr	r3, [pc, #56]	; (400adc <InitRs485Pdc+0x8c>)
  400aa2:	681b      	ldr	r3, [r3, #0]
  400aa4:	f240 1101 	movw	r1, #257	; 0x101
  400aa8:	4618      	mov	r0, r3
  400aaa:	4b0d      	ldr	r3, [pc, #52]	; (400ae0 <InitRs485Pdc+0x90>)
  400aac:	4798      	blx	r3

	 /* Enable Rx & Tx interrupts */
	 //usart_enable_interrupt(RS485_USART, US_IER_ENDRX | US_IER_ENDTX);
 }
  400aae:	bf00      	nop
  400ab0:	3718      	adds	r7, #24
  400ab2:	46bd      	mov	sp, r7
  400ab4:	bdb0      	pop	{r4, r5, r7, pc}
  400ab6:	bf00      	nop
  400ab8:	004023ec 	.word	0x004023ec
  400abc:	00400a35 	.word	0x00400a35
  400ac0:	00400a21 	.word	0x00400a21
  400ac4:	40028000 	.word	0x40028000
  400ac8:	00400295 	.word	0x00400295
  400acc:	00400365 	.word	0x00400365
  400ad0:	004002d5 	.word	0x004002d5
  400ad4:	0040031d 	.word	0x0040031d
  400ad8:	004003ed 	.word	0x004003ed
  400adc:	200004e8 	.word	0x200004e8
  400ae0:	004010f5 	.word	0x004010f5

00400ae4 <USART1_Handler>:

 /* USART Interrupt Handler */
 void RS485_USART_Handler(void)
 {
  400ae4:	b580      	push	{r7, lr}
  400ae6:	b082      	sub	sp, #8
  400ae8:	af00      	add	r7, sp, #0
	 uint32_t ul_status;

	 /* Read USART status. */
	 ul_status = usart_get_status(RS485_USART);
  400aea:	480d      	ldr	r0, [pc, #52]	; (400b20 <USART1_Handler+0x3c>)
  400aec:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <USART1_Handler+0x40>)
  400aee:	4798      	blx	r3
  400af0:	6078      	str	r0, [r7, #4]

	 if(ul_status & US_CSR_ENDRX)
  400af2:	687b      	ldr	r3, [r7, #4]
  400af4:	f003 0308 	and.w	r3, r3, #8
  400af8:	2b00      	cmp	r3, #0
  400afa:	d004      	beq.n	400b06 <USART1_Handler+0x22>
	 {
		//rxDone = 1;
		usart_disable_interrupt(RS485_USART, US_IDR_ENDRX);
  400afc:	2108      	movs	r1, #8
  400afe:	4808      	ldr	r0, [pc, #32]	; (400b20 <USART1_Handler+0x3c>)
  400b00:	4b09      	ldr	r3, [pc, #36]	; (400b28 <USART1_Handler+0x44>)
  400b02:	4798      	blx	r3
	 else if(ul_status & US_CSR_ENDTX)
	 {
		//txDone = 1;
		usart_disable_interrupt(RS485_USART, US_IDR_ENDTX);
	 }
}
  400b04:	e008      	b.n	400b18 <USART1_Handler+0x34>
	 if(ul_status & US_CSR_ENDRX)
	 {
		//rxDone = 1;
		usart_disable_interrupt(RS485_USART, US_IDR_ENDRX);
	 }
	 else if(ul_status & US_CSR_ENDTX)
  400b06:	687b      	ldr	r3, [r7, #4]
  400b08:	f003 0310 	and.w	r3, r3, #16
  400b0c:	2b00      	cmp	r3, #0
  400b0e:	d003      	beq.n	400b18 <USART1_Handler+0x34>
	 {
		//txDone = 1;
		usart_disable_interrupt(RS485_USART, US_IDR_ENDTX);
  400b10:	2110      	movs	r1, #16
  400b12:	4803      	ldr	r0, [pc, #12]	; (400b20 <USART1_Handler+0x3c>)
  400b14:	4b04      	ldr	r3, [pc, #16]	; (400b28 <USART1_Handler+0x44>)
  400b16:	4798      	blx	r3
	 }
}
  400b18:	bf00      	nop
  400b1a:	3708      	adds	r7, #8
  400b1c:	46bd      	mov	sp, r7
  400b1e:	bd80      	pop	{r7, pc}
  400b20:	40028000 	.word	0x40028000
  400b24:	00400381 	.word	0x00400381
  400b28:	00400365 	.word	0x00400365

00400b2c <Rs485PdcStartTx>:

 /* Set pointers and start transmitting */
 void Rs485PdcStartTx(uint32_t buff, uint16_t nBytes)
 {
  400b2c:	b580      	push	{r7, lr}
  400b2e:	b082      	sub	sp, #8
  400b30:	af00      	add	r7, sp, #0
  400b32:	6078      	str	r0, [r7, #4]
  400b34:	460b      	mov	r3, r1
  400b36:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  400b38:	4a08      	ldr	r2, [pc, #32]	; (400b5c <Rs485PdcStartTx+0x30>)
  400b3a:	687b      	ldr	r3, [r7, #4]
  400b3c:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  400b3e:	887b      	ldrh	r3, [r7, #2]
  400b40:	4a06      	ldr	r2, [pc, #24]	; (400b5c <Rs485PdcStartTx+0x30>)
  400b42:	6053      	str	r3, [r2, #4]
	pdc_tx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  400b44:	4b06      	ldr	r3, [pc, #24]	; (400b60 <Rs485PdcStartTx+0x34>)
  400b46:	681b      	ldr	r3, [r3, #0]
  400b48:	2200      	movs	r2, #0
  400b4a:	4904      	ldr	r1, [pc, #16]	; (400b5c <Rs485PdcStartTx+0x30>)
  400b4c:	4618      	mov	r0, r3
  400b4e:	4b05      	ldr	r3, [pc, #20]	; (400b64 <Rs485PdcStartTx+0x38>)
  400b50:	4798      	blx	r3
	//txDone = 0;
 }
  400b52:	bf00      	nop
  400b54:	3708      	adds	r7, #8
  400b56:	46bd      	mov	sp, r7
  400b58:	bd80      	pop	{r7, pc}
  400b5a:	bf00      	nop
  400b5c:	200004ec 	.word	0x200004ec
  400b60:	200004e8 	.word	0x200004e8
  400b64:	0040106d 	.word	0x0040106d

00400b68 <Rs485PdcStartRx>:

 /* Set pointers and start receiving */
 void Rs485PdcStartRx(uint32_t buff, uint16_t nBytes)
 {
  400b68:	b580      	push	{r7, lr}
  400b6a:	b082      	sub	sp, #8
  400b6c:	af00      	add	r7, sp, #0
  400b6e:	6078      	str	r0, [r7, #4]
  400b70:	460b      	mov	r3, r1
  400b72:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  400b74:	4a08      	ldr	r2, [pc, #32]	; (400b98 <Rs485PdcStartRx+0x30>)
  400b76:	687b      	ldr	r3, [r7, #4]
  400b78:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  400b7a:	887b      	ldrh	r3, [r7, #2]
  400b7c:	4a06      	ldr	r2, [pc, #24]	; (400b98 <Rs485PdcStartRx+0x30>)
  400b7e:	6053      	str	r3, [r2, #4]
	pdc_rx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  400b80:	4b06      	ldr	r3, [pc, #24]	; (400b9c <Rs485PdcStartRx+0x34>)
  400b82:	681b      	ldr	r3, [r3, #0]
  400b84:	2200      	movs	r2, #0
  400b86:	4904      	ldr	r1, [pc, #16]	; (400b98 <Rs485PdcStartRx+0x30>)
  400b88:	4618      	mov	r0, r3
  400b8a:	4b05      	ldr	r3, [pc, #20]	; (400ba0 <Rs485PdcStartRx+0x38>)
  400b8c:	4798      	blx	r3
	//rxDone = 0;
 }
  400b8e:	bf00      	nop
  400b90:	3708      	adds	r7, #8
  400b92:	46bd      	mov	sp, r7
  400b94:	bd80      	pop	{r7, pc}
  400b96:	bf00      	nop
  400b98:	200004ec 	.word	0x200004ec
  400b9c:	200004e8 	.word	0x200004e8
  400ba0:	004010b1 	.word	0x004010b1

00400ba4 <Rs485PdcGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t Rs485PdcGetRxBytes(void)
 {
  400ba4:	b580      	push	{r7, lr}
  400ba6:	b082      	sub	sp, #8
  400ba8:	af00      	add	r7, sp, #0
	uint32_t recvdBytes = RS485_BUFFER_SIZE;
  400baa:	2323      	movs	r3, #35	; 0x23
  400bac:	607b      	str	r3, [r7, #4]
	recvdBytes -= pdc_read_rx_counter(rs485PdcBase);
  400bae:	4b09      	ldr	r3, [pc, #36]	; (400bd4 <Rs485PdcGetRxBytes+0x30>)
  400bb0:	681b      	ldr	r3, [r3, #0]
  400bb2:	4618      	mov	r0, r3
  400bb4:	4b08      	ldr	r3, [pc, #32]	; (400bd8 <Rs485PdcGetRxBytes+0x34>)
  400bb6:	4798      	blx	r3
  400bb8:	4602      	mov	r2, r0
  400bba:	687b      	ldr	r3, [r7, #4]
  400bbc:	1a9b      	subs	r3, r3, r2
  400bbe:	607b      	str	r3, [r7, #4]
	if(recvdBytes>RS485_BUFFER_SIZE)//If overflow occurred. 
  400bc0:	687b      	ldr	r3, [r7, #4]
  400bc2:	2b23      	cmp	r3, #35	; 0x23
  400bc4:	d901      	bls.n	400bca <Rs485PdcGetRxBytes+0x26>
	{
		recvdBytes = 0;
  400bc6:	2300      	movs	r3, #0
  400bc8:	607b      	str	r3, [r7, #4]
	}
	return recvdBytes;
  400bca:	687b      	ldr	r3, [r7, #4]
 }
  400bcc:	4618      	mov	r0, r3
  400bce:	3708      	adds	r7, #8
  400bd0:	46bd      	mov	sp, r7
  400bd2:	bd80      	pop	{r7, pc}
  400bd4:	200004e8 	.word	0x200004e8
  400bd8:	00401135 	.word	0x00401135

00400bdc <Rs485PdcGetTxStatus>:
	return (usart_get_status(RS485_USART)&US_CSR_ENDRX);
 }

 /* Returns 1 if Tx Buffer is empty else 0 */
 uint32_t Rs485PdcGetTxStatus(void)
 {
  400bdc:	b580      	push	{r7, lr}
  400bde:	af00      	add	r7, sp, #0
	return (usart_get_status(RS485_USART)&US_CSR_ENDTX);
  400be0:	4803      	ldr	r0, [pc, #12]	; (400bf0 <Rs485PdcGetTxStatus+0x14>)
  400be2:	4b04      	ldr	r3, [pc, #16]	; (400bf4 <Rs485PdcGetTxStatus+0x18>)
  400be4:	4798      	blx	r3
  400be6:	4603      	mov	r3, r0
  400be8:	f003 0310 	and.w	r3, r3, #16
 }
  400bec:	4618      	mov	r0, r3
  400bee:	bd80      	pop	{r7, pc}
  400bf0:	40028000 	.word	0x40028000
  400bf4:	00400381 	.word	0x00400381

00400bf8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400bf8:	b580      	push	{r7, lr}
  400bfa:	b084      	sub	sp, #16
  400bfc:	af00      	add	r7, sp, #0
  400bfe:	6078      	str	r0, [r7, #4]
  400c00:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c02:	6878      	ldr	r0, [r7, #4]
  400c04:	4b2c      	ldr	r3, [pc, #176]	; (400cb8 <pio_handler_process+0xc0>)
  400c06:	4798      	blx	r3
  400c08:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400c0a:	6878      	ldr	r0, [r7, #4]
  400c0c:	4b2b      	ldr	r3, [pc, #172]	; (400cbc <pio_handler_process+0xc4>)
  400c0e:	4798      	blx	r3
  400c10:	4602      	mov	r2, r0
  400c12:	68fb      	ldr	r3, [r7, #12]
  400c14:	4013      	ands	r3, r2
  400c16:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400c18:	68fb      	ldr	r3, [r7, #12]
  400c1a:	2b00      	cmp	r3, #0
  400c1c:	d03c      	beq.n	400c98 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400c1e:	2300      	movs	r3, #0
  400c20:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400c22:	e034      	b.n	400c8e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400c24:	4a26      	ldr	r2, [pc, #152]	; (400cc0 <pio_handler_process+0xc8>)
  400c26:	68bb      	ldr	r3, [r7, #8]
  400c28:	011b      	lsls	r3, r3, #4
  400c2a:	4413      	add	r3, r2
  400c2c:	681a      	ldr	r2, [r3, #0]
  400c2e:	683b      	ldr	r3, [r7, #0]
  400c30:	429a      	cmp	r2, r3
  400c32:	d126      	bne.n	400c82 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400c34:	4a22      	ldr	r2, [pc, #136]	; (400cc0 <pio_handler_process+0xc8>)
  400c36:	68bb      	ldr	r3, [r7, #8]
  400c38:	011b      	lsls	r3, r3, #4
  400c3a:	4413      	add	r3, r2
  400c3c:	3304      	adds	r3, #4
  400c3e:	681a      	ldr	r2, [r3, #0]
  400c40:	68fb      	ldr	r3, [r7, #12]
  400c42:	4013      	ands	r3, r2
  400c44:	2b00      	cmp	r3, #0
  400c46:	d01c      	beq.n	400c82 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c48:	4a1d      	ldr	r2, [pc, #116]	; (400cc0 <pio_handler_process+0xc8>)
  400c4a:	68bb      	ldr	r3, [r7, #8]
  400c4c:	011b      	lsls	r3, r3, #4
  400c4e:	4413      	add	r3, r2
  400c50:	330c      	adds	r3, #12
  400c52:	681b      	ldr	r3, [r3, #0]
  400c54:	491a      	ldr	r1, [pc, #104]	; (400cc0 <pio_handler_process+0xc8>)
  400c56:	68ba      	ldr	r2, [r7, #8]
  400c58:	0112      	lsls	r2, r2, #4
  400c5a:	440a      	add	r2, r1
  400c5c:	6810      	ldr	r0, [r2, #0]
  400c5e:	4918      	ldr	r1, [pc, #96]	; (400cc0 <pio_handler_process+0xc8>)
  400c60:	68ba      	ldr	r2, [r7, #8]
  400c62:	0112      	lsls	r2, r2, #4
  400c64:	440a      	add	r2, r1
  400c66:	3204      	adds	r2, #4
  400c68:	6812      	ldr	r2, [r2, #0]
  400c6a:	4611      	mov	r1, r2
  400c6c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400c6e:	4a14      	ldr	r2, [pc, #80]	; (400cc0 <pio_handler_process+0xc8>)
  400c70:	68bb      	ldr	r3, [r7, #8]
  400c72:	011b      	lsls	r3, r3, #4
  400c74:	4413      	add	r3, r2
  400c76:	3304      	adds	r3, #4
  400c78:	681b      	ldr	r3, [r3, #0]
  400c7a:	43db      	mvns	r3, r3
  400c7c:	68fa      	ldr	r2, [r7, #12]
  400c7e:	4013      	ands	r3, r2
  400c80:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400c82:	68bb      	ldr	r3, [r7, #8]
  400c84:	3301      	adds	r3, #1
  400c86:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c88:	68bb      	ldr	r3, [r7, #8]
  400c8a:	2b06      	cmp	r3, #6
  400c8c:	d803      	bhi.n	400c96 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400c8e:	68fb      	ldr	r3, [r7, #12]
  400c90:	2b00      	cmp	r3, #0
  400c92:	d1c7      	bne.n	400c24 <pio_handler_process+0x2c>
  400c94:	e000      	b.n	400c98 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400c96:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400c98:	4b0a      	ldr	r3, [pc, #40]	; (400cc4 <pio_handler_process+0xcc>)
  400c9a:	681b      	ldr	r3, [r3, #0]
  400c9c:	2b00      	cmp	r3, #0
  400c9e:	d007      	beq.n	400cb0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400ca0:	4b09      	ldr	r3, [pc, #36]	; (400cc8 <pio_handler_process+0xd0>)
  400ca2:	681b      	ldr	r3, [r3, #0]
  400ca4:	2b00      	cmp	r3, #0
  400ca6:	d003      	beq.n	400cb0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400ca8:	4b07      	ldr	r3, [pc, #28]	; (400cc8 <pio_handler_process+0xd0>)
  400caa:	681b      	ldr	r3, [r3, #0]
  400cac:	6878      	ldr	r0, [r7, #4]
  400cae:	4798      	blx	r3
		}
	}
#endif
}
  400cb0:	bf00      	nop
  400cb2:	3710      	adds	r7, #16
  400cb4:	46bd      	mov	sp, r7
  400cb6:	bd80      	pop	{r7, pc}
  400cb8:	00401389 	.word	0x00401389
  400cbc:	004013a1 	.word	0x004013a1
  400cc0:	20000470 	.word	0x20000470
  400cc4:	200004f4 	.word	0x200004f4
  400cc8:	200004e0 	.word	0x200004e0

00400ccc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ccc:	b580      	push	{r7, lr}
  400cce:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400cd0:	210b      	movs	r1, #11
  400cd2:	4802      	ldr	r0, [pc, #8]	; (400cdc <PIOA_Handler+0x10>)
  400cd4:	4b02      	ldr	r3, [pc, #8]	; (400ce0 <PIOA_Handler+0x14>)
  400cd6:	4798      	blx	r3
}
  400cd8:	bf00      	nop
  400cda:	bd80      	pop	{r7, pc}
  400cdc:	400e0e00 	.word	0x400e0e00
  400ce0:	00400bf9 	.word	0x00400bf9

00400ce4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ce4:	b580      	push	{r7, lr}
  400ce6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400ce8:	210c      	movs	r1, #12
  400cea:	4802      	ldr	r0, [pc, #8]	; (400cf4 <PIOB_Handler+0x10>)
  400cec:	4b02      	ldr	r3, [pc, #8]	; (400cf8 <PIOB_Handler+0x14>)
  400cee:	4798      	blx	r3
}
  400cf0:	bf00      	nop
  400cf2:	bd80      	pop	{r7, pc}
  400cf4:	400e1000 	.word	0x400e1000
  400cf8:	00400bf9 	.word	0x00400bf9

00400cfc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400cfc:	b580      	push	{r7, lr}
  400cfe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400d00:	210d      	movs	r1, #13
  400d02:	4802      	ldr	r0, [pc, #8]	; (400d0c <PIOC_Handler+0x10>)
  400d04:	4b02      	ldr	r3, [pc, #8]	; (400d10 <PIOC_Handler+0x14>)
  400d06:	4798      	blx	r3
}
  400d08:	bf00      	nop
  400d0a:	bd80      	pop	{r7, pc}
  400d0c:	400e1200 	.word	0x400e1200
  400d10:	00400bf9 	.word	0x00400bf9

00400d14 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400d14:	b580      	push	{r7, lr}
  400d16:	b082      	sub	sp, #8
  400d18:	af00      	add	r7, sp, #0
  400d1a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d1c:	687b      	ldr	r3, [r7, #4]
  400d1e:	2b07      	cmp	r3, #7
  400d20:	d831      	bhi.n	400d86 <osc_enable+0x72>
  400d22:	a201      	add	r2, pc, #4	; (adr r2, 400d28 <osc_enable+0x14>)
  400d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d28:	00400d85 	.word	0x00400d85
  400d2c:	00400d49 	.word	0x00400d49
  400d30:	00400d51 	.word	0x00400d51
  400d34:	00400d59 	.word	0x00400d59
  400d38:	00400d61 	.word	0x00400d61
  400d3c:	00400d69 	.word	0x00400d69
  400d40:	00400d71 	.word	0x00400d71
  400d44:	00400d7b 	.word	0x00400d7b
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400d48:	2000      	movs	r0, #0
  400d4a:	4b11      	ldr	r3, [pc, #68]	; (400d90 <osc_enable+0x7c>)
  400d4c:	4798      	blx	r3
		break;
  400d4e:	e01a      	b.n	400d86 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400d50:	2001      	movs	r0, #1
  400d52:	4b0f      	ldr	r3, [pc, #60]	; (400d90 <osc_enable+0x7c>)
  400d54:	4798      	blx	r3
		break;
  400d56:	e016      	b.n	400d86 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400d58:	2000      	movs	r0, #0
  400d5a:	4b0e      	ldr	r3, [pc, #56]	; (400d94 <osc_enable+0x80>)
  400d5c:	4798      	blx	r3
		break;
  400d5e:	e012      	b.n	400d86 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400d60:	2010      	movs	r0, #16
  400d62:	4b0c      	ldr	r3, [pc, #48]	; (400d94 <osc_enable+0x80>)
  400d64:	4798      	blx	r3
		break;
  400d66:	e00e      	b.n	400d86 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400d68:	2020      	movs	r0, #32
  400d6a:	4b0a      	ldr	r3, [pc, #40]	; (400d94 <osc_enable+0x80>)
  400d6c:	4798      	blx	r3
		break;
  400d6e:	e00a      	b.n	400d86 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400d70:	213e      	movs	r1, #62	; 0x3e
  400d72:	2000      	movs	r0, #0
  400d74:	4b08      	ldr	r3, [pc, #32]	; (400d98 <osc_enable+0x84>)
  400d76:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400d78:	e005      	b.n	400d86 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400d7a:	213e      	movs	r1, #62	; 0x3e
  400d7c:	2001      	movs	r0, #1
  400d7e:	4b06      	ldr	r3, [pc, #24]	; (400d98 <osc_enable+0x84>)
  400d80:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400d82:	e000      	b.n	400d86 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  400d84:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  400d86:	bf00      	nop
  400d88:	3708      	adds	r7, #8
  400d8a:	46bd      	mov	sp, r7
  400d8c:	bd80      	pop	{r7, pc}
  400d8e:	bf00      	nop
  400d90:	00401739 	.word	0x00401739
  400d94:	004017a5 	.word	0x004017a5
  400d98:	00401815 	.word	0x00401815

00400d9c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400d9c:	b580      	push	{r7, lr}
  400d9e:	b082      	sub	sp, #8
  400da0:	af00      	add	r7, sp, #0
  400da2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400da4:	687b      	ldr	r3, [r7, #4]
  400da6:	2b07      	cmp	r3, #7
  400da8:	d826      	bhi.n	400df8 <osc_is_ready+0x5c>
  400daa:	a201      	add	r2, pc, #4	; (adr r2, 400db0 <osc_is_ready+0x14>)
  400dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400db0:	00400dd1 	.word	0x00400dd1
  400db4:	00400dd5 	.word	0x00400dd5
  400db8:	00400dd5 	.word	0x00400dd5
  400dbc:	00400de7 	.word	0x00400de7
  400dc0:	00400de7 	.word	0x00400de7
  400dc4:	00400de7 	.word	0x00400de7
  400dc8:	00400de7 	.word	0x00400de7
  400dcc:	00400de7 	.word	0x00400de7
	case OSC_SLCK_32K_RC:
		return 1;
  400dd0:	2301      	movs	r3, #1
  400dd2:	e012      	b.n	400dfa <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400dd4:	4b0b      	ldr	r3, [pc, #44]	; (400e04 <osc_is_ready+0x68>)
  400dd6:	4798      	blx	r3
  400dd8:	4603      	mov	r3, r0
  400dda:	2b00      	cmp	r3, #0
  400ddc:	bf14      	ite	ne
  400dde:	2301      	movne	r3, #1
  400de0:	2300      	moveq	r3, #0
  400de2:	b2db      	uxtb	r3, r3
  400de4:	e009      	b.n	400dfa <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400de6:	4b08      	ldr	r3, [pc, #32]	; (400e08 <osc_is_ready+0x6c>)
  400de8:	4798      	blx	r3
  400dea:	4603      	mov	r3, r0
  400dec:	2b00      	cmp	r3, #0
  400dee:	bf14      	ite	ne
  400df0:	2301      	movne	r3, #1
  400df2:	2300      	moveq	r3, #0
  400df4:	b2db      	uxtb	r3, r3
  400df6:	e000      	b.n	400dfa <osc_is_ready+0x5e>
	}

	return 0;
  400df8:	2300      	movs	r3, #0
}
  400dfa:	4618      	mov	r0, r3
  400dfc:	3708      	adds	r7, #8
  400dfe:	46bd      	mov	sp, r7
  400e00:	bd80      	pop	{r7, pc}
  400e02:	bf00      	nop
  400e04:	00401771 	.word	0x00401771
  400e08:	0040188d 	.word	0x0040188d

00400e0c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400e0c:	b480      	push	{r7}
  400e0e:	b083      	sub	sp, #12
  400e10:	af00      	add	r7, sp, #0
  400e12:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400e14:	687b      	ldr	r3, [r7, #4]
  400e16:	2b07      	cmp	r3, #7
  400e18:	d825      	bhi.n	400e66 <osc_get_rate+0x5a>
  400e1a:	a201      	add	r2, pc, #4	; (adr r2, 400e20 <osc_get_rate+0x14>)
  400e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e20:	00400e41 	.word	0x00400e41
  400e24:	00400e47 	.word	0x00400e47
  400e28:	00400e4d 	.word	0x00400e4d
  400e2c:	00400e53 	.word	0x00400e53
  400e30:	00400e57 	.word	0x00400e57
  400e34:	00400e5b 	.word	0x00400e5b
  400e38:	00400e5f 	.word	0x00400e5f
  400e3c:	00400e63 	.word	0x00400e63
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400e40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400e44:	e010      	b.n	400e68 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e4a:	e00d      	b.n	400e68 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e50:	e00a      	b.n	400e68 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400e52:	4b08      	ldr	r3, [pc, #32]	; (400e74 <osc_get_rate+0x68>)
  400e54:	e008      	b.n	400e68 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400e56:	4b08      	ldr	r3, [pc, #32]	; (400e78 <osc_get_rate+0x6c>)
  400e58:	e006      	b.n	400e68 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400e5a:	4b08      	ldr	r3, [pc, #32]	; (400e7c <osc_get_rate+0x70>)
  400e5c:	e004      	b.n	400e68 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400e5e:	4b07      	ldr	r3, [pc, #28]	; (400e7c <osc_get_rate+0x70>)
  400e60:	e002      	b.n	400e68 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400e62:	4b06      	ldr	r3, [pc, #24]	; (400e7c <osc_get_rate+0x70>)
  400e64:	e000      	b.n	400e68 <osc_get_rate+0x5c>
	}

	return 0;
  400e66:	2300      	movs	r3, #0
}
  400e68:	4618      	mov	r0, r3
  400e6a:	370c      	adds	r7, #12
  400e6c:	46bd      	mov	sp, r7
  400e6e:	bc80      	pop	{r7}
  400e70:	4770      	bx	lr
  400e72:	bf00      	nop
  400e74:	003d0900 	.word	0x003d0900
  400e78:	007a1200 	.word	0x007a1200
  400e7c:	00b71b00 	.word	0x00b71b00

00400e80 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400e80:	b580      	push	{r7, lr}
  400e82:	b082      	sub	sp, #8
  400e84:	af00      	add	r7, sp, #0
  400e86:	4603      	mov	r3, r0
  400e88:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400e8a:	bf00      	nop
  400e8c:	79fb      	ldrb	r3, [r7, #7]
  400e8e:	4618      	mov	r0, r3
  400e90:	4b05      	ldr	r3, [pc, #20]	; (400ea8 <osc_wait_ready+0x28>)
  400e92:	4798      	blx	r3
  400e94:	4603      	mov	r3, r0
  400e96:	f083 0301 	eor.w	r3, r3, #1
  400e9a:	b2db      	uxtb	r3, r3
  400e9c:	2b00      	cmp	r3, #0
  400e9e:	d1f5      	bne.n	400e8c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400ea0:	bf00      	nop
  400ea2:	3708      	adds	r7, #8
  400ea4:	46bd      	mov	sp, r7
  400ea6:	bd80      	pop	{r7, pc}
  400ea8:	00400d9d 	.word	0x00400d9d

00400eac <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400eac:	b580      	push	{r7, lr}
  400eae:	b086      	sub	sp, #24
  400eb0:	af00      	add	r7, sp, #0
  400eb2:	60f8      	str	r0, [r7, #12]
  400eb4:	607a      	str	r2, [r7, #4]
  400eb6:	603b      	str	r3, [r7, #0]
  400eb8:	460b      	mov	r3, r1
  400eba:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400ebc:	7afb      	ldrb	r3, [r7, #11]
  400ebe:	4618      	mov	r0, r3
  400ec0:	4b0d      	ldr	r3, [pc, #52]	; (400ef8 <pll_config_init+0x4c>)
  400ec2:	4798      	blx	r3
  400ec4:	4602      	mov	r2, r0
  400ec6:	687b      	ldr	r3, [r7, #4]
  400ec8:	fbb2 f3f3 	udiv	r3, r2, r3
  400ecc:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400ece:	697b      	ldr	r3, [r7, #20]
  400ed0:	683a      	ldr	r2, [r7, #0]
  400ed2:	fb02 f303 	mul.w	r3, r2, r3
  400ed6:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400ed8:	683b      	ldr	r3, [r7, #0]
  400eda:	3b01      	subs	r3, #1
  400edc:	041a      	lsls	r2, r3, #16
  400ede:	4b07      	ldr	r3, [pc, #28]	; (400efc <pll_config_init+0x50>)
  400ee0:	4013      	ands	r3, r2
  400ee2:	687a      	ldr	r2, [r7, #4]
  400ee4:	b2d2      	uxtb	r2, r2
  400ee6:	4313      	orrs	r3, r2
  400ee8:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400eec:	68fb      	ldr	r3, [r7, #12]
  400eee:	601a      	str	r2, [r3, #0]
}
  400ef0:	bf00      	nop
  400ef2:	3718      	adds	r7, #24
  400ef4:	46bd      	mov	sp, r7
  400ef6:	bd80      	pop	{r7, pc}
  400ef8:	00400e0d 	.word	0x00400e0d
  400efc:	07ff0000 	.word	0x07ff0000

00400f00 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400f00:	b580      	push	{r7, lr}
  400f02:	b082      	sub	sp, #8
  400f04:	af00      	add	r7, sp, #0
  400f06:	6078      	str	r0, [r7, #4]
  400f08:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400f0a:	683b      	ldr	r3, [r7, #0]
  400f0c:	2b00      	cmp	r3, #0
  400f0e:	d108      	bne.n	400f22 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400f10:	4b09      	ldr	r3, [pc, #36]	; (400f38 <pll_enable+0x38>)
  400f12:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400f14:	4a09      	ldr	r2, [pc, #36]	; (400f3c <pll_enable+0x3c>)
  400f16:	687b      	ldr	r3, [r7, #4]
  400f18:	681b      	ldr	r3, [r3, #0]
  400f1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400f1e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400f20:	e005      	b.n	400f2e <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400f22:	4b07      	ldr	r3, [pc, #28]	; (400f40 <pll_enable+0x40>)
  400f24:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400f26:	4a05      	ldr	r2, [pc, #20]	; (400f3c <pll_enable+0x3c>)
  400f28:	687b      	ldr	r3, [r7, #4]
  400f2a:	681b      	ldr	r3, [r3, #0]
  400f2c:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  400f2e:	bf00      	nop
  400f30:	3708      	adds	r7, #8
  400f32:	46bd      	mov	sp, r7
  400f34:	bd80      	pop	{r7, pc}
  400f36:	bf00      	nop
  400f38:	004018a5 	.word	0x004018a5
  400f3c:	400e0400 	.word	0x400e0400
  400f40:	004018d5 	.word	0x004018d5

00400f44 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400f44:	b580      	push	{r7, lr}
  400f46:	b082      	sub	sp, #8
  400f48:	af00      	add	r7, sp, #0
  400f4a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400f4c:	687b      	ldr	r3, [r7, #4]
  400f4e:	2b00      	cmp	r3, #0
  400f50:	d103      	bne.n	400f5a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400f52:	4b05      	ldr	r3, [pc, #20]	; (400f68 <pll_is_locked+0x24>)
  400f54:	4798      	blx	r3
  400f56:	4603      	mov	r3, r0
  400f58:	e002      	b.n	400f60 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400f5a:	4b04      	ldr	r3, [pc, #16]	; (400f6c <pll_is_locked+0x28>)
  400f5c:	4798      	blx	r3
  400f5e:	4603      	mov	r3, r0
	}
}
  400f60:	4618      	mov	r0, r3
  400f62:	3708      	adds	r7, #8
  400f64:	46bd      	mov	sp, r7
  400f66:	bd80      	pop	{r7, pc}
  400f68:	004018bd 	.word	0x004018bd
  400f6c:	004018ed 	.word	0x004018ed

00400f70 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400f70:	b580      	push	{r7, lr}
  400f72:	b082      	sub	sp, #8
  400f74:	af00      	add	r7, sp, #0
  400f76:	4603      	mov	r3, r0
  400f78:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400f7a:	79fb      	ldrb	r3, [r7, #7]
  400f7c:	3b03      	subs	r3, #3
  400f7e:	2b04      	cmp	r3, #4
  400f80:	d808      	bhi.n	400f94 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400f82:	79fb      	ldrb	r3, [r7, #7]
  400f84:	4618      	mov	r0, r3
  400f86:	4b06      	ldr	r3, [pc, #24]	; (400fa0 <pll_enable_source+0x30>)
  400f88:	4798      	blx	r3
		osc_wait_ready(e_src);
  400f8a:	79fb      	ldrb	r3, [r7, #7]
  400f8c:	4618      	mov	r0, r3
  400f8e:	4b05      	ldr	r3, [pc, #20]	; (400fa4 <pll_enable_source+0x34>)
  400f90:	4798      	blx	r3
		break;
  400f92:	e000      	b.n	400f96 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400f94:	bf00      	nop
	}
}
  400f96:	bf00      	nop
  400f98:	3708      	adds	r7, #8
  400f9a:	46bd      	mov	sp, r7
  400f9c:	bd80      	pop	{r7, pc}
  400f9e:	bf00      	nop
  400fa0:	00400d15 	.word	0x00400d15
  400fa4:	00400e81 	.word	0x00400e81

00400fa8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400fa8:	b580      	push	{r7, lr}
  400faa:	b082      	sub	sp, #8
  400fac:	af00      	add	r7, sp, #0
  400fae:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400fb0:	bf00      	nop
  400fb2:	6878      	ldr	r0, [r7, #4]
  400fb4:	4b04      	ldr	r3, [pc, #16]	; (400fc8 <pll_wait_for_lock+0x20>)
  400fb6:	4798      	blx	r3
  400fb8:	4603      	mov	r3, r0
  400fba:	2b00      	cmp	r3, #0
  400fbc:	d0f9      	beq.n	400fb2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400fbe:	2300      	movs	r3, #0
}
  400fc0:	4618      	mov	r0, r3
  400fc2:	3708      	adds	r7, #8
  400fc4:	46bd      	mov	sp, r7
  400fc6:	bd80      	pop	{r7, pc}
  400fc8:	00400f45 	.word	0x00400f45

00400fcc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400fcc:	b580      	push	{r7, lr}
  400fce:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400fd0:	2006      	movs	r0, #6
  400fd2:	4b04      	ldr	r3, [pc, #16]	; (400fe4 <sysclk_get_main_hz+0x18>)
  400fd4:	4798      	blx	r3
  400fd6:	4602      	mov	r2, r0
  400fd8:	4613      	mov	r3, r2
  400fda:	009b      	lsls	r3, r3, #2
  400fdc:	4413      	add	r3, r2
  400fde:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400fe0:	4618      	mov	r0, r3
  400fe2:	bd80      	pop	{r7, pc}
  400fe4:	00400e0d 	.word	0x00400e0d

00400fe8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400fe8:	b580      	push	{r7, lr}
  400fea:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400fec:	4b02      	ldr	r3, [pc, #8]	; (400ff8 <sysclk_get_cpu_hz+0x10>)
  400fee:	4798      	blx	r3
  400ff0:	4603      	mov	r3, r0
  400ff2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400ff4:	4618      	mov	r0, r3
  400ff6:	bd80      	pop	{r7, pc}
  400ff8:	00400fcd 	.word	0x00400fcd

00400ffc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400ffc:	b590      	push	{r4, r7, lr}
  400ffe:	b083      	sub	sp, #12
  401000:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401002:	4811      	ldr	r0, [pc, #68]	; (401048 <sysclk_init+0x4c>)
  401004:	4b11      	ldr	r3, [pc, #68]	; (40104c <sysclk_init+0x50>)
  401006:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401008:	2006      	movs	r0, #6
  40100a:	4b11      	ldr	r3, [pc, #68]	; (401050 <sysclk_init+0x54>)
  40100c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40100e:	1d38      	adds	r0, r7, #4
  401010:	2314      	movs	r3, #20
  401012:	2201      	movs	r2, #1
  401014:	2106      	movs	r1, #6
  401016:	4c0f      	ldr	r4, [pc, #60]	; (401054 <sysclk_init+0x58>)
  401018:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40101a:	1d3b      	adds	r3, r7, #4
  40101c:	2100      	movs	r1, #0
  40101e:	4618      	mov	r0, r3
  401020:	4b0d      	ldr	r3, [pc, #52]	; (401058 <sysclk_init+0x5c>)
  401022:	4798      	blx	r3
		pll_wait_for_lock(0);
  401024:	2000      	movs	r0, #0
  401026:	4b0d      	ldr	r3, [pc, #52]	; (40105c <sysclk_init+0x60>)
  401028:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40102a:	2010      	movs	r0, #16
  40102c:	4b0c      	ldr	r3, [pc, #48]	; (401060 <sysclk_init+0x64>)
  40102e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401030:	4b0c      	ldr	r3, [pc, #48]	; (401064 <sysclk_init+0x68>)
  401032:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401034:	4b0c      	ldr	r3, [pc, #48]	; (401068 <sysclk_init+0x6c>)
  401036:	4798      	blx	r3
  401038:	4603      	mov	r3, r0
  40103a:	4618      	mov	r0, r3
  40103c:	4b03      	ldr	r3, [pc, #12]	; (40104c <sysclk_init+0x50>)
  40103e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401040:	bf00      	nop
  401042:	370c      	adds	r7, #12
  401044:	46bd      	mov	sp, r7
  401046:	bd90      	pop	{r4, r7, pc}
  401048:	07270e00 	.word	0x07270e00
  40104c:	00401c11 	.word	0x00401c11
  401050:	00400f71 	.word	0x00400f71
  401054:	00400ead 	.word	0x00400ead
  401058:	00400f01 	.word	0x00400f01
  40105c:	00400fa9 	.word	0x00400fa9
  401060:	004016b9 	.word	0x004016b9
  401064:	00401a75 	.word	0x00401a75
  401068:	00400fe9 	.word	0x00400fe9

0040106c <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  40106c:	b480      	push	{r7}
  40106e:	b085      	sub	sp, #20
  401070:	af00      	add	r7, sp, #0
  401072:	60f8      	str	r0, [r7, #12]
  401074:	60b9      	str	r1, [r7, #8]
  401076:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  401078:	68bb      	ldr	r3, [r7, #8]
  40107a:	2b00      	cmp	r3, #0
  40107c:	d007      	beq.n	40108e <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  40107e:	68bb      	ldr	r3, [r7, #8]
  401080:	681a      	ldr	r2, [r3, #0]
  401082:	68fb      	ldr	r3, [r7, #12]
  401084:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  401086:	68bb      	ldr	r3, [r7, #8]
  401088:	685a      	ldr	r2, [r3, #4]
  40108a:	68fb      	ldr	r3, [r7, #12]
  40108c:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  40108e:	687b      	ldr	r3, [r7, #4]
  401090:	2b00      	cmp	r3, #0
  401092:	d007      	beq.n	4010a4 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  401094:	687b      	ldr	r3, [r7, #4]
  401096:	681a      	ldr	r2, [r3, #0]
  401098:	68fb      	ldr	r3, [r7, #12]
  40109a:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  40109c:	687b      	ldr	r3, [r7, #4]
  40109e:	685a      	ldr	r2, [r3, #4]
  4010a0:	68fb      	ldr	r3, [r7, #12]
  4010a2:	61da      	str	r2, [r3, #28]
	}
}
  4010a4:	bf00      	nop
  4010a6:	3714      	adds	r7, #20
  4010a8:	46bd      	mov	sp, r7
  4010aa:	bc80      	pop	{r7}
  4010ac:	4770      	bx	lr
  4010ae:	bf00      	nop

004010b0 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4010b0:	b480      	push	{r7}
  4010b2:	b085      	sub	sp, #20
  4010b4:	af00      	add	r7, sp, #0
  4010b6:	60f8      	str	r0, [r7, #12]
  4010b8:	60b9      	str	r1, [r7, #8]
  4010ba:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4010bc:	68bb      	ldr	r3, [r7, #8]
  4010be:	2b00      	cmp	r3, #0
  4010c0:	d007      	beq.n	4010d2 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  4010c2:	68bb      	ldr	r3, [r7, #8]
  4010c4:	681a      	ldr	r2, [r3, #0]
  4010c6:	68fb      	ldr	r3, [r7, #12]
  4010c8:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  4010ca:	68bb      	ldr	r3, [r7, #8]
  4010cc:	685a      	ldr	r2, [r3, #4]
  4010ce:	68fb      	ldr	r3, [r7, #12]
  4010d0:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  4010d2:	687b      	ldr	r3, [r7, #4]
  4010d4:	2b00      	cmp	r3, #0
  4010d6:	d007      	beq.n	4010e8 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  4010d8:	687b      	ldr	r3, [r7, #4]
  4010da:	681a      	ldr	r2, [r3, #0]
  4010dc:	68fb      	ldr	r3, [r7, #12]
  4010de:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  4010e0:	687b      	ldr	r3, [r7, #4]
  4010e2:	685a      	ldr	r2, [r3, #4]
  4010e4:	68fb      	ldr	r3, [r7, #12]
  4010e6:	615a      	str	r2, [r3, #20]
	}
}
  4010e8:	bf00      	nop
  4010ea:	3714      	adds	r7, #20
  4010ec:	46bd      	mov	sp, r7
  4010ee:	bc80      	pop	{r7}
  4010f0:	4770      	bx	lr
  4010f2:	bf00      	nop

004010f4 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  4010f4:	b480      	push	{r7}
  4010f6:	b083      	sub	sp, #12
  4010f8:	af00      	add	r7, sp, #0
  4010fa:	6078      	str	r0, [r7, #4]
  4010fc:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4010fe:	683a      	ldr	r2, [r7, #0]
  401100:	f240 1301 	movw	r3, #257	; 0x101
  401104:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  401106:	687a      	ldr	r2, [r7, #4]
  401108:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  40110a:	bf00      	nop
  40110c:	370c      	adds	r7, #12
  40110e:	46bd      	mov	sp, r7
  401110:	bc80      	pop	{r7}
  401112:	4770      	bx	lr

00401114 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  401114:	b480      	push	{r7}
  401116:	b083      	sub	sp, #12
  401118:	af00      	add	r7, sp, #0
  40111a:	6078      	str	r0, [r7, #4]
  40111c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  40111e:	683a      	ldr	r2, [r7, #0]
  401120:	f240 2302 	movw	r3, #514	; 0x202
  401124:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  401126:	687a      	ldr	r2, [r7, #4]
  401128:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  40112a:	bf00      	nop
  40112c:	370c      	adds	r7, #12
  40112e:	46bd      	mov	sp, r7
  401130:	bc80      	pop	{r7}
  401132:	4770      	bx	lr

00401134 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  401134:	b480      	push	{r7}
  401136:	b083      	sub	sp, #12
  401138:	af00      	add	r7, sp, #0
  40113a:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  40113c:	687b      	ldr	r3, [r7, #4]
  40113e:	685b      	ldr	r3, [r3, #4]
}
  401140:	4618      	mov	r0, r3
  401142:	370c      	adds	r7, #12
  401144:	46bd      	mov	sp, r7
  401146:	bc80      	pop	{r7}
  401148:	4770      	bx	lr
  40114a:	bf00      	nop

0040114c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  40114c:	b480      	push	{r7}
  40114e:	b085      	sub	sp, #20
  401150:	af00      	add	r7, sp, #0
  401152:	60f8      	str	r0, [r7, #12]
  401154:	60b9      	str	r1, [r7, #8]
  401156:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401158:	687b      	ldr	r3, [r7, #4]
  40115a:	2b00      	cmp	r3, #0
  40115c:	d003      	beq.n	401166 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40115e:	68fb      	ldr	r3, [r7, #12]
  401160:	68ba      	ldr	r2, [r7, #8]
  401162:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401164:	e002      	b.n	40116c <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401166:	68fb      	ldr	r3, [r7, #12]
  401168:	68ba      	ldr	r2, [r7, #8]
  40116a:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  40116c:	bf00      	nop
  40116e:	3714      	adds	r7, #20
  401170:	46bd      	mov	sp, r7
  401172:	bc80      	pop	{r7}
  401174:	4770      	bx	lr
  401176:	bf00      	nop

00401178 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401178:	b480      	push	{r7}
  40117a:	b087      	sub	sp, #28
  40117c:	af00      	add	r7, sp, #0
  40117e:	60f8      	str	r0, [r7, #12]
  401180:	60b9      	str	r1, [r7, #8]
  401182:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401184:	68fb      	ldr	r3, [r7, #12]
  401186:	687a      	ldr	r2, [r7, #4]
  401188:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40118a:	68bb      	ldr	r3, [r7, #8]
  40118c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401190:	d04a      	beq.n	401228 <pio_set_peripheral+0xb0>
  401192:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401196:	d808      	bhi.n	4011aa <pio_set_peripheral+0x32>
  401198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40119c:	d016      	beq.n	4011cc <pio_set_peripheral+0x54>
  40119e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4011a2:	d02c      	beq.n	4011fe <pio_set_peripheral+0x86>
  4011a4:	2b00      	cmp	r3, #0
  4011a6:	d069      	beq.n	40127c <pio_set_peripheral+0x104>
  4011a8:	e064      	b.n	401274 <pio_set_peripheral+0xfc>
  4011aa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4011ae:	d065      	beq.n	40127c <pio_set_peripheral+0x104>
  4011b0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4011b4:	d803      	bhi.n	4011be <pio_set_peripheral+0x46>
  4011b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4011ba:	d04a      	beq.n	401252 <pio_set_peripheral+0xda>
  4011bc:	e05a      	b.n	401274 <pio_set_peripheral+0xfc>
  4011be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4011c2:	d05b      	beq.n	40127c <pio_set_peripheral+0x104>
  4011c4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4011c8:	d058      	beq.n	40127c <pio_set_peripheral+0x104>
  4011ca:	e053      	b.n	401274 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4011cc:	68fb      	ldr	r3, [r7, #12]
  4011ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4011d0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4011d2:	68fb      	ldr	r3, [r7, #12]
  4011d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4011d6:	687b      	ldr	r3, [r7, #4]
  4011d8:	43d9      	mvns	r1, r3
  4011da:	697b      	ldr	r3, [r7, #20]
  4011dc:	400b      	ands	r3, r1
  4011de:	401a      	ands	r2, r3
  4011e0:	68fb      	ldr	r3, [r7, #12]
  4011e2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4011e4:	68fb      	ldr	r3, [r7, #12]
  4011e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4011e8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4011ea:	68fb      	ldr	r3, [r7, #12]
  4011ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4011ee:	687b      	ldr	r3, [r7, #4]
  4011f0:	43d9      	mvns	r1, r3
  4011f2:	697b      	ldr	r3, [r7, #20]
  4011f4:	400b      	ands	r3, r1
  4011f6:	401a      	ands	r2, r3
  4011f8:	68fb      	ldr	r3, [r7, #12]
  4011fa:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4011fc:	e03a      	b.n	401274 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4011fe:	68fb      	ldr	r3, [r7, #12]
  401200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401202:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401204:	687a      	ldr	r2, [r7, #4]
  401206:	697b      	ldr	r3, [r7, #20]
  401208:	431a      	orrs	r2, r3
  40120a:	68fb      	ldr	r3, [r7, #12]
  40120c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40120e:	68fb      	ldr	r3, [r7, #12]
  401210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401212:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401214:	68fb      	ldr	r3, [r7, #12]
  401216:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401218:	687b      	ldr	r3, [r7, #4]
  40121a:	43d9      	mvns	r1, r3
  40121c:	697b      	ldr	r3, [r7, #20]
  40121e:	400b      	ands	r3, r1
  401220:	401a      	ands	r2, r3
  401222:	68fb      	ldr	r3, [r7, #12]
  401224:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401226:	e025      	b.n	401274 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401228:	68fb      	ldr	r3, [r7, #12]
  40122a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40122c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40122e:	68fb      	ldr	r3, [r7, #12]
  401230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401232:	687b      	ldr	r3, [r7, #4]
  401234:	43d9      	mvns	r1, r3
  401236:	697b      	ldr	r3, [r7, #20]
  401238:	400b      	ands	r3, r1
  40123a:	401a      	ands	r2, r3
  40123c:	68fb      	ldr	r3, [r7, #12]
  40123e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401240:	68fb      	ldr	r3, [r7, #12]
  401242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401244:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401246:	687a      	ldr	r2, [r7, #4]
  401248:	697b      	ldr	r3, [r7, #20]
  40124a:	431a      	orrs	r2, r3
  40124c:	68fb      	ldr	r3, [r7, #12]
  40124e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401250:	e010      	b.n	401274 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401252:	68fb      	ldr	r3, [r7, #12]
  401254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401256:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401258:	687a      	ldr	r2, [r7, #4]
  40125a:	697b      	ldr	r3, [r7, #20]
  40125c:	431a      	orrs	r2, r3
  40125e:	68fb      	ldr	r3, [r7, #12]
  401260:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401262:	68fb      	ldr	r3, [r7, #12]
  401264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401266:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401268:	687a      	ldr	r2, [r7, #4]
  40126a:	697b      	ldr	r3, [r7, #20]
  40126c:	431a      	orrs	r2, r3
  40126e:	68fb      	ldr	r3, [r7, #12]
  401270:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401272:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401274:	68fb      	ldr	r3, [r7, #12]
  401276:	687a      	ldr	r2, [r7, #4]
  401278:	605a      	str	r2, [r3, #4]
  40127a:	e000      	b.n	40127e <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  40127c:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  40127e:	371c      	adds	r7, #28
  401280:	46bd      	mov	sp, r7
  401282:	bc80      	pop	{r7}
  401284:	4770      	bx	lr
  401286:	bf00      	nop

00401288 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401288:	b580      	push	{r7, lr}
  40128a:	b084      	sub	sp, #16
  40128c:	af00      	add	r7, sp, #0
  40128e:	60f8      	str	r0, [r7, #12]
  401290:	60b9      	str	r1, [r7, #8]
  401292:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401294:	68b9      	ldr	r1, [r7, #8]
  401296:	68f8      	ldr	r0, [r7, #12]
  401298:	4b19      	ldr	r3, [pc, #100]	; (401300 <pio_set_input+0x78>)
  40129a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  40129c:	687b      	ldr	r3, [r7, #4]
  40129e:	f003 0301 	and.w	r3, r3, #1
  4012a2:	461a      	mov	r2, r3
  4012a4:	68b9      	ldr	r1, [r7, #8]
  4012a6:	68f8      	ldr	r0, [r7, #12]
  4012a8:	4b16      	ldr	r3, [pc, #88]	; (401304 <pio_set_input+0x7c>)
  4012aa:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4012ac:	687b      	ldr	r3, [r7, #4]
  4012ae:	f003 030a 	and.w	r3, r3, #10
  4012b2:	2b00      	cmp	r3, #0
  4012b4:	d003      	beq.n	4012be <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4012b6:	68fb      	ldr	r3, [r7, #12]
  4012b8:	68ba      	ldr	r2, [r7, #8]
  4012ba:	621a      	str	r2, [r3, #32]
  4012bc:	e002      	b.n	4012c4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4012be:	68fb      	ldr	r3, [r7, #12]
  4012c0:	68ba      	ldr	r2, [r7, #8]
  4012c2:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4012c4:	687b      	ldr	r3, [r7, #4]
  4012c6:	f003 0302 	and.w	r3, r3, #2
  4012ca:	2b00      	cmp	r3, #0
  4012cc:	d004      	beq.n	4012d8 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4012ce:	68fb      	ldr	r3, [r7, #12]
  4012d0:	68ba      	ldr	r2, [r7, #8]
  4012d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4012d6:	e008      	b.n	4012ea <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4012d8:	687b      	ldr	r3, [r7, #4]
  4012da:	f003 0308 	and.w	r3, r3, #8
  4012de:	2b00      	cmp	r3, #0
  4012e0:	d003      	beq.n	4012ea <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4012e2:	68fb      	ldr	r3, [r7, #12]
  4012e4:	68ba      	ldr	r2, [r7, #8]
  4012e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4012ea:	68fb      	ldr	r3, [r7, #12]
  4012ec:	68ba      	ldr	r2, [r7, #8]
  4012ee:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4012f0:	68fb      	ldr	r3, [r7, #12]
  4012f2:	68ba      	ldr	r2, [r7, #8]
  4012f4:	601a      	str	r2, [r3, #0]
}
  4012f6:	bf00      	nop
  4012f8:	3710      	adds	r7, #16
  4012fa:	46bd      	mov	sp, r7
  4012fc:	bd80      	pop	{r7, pc}
  4012fe:	bf00      	nop
  401300:	0040136d 	.word	0x0040136d
  401304:	0040114d 	.word	0x0040114d

00401308 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401308:	b580      	push	{r7, lr}
  40130a:	b084      	sub	sp, #16
  40130c:	af00      	add	r7, sp, #0
  40130e:	60f8      	str	r0, [r7, #12]
  401310:	60b9      	str	r1, [r7, #8]
  401312:	607a      	str	r2, [r7, #4]
  401314:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401316:	68b9      	ldr	r1, [r7, #8]
  401318:	68f8      	ldr	r0, [r7, #12]
  40131a:	4b12      	ldr	r3, [pc, #72]	; (401364 <pio_set_output+0x5c>)
  40131c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40131e:	69ba      	ldr	r2, [r7, #24]
  401320:	68b9      	ldr	r1, [r7, #8]
  401322:	68f8      	ldr	r0, [r7, #12]
  401324:	4b10      	ldr	r3, [pc, #64]	; (401368 <pio_set_output+0x60>)
  401326:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401328:	683b      	ldr	r3, [r7, #0]
  40132a:	2b00      	cmp	r3, #0
  40132c:	d003      	beq.n	401336 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40132e:	68fb      	ldr	r3, [r7, #12]
  401330:	68ba      	ldr	r2, [r7, #8]
  401332:	651a      	str	r2, [r3, #80]	; 0x50
  401334:	e002      	b.n	40133c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401336:	68fb      	ldr	r3, [r7, #12]
  401338:	68ba      	ldr	r2, [r7, #8]
  40133a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40133c:	687b      	ldr	r3, [r7, #4]
  40133e:	2b00      	cmp	r3, #0
  401340:	d003      	beq.n	40134a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401342:	68fb      	ldr	r3, [r7, #12]
  401344:	68ba      	ldr	r2, [r7, #8]
  401346:	631a      	str	r2, [r3, #48]	; 0x30
  401348:	e002      	b.n	401350 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40134a:	68fb      	ldr	r3, [r7, #12]
  40134c:	68ba      	ldr	r2, [r7, #8]
  40134e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401350:	68fb      	ldr	r3, [r7, #12]
  401352:	68ba      	ldr	r2, [r7, #8]
  401354:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401356:	68fb      	ldr	r3, [r7, #12]
  401358:	68ba      	ldr	r2, [r7, #8]
  40135a:	601a      	str	r2, [r3, #0]
}
  40135c:	bf00      	nop
  40135e:	3710      	adds	r7, #16
  401360:	46bd      	mov	sp, r7
  401362:	bd80      	pop	{r7, pc}
  401364:	0040136d 	.word	0x0040136d
  401368:	0040114d 	.word	0x0040114d

0040136c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40136c:	b480      	push	{r7}
  40136e:	b083      	sub	sp, #12
  401370:	af00      	add	r7, sp, #0
  401372:	6078      	str	r0, [r7, #4]
  401374:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401376:	687b      	ldr	r3, [r7, #4]
  401378:	683a      	ldr	r2, [r7, #0]
  40137a:	645a      	str	r2, [r3, #68]	; 0x44
}
  40137c:	bf00      	nop
  40137e:	370c      	adds	r7, #12
  401380:	46bd      	mov	sp, r7
  401382:	bc80      	pop	{r7}
  401384:	4770      	bx	lr
  401386:	bf00      	nop

00401388 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401388:	b480      	push	{r7}
  40138a:	b083      	sub	sp, #12
  40138c:	af00      	add	r7, sp, #0
  40138e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401390:	687b      	ldr	r3, [r7, #4]
  401392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401394:	4618      	mov	r0, r3
  401396:	370c      	adds	r7, #12
  401398:	46bd      	mov	sp, r7
  40139a:	bc80      	pop	{r7}
  40139c:	4770      	bx	lr
  40139e:	bf00      	nop

004013a0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4013a0:	b480      	push	{r7}
  4013a2:	b083      	sub	sp, #12
  4013a4:	af00      	add	r7, sp, #0
  4013a6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4013a8:	687b      	ldr	r3, [r7, #4]
  4013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4013ac:	4618      	mov	r0, r3
  4013ae:	370c      	adds	r7, #12
  4013b0:	46bd      	mov	sp, r7
  4013b2:	bc80      	pop	{r7}
  4013b4:	4770      	bx	lr
  4013b6:	bf00      	nop

004013b8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4013b8:	b590      	push	{r4, r7, lr}
  4013ba:	b087      	sub	sp, #28
  4013bc:	af02      	add	r7, sp, #8
  4013be:	6078      	str	r0, [r7, #4]
  4013c0:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4013c2:	6878      	ldr	r0, [r7, #4]
  4013c4:	4b63      	ldr	r3, [pc, #396]	; (401554 <pio_configure_pin+0x19c>)
  4013c6:	4798      	blx	r3
  4013c8:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4013ca:	683b      	ldr	r3, [r7, #0]
  4013cc:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4013d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4013d4:	d067      	beq.n	4014a6 <pio_configure_pin+0xee>
  4013d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4013da:	d809      	bhi.n	4013f0 <pio_configure_pin+0x38>
  4013dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4013e0:	d02b      	beq.n	40143a <pio_configure_pin+0x82>
  4013e2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4013e6:	d043      	beq.n	401470 <pio_configure_pin+0xb8>
  4013e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4013ec:	d00a      	beq.n	401404 <pio_configure_pin+0x4c>
  4013ee:	e0a9      	b.n	401544 <pio_configure_pin+0x18c>
  4013f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4013f4:	d07e      	beq.n	4014f4 <pio_configure_pin+0x13c>
  4013f6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4013fa:	d07b      	beq.n	4014f4 <pio_configure_pin+0x13c>
  4013fc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401400:	d06c      	beq.n	4014dc <pio_configure_pin+0x124>
  401402:	e09f      	b.n	401544 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401404:	687b      	ldr	r3, [r7, #4]
  401406:	f003 031f 	and.w	r3, r3, #31
  40140a:	2201      	movs	r2, #1
  40140c:	fa02 f303 	lsl.w	r3, r2, r3
  401410:	461a      	mov	r2, r3
  401412:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401416:	68f8      	ldr	r0, [r7, #12]
  401418:	4b4f      	ldr	r3, [pc, #316]	; (401558 <pio_configure_pin+0x1a0>)
  40141a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40141c:	687b      	ldr	r3, [r7, #4]
  40141e:	f003 031f 	and.w	r3, r3, #31
  401422:	2201      	movs	r2, #1
  401424:	fa02 f303 	lsl.w	r3, r2, r3
  401428:	4619      	mov	r1, r3
  40142a:	683b      	ldr	r3, [r7, #0]
  40142c:	f003 0301 	and.w	r3, r3, #1
  401430:	461a      	mov	r2, r3
  401432:	68f8      	ldr	r0, [r7, #12]
  401434:	4b49      	ldr	r3, [pc, #292]	; (40155c <pio_configure_pin+0x1a4>)
  401436:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401438:	e086      	b.n	401548 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40143a:	687b      	ldr	r3, [r7, #4]
  40143c:	f003 031f 	and.w	r3, r3, #31
  401440:	2201      	movs	r2, #1
  401442:	fa02 f303 	lsl.w	r3, r2, r3
  401446:	461a      	mov	r2, r3
  401448:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40144c:	68f8      	ldr	r0, [r7, #12]
  40144e:	4b42      	ldr	r3, [pc, #264]	; (401558 <pio_configure_pin+0x1a0>)
  401450:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401452:	687b      	ldr	r3, [r7, #4]
  401454:	f003 031f 	and.w	r3, r3, #31
  401458:	2201      	movs	r2, #1
  40145a:	fa02 f303 	lsl.w	r3, r2, r3
  40145e:	4619      	mov	r1, r3
  401460:	683b      	ldr	r3, [r7, #0]
  401462:	f003 0301 	and.w	r3, r3, #1
  401466:	461a      	mov	r2, r3
  401468:	68f8      	ldr	r0, [r7, #12]
  40146a:	4b3c      	ldr	r3, [pc, #240]	; (40155c <pio_configure_pin+0x1a4>)
  40146c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40146e:	e06b      	b.n	401548 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401470:	687b      	ldr	r3, [r7, #4]
  401472:	f003 031f 	and.w	r3, r3, #31
  401476:	2201      	movs	r2, #1
  401478:	fa02 f303 	lsl.w	r3, r2, r3
  40147c:	461a      	mov	r2, r3
  40147e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401482:	68f8      	ldr	r0, [r7, #12]
  401484:	4b34      	ldr	r3, [pc, #208]	; (401558 <pio_configure_pin+0x1a0>)
  401486:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401488:	687b      	ldr	r3, [r7, #4]
  40148a:	f003 031f 	and.w	r3, r3, #31
  40148e:	2201      	movs	r2, #1
  401490:	fa02 f303 	lsl.w	r3, r2, r3
  401494:	4619      	mov	r1, r3
  401496:	683b      	ldr	r3, [r7, #0]
  401498:	f003 0301 	and.w	r3, r3, #1
  40149c:	461a      	mov	r2, r3
  40149e:	68f8      	ldr	r0, [r7, #12]
  4014a0:	4b2e      	ldr	r3, [pc, #184]	; (40155c <pio_configure_pin+0x1a4>)
  4014a2:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4014a4:	e050      	b.n	401548 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4014a6:	687b      	ldr	r3, [r7, #4]
  4014a8:	f003 031f 	and.w	r3, r3, #31
  4014ac:	2201      	movs	r2, #1
  4014ae:	fa02 f303 	lsl.w	r3, r2, r3
  4014b2:	461a      	mov	r2, r3
  4014b4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4014b8:	68f8      	ldr	r0, [r7, #12]
  4014ba:	4b27      	ldr	r3, [pc, #156]	; (401558 <pio_configure_pin+0x1a0>)
  4014bc:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4014be:	687b      	ldr	r3, [r7, #4]
  4014c0:	f003 031f 	and.w	r3, r3, #31
  4014c4:	2201      	movs	r2, #1
  4014c6:	fa02 f303 	lsl.w	r3, r2, r3
  4014ca:	4619      	mov	r1, r3
  4014cc:	683b      	ldr	r3, [r7, #0]
  4014ce:	f003 0301 	and.w	r3, r3, #1
  4014d2:	461a      	mov	r2, r3
  4014d4:	68f8      	ldr	r0, [r7, #12]
  4014d6:	4b21      	ldr	r3, [pc, #132]	; (40155c <pio_configure_pin+0x1a4>)
  4014d8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4014da:	e035      	b.n	401548 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4014dc:	687b      	ldr	r3, [r7, #4]
  4014de:	f003 031f 	and.w	r3, r3, #31
  4014e2:	2201      	movs	r2, #1
  4014e4:	fa02 f303 	lsl.w	r3, r2, r3
  4014e8:	683a      	ldr	r2, [r7, #0]
  4014ea:	4619      	mov	r1, r3
  4014ec:	68f8      	ldr	r0, [r7, #12]
  4014ee:	4b1c      	ldr	r3, [pc, #112]	; (401560 <pio_configure_pin+0x1a8>)
  4014f0:	4798      	blx	r3
		break;
  4014f2:	e029      	b.n	401548 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4014f4:	687b      	ldr	r3, [r7, #4]
  4014f6:	f003 031f 	and.w	r3, r3, #31
  4014fa:	2201      	movs	r2, #1
  4014fc:	fa02 f303 	lsl.w	r3, r2, r3
  401500:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401502:	683b      	ldr	r3, [r7, #0]
  401504:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401508:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40150c:	bf0c      	ite	eq
  40150e:	2301      	moveq	r3, #1
  401510:	2300      	movne	r3, #0
  401512:	b2db      	uxtb	r3, r3
  401514:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401516:	683b      	ldr	r3, [r7, #0]
  401518:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40151c:	2b00      	cmp	r3, #0
  40151e:	bf14      	ite	ne
  401520:	2301      	movne	r3, #1
  401522:	2300      	moveq	r3, #0
  401524:	b2db      	uxtb	r3, r3
  401526:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401528:	683b      	ldr	r3, [r7, #0]
  40152a:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40152e:	2b00      	cmp	r3, #0
  401530:	bf14      	ite	ne
  401532:	2301      	movne	r3, #1
  401534:	2300      	moveq	r3, #0
  401536:	b2db      	uxtb	r3, r3
  401538:	9300      	str	r3, [sp, #0]
  40153a:	4603      	mov	r3, r0
  40153c:	68f8      	ldr	r0, [r7, #12]
  40153e:	4c09      	ldr	r4, [pc, #36]	; (401564 <pio_configure_pin+0x1ac>)
  401540:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401542:	e001      	b.n	401548 <pio_configure_pin+0x190>

	default:
		return 0;
  401544:	2300      	movs	r3, #0
  401546:	e000      	b.n	40154a <pio_configure_pin+0x192>
	}

	return 1;
  401548:	2301      	movs	r3, #1
}
  40154a:	4618      	mov	r0, r3
  40154c:	3714      	adds	r7, #20
  40154e:	46bd      	mov	sp, r7
  401550:	bd90      	pop	{r4, r7, pc}
  401552:	bf00      	nop
  401554:	00401695 	.word	0x00401695
  401558:	00401179 	.word	0x00401179
  40155c:	0040114d 	.word	0x0040114d
  401560:	00401289 	.word	0x00401289
  401564:	00401309 	.word	0x00401309

00401568 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401568:	b590      	push	{r4, r7, lr}
  40156a:	b087      	sub	sp, #28
  40156c:	af02      	add	r7, sp, #8
  40156e:	60f8      	str	r0, [r7, #12]
  401570:	60b9      	str	r1, [r7, #8]
  401572:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401574:	687b      	ldr	r3, [r7, #4]
  401576:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40157a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40157e:	d043      	beq.n	401608 <pio_configure_pin_group+0xa0>
  401580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401584:	d809      	bhi.n	40159a <pio_configure_pin_group+0x32>
  401586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40158a:	d01f      	beq.n	4015cc <pio_configure_pin_group+0x64>
  40158c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401590:	d02b      	beq.n	4015ea <pio_configure_pin_group+0x82>
  401592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401596:	d00a      	beq.n	4015ae <pio_configure_pin_group+0x46>
  401598:	e06d      	b.n	401676 <pio_configure_pin_group+0x10e>
  40159a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40159e:	d048      	beq.n	401632 <pio_configure_pin_group+0xca>
  4015a0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4015a4:	d045      	beq.n	401632 <pio_configure_pin_group+0xca>
  4015a6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4015aa:	d03c      	beq.n	401626 <pio_configure_pin_group+0xbe>
  4015ac:	e063      	b.n	401676 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4015ae:	68ba      	ldr	r2, [r7, #8]
  4015b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4015b4:	68f8      	ldr	r0, [r7, #12]
  4015b6:	4b33      	ldr	r3, [pc, #204]	; (401684 <pio_configure_pin_group+0x11c>)
  4015b8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4015ba:	687b      	ldr	r3, [r7, #4]
  4015bc:	f003 0301 	and.w	r3, r3, #1
  4015c0:	461a      	mov	r2, r3
  4015c2:	68b9      	ldr	r1, [r7, #8]
  4015c4:	68f8      	ldr	r0, [r7, #12]
  4015c6:	4b30      	ldr	r3, [pc, #192]	; (401688 <pio_configure_pin_group+0x120>)
  4015c8:	4798      	blx	r3
		break;
  4015ca:	e056      	b.n	40167a <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4015cc:	68ba      	ldr	r2, [r7, #8]
  4015ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4015d2:	68f8      	ldr	r0, [r7, #12]
  4015d4:	4b2b      	ldr	r3, [pc, #172]	; (401684 <pio_configure_pin_group+0x11c>)
  4015d6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4015d8:	687b      	ldr	r3, [r7, #4]
  4015da:	f003 0301 	and.w	r3, r3, #1
  4015de:	461a      	mov	r2, r3
  4015e0:	68b9      	ldr	r1, [r7, #8]
  4015e2:	68f8      	ldr	r0, [r7, #12]
  4015e4:	4b28      	ldr	r3, [pc, #160]	; (401688 <pio_configure_pin_group+0x120>)
  4015e6:	4798      	blx	r3
		break;
  4015e8:	e047      	b.n	40167a <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4015ea:	68ba      	ldr	r2, [r7, #8]
  4015ec:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4015f0:	68f8      	ldr	r0, [r7, #12]
  4015f2:	4b24      	ldr	r3, [pc, #144]	; (401684 <pio_configure_pin_group+0x11c>)
  4015f4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	f003 0301 	and.w	r3, r3, #1
  4015fc:	461a      	mov	r2, r3
  4015fe:	68b9      	ldr	r1, [r7, #8]
  401600:	68f8      	ldr	r0, [r7, #12]
  401602:	4b21      	ldr	r3, [pc, #132]	; (401688 <pio_configure_pin_group+0x120>)
  401604:	4798      	blx	r3
		break;
  401606:	e038      	b.n	40167a <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401608:	68ba      	ldr	r2, [r7, #8]
  40160a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40160e:	68f8      	ldr	r0, [r7, #12]
  401610:	4b1c      	ldr	r3, [pc, #112]	; (401684 <pio_configure_pin_group+0x11c>)
  401612:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401614:	687b      	ldr	r3, [r7, #4]
  401616:	f003 0301 	and.w	r3, r3, #1
  40161a:	461a      	mov	r2, r3
  40161c:	68b9      	ldr	r1, [r7, #8]
  40161e:	68f8      	ldr	r0, [r7, #12]
  401620:	4b19      	ldr	r3, [pc, #100]	; (401688 <pio_configure_pin_group+0x120>)
  401622:	4798      	blx	r3
		break;
  401624:	e029      	b.n	40167a <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401626:	687a      	ldr	r2, [r7, #4]
  401628:	68b9      	ldr	r1, [r7, #8]
  40162a:	68f8      	ldr	r0, [r7, #12]
  40162c:	4b17      	ldr	r3, [pc, #92]	; (40168c <pio_configure_pin_group+0x124>)
  40162e:	4798      	blx	r3
		break;
  401630:	e023      	b.n	40167a <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401632:	687b      	ldr	r3, [r7, #4]
  401634:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401638:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40163c:	bf0c      	ite	eq
  40163e:	2301      	moveq	r3, #1
  401640:	2300      	movne	r3, #0
  401642:	b2db      	uxtb	r3, r3
  401644:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401646:	687b      	ldr	r3, [r7, #4]
  401648:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40164c:	2b00      	cmp	r3, #0
  40164e:	bf14      	ite	ne
  401650:	2301      	movne	r3, #1
  401652:	2300      	moveq	r3, #0
  401654:	b2db      	uxtb	r3, r3
  401656:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401658:	687b      	ldr	r3, [r7, #4]
  40165a:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40165e:	2b00      	cmp	r3, #0
  401660:	bf14      	ite	ne
  401662:	2301      	movne	r3, #1
  401664:	2300      	moveq	r3, #0
  401666:	b2db      	uxtb	r3, r3
  401668:	9300      	str	r3, [sp, #0]
  40166a:	460b      	mov	r3, r1
  40166c:	68b9      	ldr	r1, [r7, #8]
  40166e:	68f8      	ldr	r0, [r7, #12]
  401670:	4c07      	ldr	r4, [pc, #28]	; (401690 <pio_configure_pin_group+0x128>)
  401672:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401674:	e001      	b.n	40167a <pio_configure_pin_group+0x112>

	default:
		return 0;
  401676:	2300      	movs	r3, #0
  401678:	e000      	b.n	40167c <pio_configure_pin_group+0x114>
	}

	return 1;
  40167a:	2301      	movs	r3, #1
}
  40167c:	4618      	mov	r0, r3
  40167e:	3714      	adds	r7, #20
  401680:	46bd      	mov	sp, r7
  401682:	bd90      	pop	{r4, r7, pc}
  401684:	00401179 	.word	0x00401179
  401688:	0040114d 	.word	0x0040114d
  40168c:	00401289 	.word	0x00401289
  401690:	00401309 	.word	0x00401309

00401694 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401694:	b480      	push	{r7}
  401696:	b085      	sub	sp, #20
  401698:	af00      	add	r7, sp, #0
  40169a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40169c:	687b      	ldr	r3, [r7, #4]
  40169e:	095b      	lsrs	r3, r3, #5
  4016a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4016a4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4016a8:	025b      	lsls	r3, r3, #9
  4016aa:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4016ac:	68fb      	ldr	r3, [r7, #12]
}
  4016ae:	4618      	mov	r0, r3
  4016b0:	3714      	adds	r7, #20
  4016b2:	46bd      	mov	sp, r7
  4016b4:	bc80      	pop	{r7}
  4016b6:	4770      	bx	lr

004016b8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4016b8:	b480      	push	{r7}
  4016ba:	b085      	sub	sp, #20
  4016bc:	af00      	add	r7, sp, #0
  4016be:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4016c0:	491c      	ldr	r1, [pc, #112]	; (401734 <pmc_switch_mck_to_pllack+0x7c>)
  4016c2:	4b1c      	ldr	r3, [pc, #112]	; (401734 <pmc_switch_mck_to_pllack+0x7c>)
  4016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4016ca:	687b      	ldr	r3, [r7, #4]
  4016cc:	4313      	orrs	r3, r2
  4016ce:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4016d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4016d4:	60fb      	str	r3, [r7, #12]
  4016d6:	e007      	b.n	4016e8 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4016d8:	68fb      	ldr	r3, [r7, #12]
  4016da:	2b00      	cmp	r3, #0
  4016dc:	d101      	bne.n	4016e2 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4016de:	2301      	movs	r3, #1
  4016e0:	e023      	b.n	40172a <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4016e2:	68fb      	ldr	r3, [r7, #12]
  4016e4:	3b01      	subs	r3, #1
  4016e6:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4016e8:	4b12      	ldr	r3, [pc, #72]	; (401734 <pmc_switch_mck_to_pllack+0x7c>)
  4016ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016ec:	f003 0308 	and.w	r3, r3, #8
  4016f0:	2b00      	cmp	r3, #0
  4016f2:	d0f1      	beq.n	4016d8 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4016f4:	4a0f      	ldr	r2, [pc, #60]	; (401734 <pmc_switch_mck_to_pllack+0x7c>)
  4016f6:	4b0f      	ldr	r3, [pc, #60]	; (401734 <pmc_switch_mck_to_pllack+0x7c>)
  4016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016fa:	f023 0303 	bic.w	r3, r3, #3
  4016fe:	f043 0302 	orr.w	r3, r3, #2
  401702:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401704:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401708:	60fb      	str	r3, [r7, #12]
  40170a:	e007      	b.n	40171c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40170c:	68fb      	ldr	r3, [r7, #12]
  40170e:	2b00      	cmp	r3, #0
  401710:	d101      	bne.n	401716 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401712:	2301      	movs	r3, #1
  401714:	e009      	b.n	40172a <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401716:	68fb      	ldr	r3, [r7, #12]
  401718:	3b01      	subs	r3, #1
  40171a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40171c:	4b05      	ldr	r3, [pc, #20]	; (401734 <pmc_switch_mck_to_pllack+0x7c>)
  40171e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401720:	f003 0308 	and.w	r3, r3, #8
  401724:	2b00      	cmp	r3, #0
  401726:	d0f1      	beq.n	40170c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401728:	2300      	movs	r3, #0
}
  40172a:	4618      	mov	r0, r3
  40172c:	3714      	adds	r7, #20
  40172e:	46bd      	mov	sp, r7
  401730:	bc80      	pop	{r7}
  401732:	4770      	bx	lr
  401734:	400e0400 	.word	0x400e0400

00401738 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401738:	b480      	push	{r7}
  40173a:	b083      	sub	sp, #12
  40173c:	af00      	add	r7, sp, #0
  40173e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401740:	687b      	ldr	r3, [r7, #4]
  401742:	2b01      	cmp	r3, #1
  401744:	d107      	bne.n	401756 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401746:	4a08      	ldr	r2, [pc, #32]	; (401768 <pmc_switch_sclk_to_32kxtal+0x30>)
  401748:	4b07      	ldr	r3, [pc, #28]	; (401768 <pmc_switch_sclk_to_32kxtal+0x30>)
  40174a:	689b      	ldr	r3, [r3, #8]
  40174c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401754:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401756:	4b04      	ldr	r3, [pc, #16]	; (401768 <pmc_switch_sclk_to_32kxtal+0x30>)
  401758:	4a04      	ldr	r2, [pc, #16]	; (40176c <pmc_switch_sclk_to_32kxtal+0x34>)
  40175a:	601a      	str	r2, [r3, #0]
}
  40175c:	bf00      	nop
  40175e:	370c      	adds	r7, #12
  401760:	46bd      	mov	sp, r7
  401762:	bc80      	pop	{r7}
  401764:	4770      	bx	lr
  401766:	bf00      	nop
  401768:	400e1410 	.word	0x400e1410
  40176c:	a5000008 	.word	0xa5000008

00401770 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401770:	b480      	push	{r7}
  401772:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401774:	4b09      	ldr	r3, [pc, #36]	; (40179c <pmc_osc_is_ready_32kxtal+0x2c>)
  401776:	695b      	ldr	r3, [r3, #20]
  401778:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40177c:	2b00      	cmp	r3, #0
  40177e:	d007      	beq.n	401790 <pmc_osc_is_ready_32kxtal+0x20>
  401780:	4b07      	ldr	r3, [pc, #28]	; (4017a0 <pmc_osc_is_ready_32kxtal+0x30>)
  401782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401784:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401788:	2b00      	cmp	r3, #0
  40178a:	d001      	beq.n	401790 <pmc_osc_is_ready_32kxtal+0x20>
  40178c:	2301      	movs	r3, #1
  40178e:	e000      	b.n	401792 <pmc_osc_is_ready_32kxtal+0x22>
  401790:	2300      	movs	r3, #0
}
  401792:	4618      	mov	r0, r3
  401794:	46bd      	mov	sp, r7
  401796:	bc80      	pop	{r7}
  401798:	4770      	bx	lr
  40179a:	bf00      	nop
  40179c:	400e1410 	.word	0x400e1410
  4017a0:	400e0400 	.word	0x400e0400

004017a4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4017a4:	b480      	push	{r7}
  4017a6:	b083      	sub	sp, #12
  4017a8:	af00      	add	r7, sp, #0
  4017aa:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4017ac:	4a18      	ldr	r2, [pc, #96]	; (401810 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017ae:	4b18      	ldr	r3, [pc, #96]	; (401810 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017b0:	6a1b      	ldr	r3, [r3, #32]
  4017b2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4017b6:	f043 0308 	orr.w	r3, r3, #8
  4017ba:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4017bc:	bf00      	nop
  4017be:	4b14      	ldr	r3, [pc, #80]	; (401810 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4017c6:	2b00      	cmp	r3, #0
  4017c8:	d0f9      	beq.n	4017be <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4017ca:	4911      	ldr	r1, [pc, #68]	; (401810 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017cc:	4b10      	ldr	r3, [pc, #64]	; (401810 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017ce:	6a1b      	ldr	r3, [r3, #32]
  4017d0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4017d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4017d8:	687a      	ldr	r2, [r7, #4]
  4017da:	4313      	orrs	r3, r2
  4017dc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4017e0:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4017e2:	bf00      	nop
  4017e4:	4b0a      	ldr	r3, [pc, #40]	; (401810 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4017ec:	2b00      	cmp	r3, #0
  4017ee:	d0f9      	beq.n	4017e4 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4017f0:	4a07      	ldr	r2, [pc, #28]	; (401810 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017f2:	4b07      	ldr	r3, [pc, #28]	; (401810 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017f4:	6a1b      	ldr	r3, [r3, #32]
  4017f6:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4017fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4017fe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401802:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401804:	bf00      	nop
  401806:	370c      	adds	r7, #12
  401808:	46bd      	mov	sp, r7
  40180a:	bc80      	pop	{r7}
  40180c:	4770      	bx	lr
  40180e:	bf00      	nop
  401810:	400e0400 	.word	0x400e0400

00401814 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401814:	b480      	push	{r7}
  401816:	b083      	sub	sp, #12
  401818:	af00      	add	r7, sp, #0
  40181a:	6078      	str	r0, [r7, #4]
  40181c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40181e:	687b      	ldr	r3, [r7, #4]
  401820:	2b00      	cmp	r3, #0
  401822:	d008      	beq.n	401836 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401824:	4916      	ldr	r1, [pc, #88]	; (401880 <pmc_switch_mainck_to_xtal+0x6c>)
  401826:	4b16      	ldr	r3, [pc, #88]	; (401880 <pmc_switch_mainck_to_xtal+0x6c>)
  401828:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40182a:	4a16      	ldr	r2, [pc, #88]	; (401884 <pmc_switch_mainck_to_xtal+0x70>)
  40182c:	401a      	ands	r2, r3
  40182e:	4b16      	ldr	r3, [pc, #88]	; (401888 <pmc_switch_mainck_to_xtal+0x74>)
  401830:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401832:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401834:	e01e      	b.n	401874 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401836:	4912      	ldr	r1, [pc, #72]	; (401880 <pmc_switch_mainck_to_xtal+0x6c>)
  401838:	4b11      	ldr	r3, [pc, #68]	; (401880 <pmc_switch_mainck_to_xtal+0x6c>)
  40183a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40183c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401840:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401844:	683a      	ldr	r2, [r7, #0]
  401846:	0212      	lsls	r2, r2, #8
  401848:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40184a:	4313      	orrs	r3, r2
  40184c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401850:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401854:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401856:	bf00      	nop
  401858:	4b09      	ldr	r3, [pc, #36]	; (401880 <pmc_switch_mainck_to_xtal+0x6c>)
  40185a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40185c:	f003 0301 	and.w	r3, r3, #1
  401860:	2b00      	cmp	r3, #0
  401862:	d0f9      	beq.n	401858 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401864:	4a06      	ldr	r2, [pc, #24]	; (401880 <pmc_switch_mainck_to_xtal+0x6c>)
  401866:	4b06      	ldr	r3, [pc, #24]	; (401880 <pmc_switch_mainck_to_xtal+0x6c>)
  401868:	6a1b      	ldr	r3, [r3, #32]
  40186a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401872:	6213      	str	r3, [r2, #32]
	}
}
  401874:	bf00      	nop
  401876:	370c      	adds	r7, #12
  401878:	46bd      	mov	sp, r7
  40187a:	bc80      	pop	{r7}
  40187c:	4770      	bx	lr
  40187e:	bf00      	nop
  401880:	400e0400 	.word	0x400e0400
  401884:	fec8fffc 	.word	0xfec8fffc
  401888:	01370002 	.word	0x01370002

0040188c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40188c:	b480      	push	{r7}
  40188e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401890:	4b03      	ldr	r3, [pc, #12]	; (4018a0 <pmc_osc_is_ready_mainck+0x14>)
  401892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401898:	4618      	mov	r0, r3
  40189a:	46bd      	mov	sp, r7
  40189c:	bc80      	pop	{r7}
  40189e:	4770      	bx	lr
  4018a0:	400e0400 	.word	0x400e0400

004018a4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4018a4:	b480      	push	{r7}
  4018a6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4018a8:	4b03      	ldr	r3, [pc, #12]	; (4018b8 <pmc_disable_pllack+0x14>)
  4018aa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4018ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4018b0:	bf00      	nop
  4018b2:	46bd      	mov	sp, r7
  4018b4:	bc80      	pop	{r7}
  4018b6:	4770      	bx	lr
  4018b8:	400e0400 	.word	0x400e0400

004018bc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4018bc:	b480      	push	{r7}
  4018be:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4018c0:	4b03      	ldr	r3, [pc, #12]	; (4018d0 <pmc_is_locked_pllack+0x14>)
  4018c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018c4:	f003 0302 	and.w	r3, r3, #2
}
  4018c8:	4618      	mov	r0, r3
  4018ca:	46bd      	mov	sp, r7
  4018cc:	bc80      	pop	{r7}
  4018ce:	4770      	bx	lr
  4018d0:	400e0400 	.word	0x400e0400

004018d4 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4018d4:	b480      	push	{r7}
  4018d6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4018d8:	4b03      	ldr	r3, [pc, #12]	; (4018e8 <pmc_disable_pllbck+0x14>)
  4018da:	2200      	movs	r2, #0
  4018dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4018de:	bf00      	nop
  4018e0:	46bd      	mov	sp, r7
  4018e2:	bc80      	pop	{r7}
  4018e4:	4770      	bx	lr
  4018e6:	bf00      	nop
  4018e8:	400e0400 	.word	0x400e0400

004018ec <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4018ec:	b480      	push	{r7}
  4018ee:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4018f0:	4b03      	ldr	r3, [pc, #12]	; (401900 <pmc_is_locked_pllbck+0x14>)
  4018f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018f4:	f003 0304 	and.w	r3, r3, #4
}
  4018f8:	4618      	mov	r0, r3
  4018fa:	46bd      	mov	sp, r7
  4018fc:	bc80      	pop	{r7}
  4018fe:	4770      	bx	lr
  401900:	400e0400 	.word	0x400e0400

00401904 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401904:	b480      	push	{r7}
  401906:	b083      	sub	sp, #12
  401908:	af00      	add	r7, sp, #0
  40190a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40190c:	687b      	ldr	r3, [r7, #4]
  40190e:	2b22      	cmp	r3, #34	; 0x22
  401910:	d901      	bls.n	401916 <pmc_enable_periph_clk+0x12>
		return 1;
  401912:	2301      	movs	r3, #1
  401914:	e02f      	b.n	401976 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401916:	687b      	ldr	r3, [r7, #4]
  401918:	2b1f      	cmp	r3, #31
  40191a:	d813      	bhi.n	401944 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40191c:	4b18      	ldr	r3, [pc, #96]	; (401980 <pmc_enable_periph_clk+0x7c>)
  40191e:	699a      	ldr	r2, [r3, #24]
  401920:	2101      	movs	r1, #1
  401922:	687b      	ldr	r3, [r7, #4]
  401924:	fa01 f303 	lsl.w	r3, r1, r3
  401928:	401a      	ands	r2, r3
  40192a:	2101      	movs	r1, #1
  40192c:	687b      	ldr	r3, [r7, #4]
  40192e:	fa01 f303 	lsl.w	r3, r1, r3
  401932:	429a      	cmp	r2, r3
  401934:	d01e      	beq.n	401974 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401936:	4a12      	ldr	r2, [pc, #72]	; (401980 <pmc_enable_periph_clk+0x7c>)
  401938:	2101      	movs	r1, #1
  40193a:	687b      	ldr	r3, [r7, #4]
  40193c:	fa01 f303 	lsl.w	r3, r1, r3
  401940:	6113      	str	r3, [r2, #16]
  401942:	e017      	b.n	401974 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401944:	687b      	ldr	r3, [r7, #4]
  401946:	3b20      	subs	r3, #32
  401948:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40194a:	4b0d      	ldr	r3, [pc, #52]	; (401980 <pmc_enable_periph_clk+0x7c>)
  40194c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401950:	2101      	movs	r1, #1
  401952:	687b      	ldr	r3, [r7, #4]
  401954:	fa01 f303 	lsl.w	r3, r1, r3
  401958:	401a      	ands	r2, r3
  40195a:	2101      	movs	r1, #1
  40195c:	687b      	ldr	r3, [r7, #4]
  40195e:	fa01 f303 	lsl.w	r3, r1, r3
  401962:	429a      	cmp	r2, r3
  401964:	d006      	beq.n	401974 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401966:	4a06      	ldr	r2, [pc, #24]	; (401980 <pmc_enable_periph_clk+0x7c>)
  401968:	2101      	movs	r1, #1
  40196a:	687b      	ldr	r3, [r7, #4]
  40196c:	fa01 f303 	lsl.w	r3, r1, r3
  401970:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401974:	2300      	movs	r3, #0
}
  401976:	4618      	mov	r0, r3
  401978:	370c      	adds	r7, #12
  40197a:	46bd      	mov	sp, r7
  40197c:	bc80      	pop	{r7}
  40197e:	4770      	bx	lr
  401980:	400e0400 	.word	0x400e0400

00401984 <board_init>:
#include "gpio.h"
#include "ioport.h"


void board_init(void)
{
  401984:	b580      	push	{r7, lr}
  401986:	af00      	add	r7, sp, #0
		#define RS485_USART_IRQn	USART0_IRQn
	 #endif
	 #if defined(CONF_UART0_PINS)
		gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
	 #else
		gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  401988:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40198c:	f04f 71b0 	mov.w	r1, #23068672	; 0x1600000
  401990:	4802      	ldr	r0, [pc, #8]	; (40199c <board_init+0x18>)
  401992:	4b03      	ldr	r3, [pc, #12]	; (4019a0 <board_init+0x1c>)
  401994:	4798      	blx	r3
	 #endif

	 //Configure other services. 
}
  401996:	bf00      	nop
  401998:	bd80      	pop	{r7, pc}
  40199a:	bf00      	nop
  40199c:	400e0e00 	.word	0x400e0e00
  4019a0:	00401569 	.word	0x00401569

004019a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4019a4:	b580      	push	{r7, lr}
  4019a6:	b084      	sub	sp, #16
  4019a8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4019aa:	4b27      	ldr	r3, [pc, #156]	; (401a48 <Reset_Handler+0xa4>)
  4019ac:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4019ae:	4b27      	ldr	r3, [pc, #156]	; (401a4c <Reset_Handler+0xa8>)
  4019b0:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4019b2:	68fa      	ldr	r2, [r7, #12]
  4019b4:	68bb      	ldr	r3, [r7, #8]
  4019b6:	429a      	cmp	r2, r3
  4019b8:	d90d      	bls.n	4019d6 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4019ba:	e007      	b.n	4019cc <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4019bc:	68bb      	ldr	r3, [r7, #8]
  4019be:	1d1a      	adds	r2, r3, #4
  4019c0:	60ba      	str	r2, [r7, #8]
  4019c2:	68fa      	ldr	r2, [r7, #12]
  4019c4:	1d11      	adds	r1, r2, #4
  4019c6:	60f9      	str	r1, [r7, #12]
  4019c8:	6812      	ldr	r2, [r2, #0]
  4019ca:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4019cc:	68bb      	ldr	r3, [r7, #8]
  4019ce:	4a20      	ldr	r2, [pc, #128]	; (401a50 <Reset_Handler+0xac>)
  4019d0:	4293      	cmp	r3, r2
  4019d2:	d3f3      	bcc.n	4019bc <Reset_Handler+0x18>
  4019d4:	e020      	b.n	401a18 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4019d6:	68fa      	ldr	r2, [r7, #12]
  4019d8:	68bb      	ldr	r3, [r7, #8]
  4019da:	429a      	cmp	r2, r3
  4019dc:	d21c      	bcs.n	401a18 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4019de:	4a1c      	ldr	r2, [pc, #112]	; (401a50 <Reset_Handler+0xac>)
  4019e0:	4b1a      	ldr	r3, [pc, #104]	; (401a4c <Reset_Handler+0xa8>)
  4019e2:	1ad3      	subs	r3, r2, r3
  4019e4:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4019e6:	68fa      	ldr	r2, [r7, #12]
  4019e8:	687b      	ldr	r3, [r7, #4]
  4019ea:	4413      	add	r3, r2
  4019ec:	3b04      	subs	r3, #4
  4019ee:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4019f0:	68ba      	ldr	r2, [r7, #8]
  4019f2:	687b      	ldr	r3, [r7, #4]
  4019f4:	4413      	add	r3, r2
  4019f6:	3b04      	subs	r3, #4
  4019f8:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4019fa:	e00a      	b.n	401a12 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4019fc:	68bb      	ldr	r3, [r7, #8]
  4019fe:	1f1a      	subs	r2, r3, #4
  401a00:	60ba      	str	r2, [r7, #8]
  401a02:	68fa      	ldr	r2, [r7, #12]
  401a04:	1f11      	subs	r1, r2, #4
  401a06:	60f9      	str	r1, [r7, #12]
  401a08:	6812      	ldr	r2, [r2, #0]
  401a0a:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401a0c:	687b      	ldr	r3, [r7, #4]
  401a0e:	3b04      	subs	r3, #4
  401a10:	607b      	str	r3, [r7, #4]
  401a12:	687b      	ldr	r3, [r7, #4]
  401a14:	2b00      	cmp	r3, #0
  401a16:	d1f1      	bne.n	4019fc <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401a18:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401a1a:	4b0e      	ldr	r3, [pc, #56]	; (401a54 <Reset_Handler+0xb0>)
  401a1c:	60bb      	str	r3, [r7, #8]
  401a1e:	e004      	b.n	401a2a <Reset_Handler+0x86>
		*pDest++ = 0;
  401a20:	68bb      	ldr	r3, [r7, #8]
  401a22:	1d1a      	adds	r2, r3, #4
  401a24:	60ba      	str	r2, [r7, #8]
  401a26:	2200      	movs	r2, #0
  401a28:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401a2a:	68bb      	ldr	r3, [r7, #8]
  401a2c:	4a0a      	ldr	r2, [pc, #40]	; (401a58 <Reset_Handler+0xb4>)
  401a2e:	4293      	cmp	r3, r2
  401a30:	d3f6      	bcc.n	401a20 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401a32:	4b0a      	ldr	r3, [pc, #40]	; (401a5c <Reset_Handler+0xb8>)
  401a34:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  401a36:	4a0a      	ldr	r2, [pc, #40]	; (401a60 <Reset_Handler+0xbc>)
  401a38:	68fb      	ldr	r3, [r7, #12]
  401a3a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401a3c:	4b09      	ldr	r3, [pc, #36]	; (401a64 <Reset_Handler+0xc0>)
  401a3e:	4798      	blx	r3

	/* Branch to main function */
	main();
  401a40:	4b09      	ldr	r3, [pc, #36]	; (401a68 <Reset_Handler+0xc4>)
  401a42:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401a44:	e7fe      	b.n	401a44 <Reset_Handler+0xa0>
  401a46:	bf00      	nop
  401a48:	00402438 	.word	0x00402438
  401a4c:	20000000 	.word	0x20000000
  401a50:	20000438 	.word	0x20000438
  401a54:	20000438 	.word	0x20000438
  401a58:	20000524 	.word	0x20000524
  401a5c:	00400000 	.word	0x00400000
  401a60:	e000ed00 	.word	0xe000ed00
  401a64:	004022b1 	.word	0x004022b1
  401a68:	00401d75 	.word	0x00401d75

00401a6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401a6c:	b480      	push	{r7}
  401a6e:	af00      	add	r7, sp, #0
	while (1) {
	}
  401a70:	e7fe      	b.n	401a70 <Dummy_Handler+0x4>
  401a72:	bf00      	nop

00401a74 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  401a74:	b480      	push	{r7}
  401a76:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401a78:	4b5d      	ldr	r3, [pc, #372]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a7c:	f003 0303 	and.w	r3, r3, #3
  401a80:	2b03      	cmp	r3, #3
  401a82:	f200 8096 	bhi.w	401bb2 <SystemCoreClockUpdate+0x13e>
  401a86:	a201      	add	r2, pc, #4	; (adr r2, 401a8c <SystemCoreClockUpdate+0x18>)
  401a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a8c:	00401a9d 	.word	0x00401a9d
  401a90:	00401abd 	.word	0x00401abd
  401a94:	00401b07 	.word	0x00401b07
  401a98:	00401b07 	.word	0x00401b07
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401a9c:	4b55      	ldr	r3, [pc, #340]	; (401bf4 <SystemCoreClockUpdate+0x180>)
  401a9e:	695b      	ldr	r3, [r3, #20]
  401aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401aa4:	2b00      	cmp	r3, #0
  401aa6:	d004      	beq.n	401ab2 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401aa8:	4b53      	ldr	r3, [pc, #332]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401aaa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401aae:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401ab0:	e080      	b.n	401bb4 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401ab2:	4b51      	ldr	r3, [pc, #324]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401ab4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401ab8:	601a      	str	r2, [r3, #0]
			}
		break;
  401aba:	e07b      	b.n	401bb4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401abc:	4b4c      	ldr	r3, [pc, #304]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401abe:	6a1b      	ldr	r3, [r3, #32]
  401ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401ac4:	2b00      	cmp	r3, #0
  401ac6:	d003      	beq.n	401ad0 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401ac8:	4b4b      	ldr	r3, [pc, #300]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401aca:	4a4c      	ldr	r2, [pc, #304]	; (401bfc <SystemCoreClockUpdate+0x188>)
  401acc:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401ace:	e071      	b.n	401bb4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401ad0:	4b49      	ldr	r3, [pc, #292]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401ad2:	4a4b      	ldr	r2, [pc, #300]	; (401c00 <SystemCoreClockUpdate+0x18c>)
  401ad4:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401ad6:	4b46      	ldr	r3, [pc, #280]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401ad8:	6a1b      	ldr	r3, [r3, #32]
  401ada:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ade:	2b10      	cmp	r3, #16
  401ae0:	d008      	beq.n	401af4 <SystemCoreClockUpdate+0x80>
  401ae2:	2b20      	cmp	r3, #32
  401ae4:	d00a      	beq.n	401afc <SystemCoreClockUpdate+0x88>
  401ae6:	2b00      	cmp	r3, #0
  401ae8:	d000      	beq.n	401aec <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  401aea:	e00b      	b.n	401b04 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401aec:	4b42      	ldr	r3, [pc, #264]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401aee:	4a44      	ldr	r2, [pc, #272]	; (401c00 <SystemCoreClockUpdate+0x18c>)
  401af0:	601a      	str	r2, [r3, #0]
			break;
  401af2:	e007      	b.n	401b04 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401af4:	4b40      	ldr	r3, [pc, #256]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401af6:	4a43      	ldr	r2, [pc, #268]	; (401c04 <SystemCoreClockUpdate+0x190>)
  401af8:	601a      	str	r2, [r3, #0]
			break;
  401afa:	e003      	b.n	401b04 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401afc:	4b3e      	ldr	r3, [pc, #248]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401afe:	4a3f      	ldr	r2, [pc, #252]	; (401bfc <SystemCoreClockUpdate+0x188>)
  401b00:	601a      	str	r2, [r3, #0]
			break;
  401b02:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  401b04:	e056      	b.n	401bb4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401b06:	4b3a      	ldr	r3, [pc, #232]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401b08:	6a1b      	ldr	r3, [r3, #32]
  401b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401b0e:	2b00      	cmp	r3, #0
  401b10:	d003      	beq.n	401b1a <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401b12:	4b39      	ldr	r3, [pc, #228]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b14:	4a39      	ldr	r2, [pc, #228]	; (401bfc <SystemCoreClockUpdate+0x188>)
  401b16:	601a      	str	r2, [r3, #0]
  401b18:	e019      	b.n	401b4e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b1a:	4b37      	ldr	r3, [pc, #220]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b1c:	4a38      	ldr	r2, [pc, #224]	; (401c00 <SystemCoreClockUpdate+0x18c>)
  401b1e:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401b20:	4b33      	ldr	r3, [pc, #204]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401b22:	6a1b      	ldr	r3, [r3, #32]
  401b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b28:	2b10      	cmp	r3, #16
  401b2a:	d008      	beq.n	401b3e <SystemCoreClockUpdate+0xca>
  401b2c:	2b20      	cmp	r3, #32
  401b2e:	d00a      	beq.n	401b46 <SystemCoreClockUpdate+0xd2>
  401b30:	2b00      	cmp	r3, #0
  401b32:	d000      	beq.n	401b36 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  401b34:	e00b      	b.n	401b4e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b36:	4b30      	ldr	r3, [pc, #192]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b38:	4a31      	ldr	r2, [pc, #196]	; (401c00 <SystemCoreClockUpdate+0x18c>)
  401b3a:	601a      	str	r2, [r3, #0]
					break;
  401b3c:	e007      	b.n	401b4e <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401b3e:	4b2e      	ldr	r3, [pc, #184]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b40:	4a30      	ldr	r2, [pc, #192]	; (401c04 <SystemCoreClockUpdate+0x190>)
  401b42:	601a      	str	r2, [r3, #0]
					break;
  401b44:	e003      	b.n	401b4e <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401b46:	4b2c      	ldr	r3, [pc, #176]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b48:	4a2c      	ldr	r2, [pc, #176]	; (401bfc <SystemCoreClockUpdate+0x188>)
  401b4a:	601a      	str	r2, [r3, #0]
					break;
  401b4c:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401b4e:	4b28      	ldr	r3, [pc, #160]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b52:	f003 0303 	and.w	r3, r3, #3
  401b56:	2b02      	cmp	r3, #2
  401b58:	d115      	bne.n	401b86 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401b5a:	4b25      	ldr	r3, [pc, #148]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401b5e:	4b2a      	ldr	r3, [pc, #168]	; (401c08 <SystemCoreClockUpdate+0x194>)
  401b60:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  401b62:	0c1b      	lsrs	r3, r3, #16
  401b64:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401b66:	4a24      	ldr	r2, [pc, #144]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b68:	6812      	ldr	r2, [r2, #0]
  401b6a:	fb02 f303 	mul.w	r3, r2, r3
  401b6e:	4a22      	ldr	r2, [pc, #136]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b70:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401b72:	4b1f      	ldr	r3, [pc, #124]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  401b76:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401b78:	4a1f      	ldr	r2, [pc, #124]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b7a:	6812      	ldr	r2, [r2, #0]
  401b7c:	fbb2 f3f3 	udiv	r3, r2, r3
  401b80:	4a1d      	ldr	r2, [pc, #116]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b82:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401b84:	e016      	b.n	401bb4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401b86:	4b1a      	ldr	r3, [pc, #104]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401b8a:	4b1f      	ldr	r3, [pc, #124]	; (401c08 <SystemCoreClockUpdate+0x194>)
  401b8c:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401b8e:	0c1b      	lsrs	r3, r3, #16
  401b90:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401b92:	4a19      	ldr	r2, [pc, #100]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b94:	6812      	ldr	r2, [r2, #0]
  401b96:	fb02 f303 	mul.w	r3, r2, r3
  401b9a:	4a17      	ldr	r2, [pc, #92]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401b9c:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401b9e:	4b14      	ldr	r3, [pc, #80]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  401ba2:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401ba4:	4a14      	ldr	r2, [pc, #80]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401ba6:	6812      	ldr	r2, [r2, #0]
  401ba8:	fbb2 f3f3 	udiv	r3, r2, r3
  401bac:	4a12      	ldr	r2, [pc, #72]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401bae:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401bb0:	e000      	b.n	401bb4 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  401bb2:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401bb4:	4b0e      	ldr	r3, [pc, #56]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401bbc:	2b70      	cmp	r3, #112	; 0x70
  401bbe:	d108      	bne.n	401bd2 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401bc0:	4b0d      	ldr	r3, [pc, #52]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401bc2:	681b      	ldr	r3, [r3, #0]
  401bc4:	4a11      	ldr	r2, [pc, #68]	; (401c0c <SystemCoreClockUpdate+0x198>)
  401bc6:	fba2 2303 	umull	r2, r3, r2, r3
  401bca:	085b      	lsrs	r3, r3, #1
  401bcc:	4a0a      	ldr	r2, [pc, #40]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401bce:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401bd0:	e00a      	b.n	401be8 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401bd2:	4b07      	ldr	r3, [pc, #28]	; (401bf0 <SystemCoreClockUpdate+0x17c>)
  401bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401bda:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401bdc:	4a06      	ldr	r2, [pc, #24]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401bde:	6812      	ldr	r2, [r2, #0]
  401be0:	fa22 f303 	lsr.w	r3, r2, r3
  401be4:	4a04      	ldr	r2, [pc, #16]	; (401bf8 <SystemCoreClockUpdate+0x184>)
  401be6:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401be8:	bf00      	nop
  401bea:	46bd      	mov	sp, r7
  401bec:	bc80      	pop	{r7}
  401bee:	4770      	bx	lr
  401bf0:	400e0400 	.word	0x400e0400
  401bf4:	400e1410 	.word	0x400e1410
  401bf8:	2000000c 	.word	0x2000000c
  401bfc:	00b71b00 	.word	0x00b71b00
  401c00:	003d0900 	.word	0x003d0900
  401c04:	007a1200 	.word	0x007a1200
  401c08:	07ff0000 	.word	0x07ff0000
  401c0c:	aaaaaaab 	.word	0xaaaaaaab

00401c10 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  401c10:	b480      	push	{r7}
  401c12:	b083      	sub	sp, #12
  401c14:	af00      	add	r7, sp, #0
  401c16:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401c18:	687b      	ldr	r3, [r7, #4]
  401c1a:	4a22      	ldr	r2, [pc, #136]	; (401ca4 <system_init_flash+0x94>)
  401c1c:	4293      	cmp	r3, r2
  401c1e:	d808      	bhi.n	401c32 <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401c20:	4b21      	ldr	r3, [pc, #132]	; (401ca8 <system_init_flash+0x98>)
  401c22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401c26:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401c28:	4b20      	ldr	r3, [pc, #128]	; (401cac <system_init_flash+0x9c>)
  401c2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401c2e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401c30:	e033      	b.n	401c9a <system_init_flash+0x8a>
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401c32:	687b      	ldr	r3, [r7, #4]
  401c34:	4a1e      	ldr	r2, [pc, #120]	; (401cb0 <system_init_flash+0xa0>)
  401c36:	4293      	cmp	r3, r2
  401c38:	d806      	bhi.n	401c48 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401c3a:	4b1b      	ldr	r3, [pc, #108]	; (401ca8 <system_init_flash+0x98>)
  401c3c:	4a1d      	ldr	r2, [pc, #116]	; (401cb4 <system_init_flash+0xa4>)
  401c3e:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401c40:	4b1a      	ldr	r3, [pc, #104]	; (401cac <system_init_flash+0x9c>)
  401c42:	4a1c      	ldr	r2, [pc, #112]	; (401cb4 <system_init_flash+0xa4>)
  401c44:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401c46:	e028      	b.n	401c9a <system_init_flash+0x8a>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401c48:	687b      	ldr	r3, [r7, #4]
  401c4a:	4a1b      	ldr	r2, [pc, #108]	; (401cb8 <system_init_flash+0xa8>)
  401c4c:	4293      	cmp	r3, r2
  401c4e:	d806      	bhi.n	401c5e <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401c50:	4b15      	ldr	r3, [pc, #84]	; (401ca8 <system_init_flash+0x98>)
  401c52:	4a1a      	ldr	r2, [pc, #104]	; (401cbc <system_init_flash+0xac>)
  401c54:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401c56:	4b15      	ldr	r3, [pc, #84]	; (401cac <system_init_flash+0x9c>)
  401c58:	4a18      	ldr	r2, [pc, #96]	; (401cbc <system_init_flash+0xac>)
  401c5a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401c5c:	e01d      	b.n	401c9a <system_init_flash+0x8a>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401c5e:	687b      	ldr	r3, [r7, #4]
  401c60:	4a17      	ldr	r2, [pc, #92]	; (401cc0 <system_init_flash+0xb0>)
  401c62:	4293      	cmp	r3, r2
  401c64:	d806      	bhi.n	401c74 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401c66:	4b10      	ldr	r3, [pc, #64]	; (401ca8 <system_init_flash+0x98>)
  401c68:	4a16      	ldr	r2, [pc, #88]	; (401cc4 <system_init_flash+0xb4>)
  401c6a:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401c6c:	4b0f      	ldr	r3, [pc, #60]	; (401cac <system_init_flash+0x9c>)
  401c6e:	4a15      	ldr	r2, [pc, #84]	; (401cc4 <system_init_flash+0xb4>)
  401c70:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401c72:	e012      	b.n	401c9a <system_init_flash+0x8a>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401c74:	687b      	ldr	r3, [r7, #4]
  401c76:	4a14      	ldr	r2, [pc, #80]	; (401cc8 <system_init_flash+0xb8>)
  401c78:	4293      	cmp	r3, r2
  401c7a:	d808      	bhi.n	401c8e <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401c7c:	4b0a      	ldr	r3, [pc, #40]	; (401ca8 <system_init_flash+0x98>)
  401c7e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401c82:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401c84:	4b09      	ldr	r3, [pc, #36]	; (401cac <system_init_flash+0x9c>)
  401c86:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401c8a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401c8c:	e005      	b.n	401c9a <system_init_flash+0x8a>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401c8e:	4b06      	ldr	r3, [pc, #24]	; (401ca8 <system_init_flash+0x98>)
  401c90:	4a0e      	ldr	r2, [pc, #56]	; (401ccc <system_init_flash+0xbc>)
  401c92:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401c94:	4b05      	ldr	r3, [pc, #20]	; (401cac <system_init_flash+0x9c>)
  401c96:	4a0d      	ldr	r2, [pc, #52]	; (401ccc <system_init_flash+0xbc>)
  401c98:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401c9a:	bf00      	nop
  401c9c:	370c      	adds	r7, #12
  401c9e:	46bd      	mov	sp, r7
  401ca0:	bc80      	pop	{r7}
  401ca2:	4770      	bx	lr
  401ca4:	01312cff 	.word	0x01312cff
  401ca8:	400e0a00 	.word	0x400e0a00
  401cac:	400e0c00 	.word	0x400e0c00
  401cb0:	026259ff 	.word	0x026259ff
  401cb4:	04000100 	.word	0x04000100
  401cb8:	039386ff 	.word	0x039386ff
  401cbc:	04000200 	.word	0x04000200
  401cc0:	04c4b3ff 	.word	0x04c4b3ff
  401cc4:	04000300 	.word	0x04000300
  401cc8:	05f5e0ff 	.word	0x05f5e0ff
  401ccc:	04000500 	.word	0x04000500

00401cd0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401cd0:	b480      	push	{r7}
  401cd2:	b083      	sub	sp, #12
  401cd4:	af00      	add	r7, sp, #0
  401cd6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401cd8:	687b      	ldr	r3, [r7, #4]
  401cda:	2b07      	cmp	r3, #7
  401cdc:	d825      	bhi.n	401d2a <osc_get_rate+0x5a>
  401cde:	a201      	add	r2, pc, #4	; (adr r2, 401ce4 <osc_get_rate+0x14>)
  401ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401ce4:	00401d05 	.word	0x00401d05
  401ce8:	00401d0b 	.word	0x00401d0b
  401cec:	00401d11 	.word	0x00401d11
  401cf0:	00401d17 	.word	0x00401d17
  401cf4:	00401d1b 	.word	0x00401d1b
  401cf8:	00401d1f 	.word	0x00401d1f
  401cfc:	00401d23 	.word	0x00401d23
  401d00:	00401d27 	.word	0x00401d27
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401d04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401d08:	e010      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d0e:	e00d      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d14:	e00a      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401d16:	4b08      	ldr	r3, [pc, #32]	; (401d38 <osc_get_rate+0x68>)
  401d18:	e008      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401d1a:	4b08      	ldr	r3, [pc, #32]	; (401d3c <osc_get_rate+0x6c>)
  401d1c:	e006      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401d1e:	4b08      	ldr	r3, [pc, #32]	; (401d40 <osc_get_rate+0x70>)
  401d20:	e004      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401d22:	4b07      	ldr	r3, [pc, #28]	; (401d40 <osc_get_rate+0x70>)
  401d24:	e002      	b.n	401d2c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401d26:	4b06      	ldr	r3, [pc, #24]	; (401d40 <osc_get_rate+0x70>)
  401d28:	e000      	b.n	401d2c <osc_get_rate+0x5c>
	}

	return 0;
  401d2a:	2300      	movs	r3, #0
}
  401d2c:	4618      	mov	r0, r3
  401d2e:	370c      	adds	r7, #12
  401d30:	46bd      	mov	sp, r7
  401d32:	bc80      	pop	{r7}
  401d34:	4770      	bx	lr
  401d36:	bf00      	nop
  401d38:	003d0900 	.word	0x003d0900
  401d3c:	007a1200 	.word	0x007a1200
  401d40:	00b71b00 	.word	0x00b71b00

00401d44 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401d44:	b580      	push	{r7, lr}
  401d46:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401d48:	2006      	movs	r0, #6
  401d4a:	4b04      	ldr	r3, [pc, #16]	; (401d5c <sysclk_get_main_hz+0x18>)
  401d4c:	4798      	blx	r3
  401d4e:	4602      	mov	r2, r0
  401d50:	4613      	mov	r3, r2
  401d52:	009b      	lsls	r3, r3, #2
  401d54:	4413      	add	r3, r2
  401d56:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401d58:	4618      	mov	r0, r3
  401d5a:	bd80      	pop	{r7, pc}
  401d5c:	00401cd1 	.word	0x00401cd1

00401d60 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401d60:	b580      	push	{r7, lr}
  401d62:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401d64:	4b02      	ldr	r3, [pc, #8]	; (401d70 <sysclk_get_cpu_hz+0x10>)
  401d66:	4798      	blx	r3
  401d68:	4603      	mov	r3, r0
  401d6a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401d6c:	4618      	mov	r0, r3
  401d6e:	bd80      	pop	{r7, pc}
  401d70:	00401d45 	.word	0x00401d45

00401d74 <main>:

void writeMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);
void sendRespPkt(uint8_t *pkt, uint8_t len);

int main (void)
{
  401d74:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  401d78:	b08e      	sub	sp, #56	; 0x38
  401d7a:	af02      	add	r7, sp, #8
	/* RS485 Tx buffer */
	uint8_t respBuff[RS485_BUFFER_SIZE], respLen = 0;
  401d7c:	2300      	movs	r3, #0
  401d7e:	71fb      	strb	r3, [r7, #7]
	uint8_t commState = 0, recvdBytes = 0, prevRecvdBytes;
  401d80:	2300      	movs	r3, #0
  401d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  401d86:	2300      	movs	r3, #0
  401d88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	/* Init Mbus writeFunc() ptr */
	writeFunc = writeMbusRegs;
  401d8c:	4b4b      	ldr	r3, [pc, #300]	; (401ebc <main+0x148>)
  401d8e:	4a4c      	ldr	r2, [pc, #304]	; (401ec0 <main+0x14c>)
  401d90:	601a      	str	r2, [r3, #0]
	
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  401d92:	4b4c      	ldr	r3, [pc, #304]	; (401ec4 <main+0x150>)
  401d94:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();	
  401d96:	4b4c      	ldr	r3, [pc, #304]	; (401ec8 <main+0x154>)
  401d98:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());
	
	/* Init RS485 port with PDC support */
	InitRs485Pdc();
  401d9a:	4b4c      	ldr	r3, [pc, #304]	; (401ecc <main+0x158>)
  401d9c:	4798      	blx	r3
	
	//LED PIN
	gpio_configure_pin(PIO_PC23_IDX, (PIO_OUTPUT_1 | PIO_DEFAULT));
  401d9e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401da2:	2057      	movs	r0, #87	; 0x57
  401da4:	4b4a      	ldr	r3, [pc, #296]	; (401ed0 <main+0x15c>)
  401da6:	4798      	blx	r3
	
	//LED Toggle
	//gpio_toggle_pin(PIO_PC23_IDX);
	
	/* Start Receiving Data */
	usart_disable_tx(RS485_USART);
  401da8:	484a      	ldr	r0, [pc, #296]	; (401ed4 <main+0x160>)
  401daa:	4b4b      	ldr	r3, [pc, #300]	; (401ed8 <main+0x164>)
  401dac:	4798      	blx	r3
	usart_enable_rx(RS485_USART);
  401dae:	4849      	ldr	r0, [pc, #292]	; (401ed4 <main+0x160>)
  401db0:	4b4a      	ldr	r3, [pc, #296]	; (401edc <main+0x168>)
  401db2:	4798      	blx	r3
	Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  401db4:	4b4a      	ldr	r3, [pc, #296]	; (401ee0 <main+0x16c>)
  401db6:	2123      	movs	r1, #35	; 0x23
  401db8:	4618      	mov	r0, r3
  401dba:	4b4a      	ldr	r3, [pc, #296]	; (401ee4 <main+0x170>)
  401dbc:	4798      	blx	r3
	
	while(1)	
	{
		recvdBytes = Rs485PdcGetRxBytes();
  401dbe:	4b4a      	ldr	r3, [pc, #296]	; (401ee8 <main+0x174>)
  401dc0:	4798      	blx	r3
  401dc2:	4603      	mov	r3, r0
  401dc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		/* Check if data received on 485 */
		switch(commState)
  401dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  401dcc:	2b00      	cmp	r3, #0
  401dce:	d002      	beq.n	401dd6 <main+0x62>
  401dd0:	2b01      	cmp	r3, #1
  401dd2:	d00c      	beq.n	401dee <main+0x7a>
  401dd4:	e047      	b.n	401e66 <main+0xf2>
        {
            case 0:
                if(recvdBytes!=0)
  401dd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
  401dda:	2b00      	cmp	r3, #0
  401ddc:	d042      	beq.n	401e64 <main+0xf0>
                {
                    commState = 1;
  401dde:	2301      	movs	r3, #1
  401de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    prevRecvdBytes = recvdBytes;
  401de4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
  401de8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                }
                break;
  401dec:	e03a      	b.n	401e64 <main+0xf0>
            case 1:
                if(prevRecvdBytes != recvdBytes)
  401dee:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
  401df2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
  401df6:	429a      	cmp	r2, r3
  401df8:	d004      	beq.n	401e04 <main+0x90>
                {
                    prevRecvdBytes = recvdBytes;
  401dfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
  401dfe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
                    Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);

                    commState = 0;
                }
                break;
  401e02:	e030      	b.n	401e66 <main+0xf2>
                    prevRecvdBytes = recvdBytes;
                }
                else
                {
                    /* 1 Modbus Pkt received. Process it. */
					usart_disable_rx(RS485_USART);
  401e04:	4833      	ldr	r0, [pc, #204]	; (401ed4 <main+0x160>)
  401e06:	4b39      	ldr	r3, [pc, #228]	; (401eec <main+0x178>)
  401e08:	4798      	blx	r3
                    pdc_disable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  401e0a:	4b39      	ldr	r3, [pc, #228]	; (401ef0 <main+0x17c>)
  401e0c:	681b      	ldr	r3, [r3, #0]
  401e0e:	2101      	movs	r1, #1
  401e10:	4618      	mov	r0, r3
  401e12:	4b38      	ldr	r3, [pc, #224]	; (401ef4 <main+0x180>)
  401e14:	4798      	blx	r3

					/* Parse Received MBUS Pkt, update actual variables */
					parseMbusPkt(MBUS_SLA, rs485RxBuffer, recvdBytes, respBuff, &respLen);    
  401e16:	f107 0108 	add.w	r1, r7, #8
  401e1a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
  401e1e:	1dfb      	adds	r3, r7, #7
  401e20:	9300      	str	r3, [sp, #0]
  401e22:	460b      	mov	r3, r1
  401e24:	492e      	ldr	r1, [pc, #184]	; (401ee0 <main+0x16c>)
  401e26:	2001      	movs	r0, #1
  401e28:	4c33      	ldr	r4, [pc, #204]	; (401ef8 <main+0x184>)
  401e2a:	47a0      	blx	r4
                        
                    /* Generate MBus Resp */
                    if(respLen)
  401e2c:	79fb      	ldrb	r3, [r7, #7]
  401e2e:	2b00      	cmp	r3, #0
  401e30:	d006      	beq.n	401e40 <main+0xcc>
                    {
						sendRespPkt(respBuff, respLen);
  401e32:	79fa      	ldrb	r2, [r7, #7]
  401e34:	f107 0308 	add.w	r3, r7, #8
  401e38:	4611      	mov	r1, r2
  401e3a:	4618      	mov	r0, r3
  401e3c:	4b2f      	ldr	r3, [pc, #188]	; (401efc <main+0x188>)
  401e3e:	4798      	blx	r3
                    }
                        
					usart_enable_rx(RS485_USART);
  401e40:	4824      	ldr	r0, [pc, #144]	; (401ed4 <main+0x160>)
  401e42:	4b26      	ldr	r3, [pc, #152]	; (401edc <main+0x168>)
  401e44:	4798      	blx	r3
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  401e46:	4b2a      	ldr	r3, [pc, #168]	; (401ef0 <main+0x17c>)
  401e48:	681b      	ldr	r3, [r3, #0]
  401e4a:	2101      	movs	r1, #1
  401e4c:	4618      	mov	r0, r3
  401e4e:	4b2c      	ldr	r3, [pc, #176]	; (401f00 <main+0x18c>)
  401e50:	4798      	blx	r3
                    Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  401e52:	4b23      	ldr	r3, [pc, #140]	; (401ee0 <main+0x16c>)
  401e54:	2123      	movs	r1, #35	; 0x23
  401e56:	4618      	mov	r0, r3
  401e58:	4b22      	ldr	r3, [pc, #136]	; (401ee4 <main+0x170>)
  401e5a:	4798      	blx	r3

                    commState = 0;
  401e5c:	2300      	movs	r3, #0
  401e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
                break;
  401e62:	e000      	b.n	401e66 <main+0xf2>
                if(recvdBytes!=0)
                {
                    commState = 1;
                    prevRecvdBytes = recvdBytes;
                }
                break;
  401e64:	bf00      	nop
                break;
        }

		//Read 32 input regs
		//Read 0-10V, 4-20mA
		delay_ms(20);
  401e66:	4b27      	ldr	r3, [pc, #156]	; (401f04 <main+0x190>)
  401e68:	4798      	blx	r3
  401e6a:	4603      	mov	r3, r0
  401e6c:	f04f 0400 	mov.w	r4, #0
  401e70:	ea4f 0984 	mov.w	r9, r4, lsl #2
  401e74:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  401e78:	ea4f 0883 	mov.w	r8, r3, lsl #2
  401e7c:	4643      	mov	r3, r8
  401e7e:	464c      	mov	r4, r9
  401e80:	00a6      	lsls	r6, r4, #2
  401e82:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401e86:	009d      	lsls	r5, r3, #2
  401e88:	195b      	adds	r3, r3, r5
  401e8a:	eb44 0406 	adc.w	r4, r4, r6
  401e8e:	f243 61af 	movw	r1, #13999	; 0x36af
  401e92:	f04f 0200 	mov.w	r2, #0
  401e96:	eb13 0b01 	adds.w	fp, r3, r1
  401e9a:	eb44 0c02 	adc.w	ip, r4, r2
  401e9e:	4658      	mov	r0, fp
  401ea0:	4661      	mov	r1, ip
  401ea2:	4c19      	ldr	r4, [pc, #100]	; (401f08 <main+0x194>)
  401ea4:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401ea8:	f04f 0300 	mov.w	r3, #0
  401eac:	47a0      	blx	r4
  401eae:	4603      	mov	r3, r0
  401eb0:	460c      	mov	r4, r1
  401eb2:	4618      	mov	r0, r3
  401eb4:	4b15      	ldr	r3, [pc, #84]	; (401f0c <main+0x198>)
  401eb6:	4798      	blx	r3
	}
  401eb8:	e781      	b.n	401dbe <main+0x4a>
  401eba:	bf00      	nop
  401ebc:	200004e4 	.word	0x200004e4
  401ec0:	00401f11 	.word	0x00401f11
  401ec4:	00400ffd 	.word	0x00400ffd
  401ec8:	00401985 	.word	0x00401985
  401ecc:	00400a51 	.word	0x00400a51
  401ed0:	004013b9 	.word	0x004013b9
  401ed4:	40028000 	.word	0x40028000
  401ed8:	004002ed 	.word	0x004002ed
  401edc:	0040031d 	.word	0x0040031d
  401ee0:	200004f8 	.word	0x200004f8
  401ee4:	00400b69 	.word	0x00400b69
  401ee8:	00400ba5 	.word	0x00400ba5
  401eec:	00400335 	.word	0x00400335
  401ef0:	200004e8 	.word	0x200004e8
  401ef4:	00401115 	.word	0x00401115
  401ef8:	00400455 	.word	0x00400455
  401efc:	00401f49 	.word	0x00401f49
  401f00:	004010f5 	.word	0x004010f5
  401f04:	00401d61 	.word	0x00401d61
  401f08:	00401f99 	.word	0x00401f99
  401f0c:	20000001 	.word	0x20000001

00401f10 <writeMbusRegs>:
}


void writeMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
  401f10:	b480      	push	{r7}
  401f12:	b083      	sub	sp, #12
  401f14:	af00      	add	r7, sp, #0
  401f16:	6078      	str	r0, [r7, #4]
  401f18:	460b      	mov	r3, r1
  401f1a:	70fb      	strb	r3, [r7, #3]
  401f1c:	4613      	mov	r3, r2
  401f1e:	70bb      	strb	r3, [r7, #2]
	uint16_t *ptr;
	
	while(len)
  401f20:	e00a      	b.n	401f38 <writeMbusRegs+0x28>
	{
		switch(regAddr)
  401f22:	78fb      	ldrb	r3, [r7, #3]
  401f24:	2b0a      	cmp	r3, #10
  401f26:	d000      	beq.n	401f2a <writeMbusRegs+0x1a>
		{
			case MBUS_REG_DO1:
				//Write digital output on pins
				break;
			default:
				break;
  401f28:	e000      	b.n	401f2c <writeMbusRegs+0x1c>
	{
		switch(regAddr)
		{
			case MBUS_REG_DO1:
				//Write digital output on pins
				break;
  401f2a:	bf00      	nop
			default:
				break;
		}
		regAddr++;
  401f2c:	78fb      	ldrb	r3, [r7, #3]
  401f2e:	3301      	adds	r3, #1
  401f30:	70fb      	strb	r3, [r7, #3]
		len--;
  401f32:	78bb      	ldrb	r3, [r7, #2]
  401f34:	3b01      	subs	r3, #1
  401f36:	70bb      	strb	r3, [r7, #2]

void writeMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
	uint16_t *ptr;
	
	while(len)
  401f38:	78bb      	ldrb	r3, [r7, #2]
  401f3a:	2b00      	cmp	r3, #0
  401f3c:	d1f1      	bne.n	401f22 <writeMbusRegs+0x12>
				break;
		}
		regAddr++;
		len--;
	}
}
  401f3e:	bf00      	nop
  401f40:	370c      	adds	r7, #12
  401f42:	46bd      	mov	sp, r7
  401f44:	bc80      	pop	{r7}
  401f46:	4770      	bx	lr

00401f48 <sendRespPkt>:

void sendRespPkt(uint8_t *pkt, uint8_t len)
{
  401f48:	b580      	push	{r7, lr}
  401f4a:	b082      	sub	sp, #8
  401f4c:	af00      	add	r7, sp, #0
  401f4e:	6078      	str	r0, [r7, #4]
  401f50:	460b      	mov	r3, r1
  401f52:	70fb      	strb	r3, [r7, #3]
	usart_enable_tx(RS485_USART);
  401f54:	480b      	ldr	r0, [pc, #44]	; (401f84 <sendRespPkt+0x3c>)
  401f56:	4b0c      	ldr	r3, [pc, #48]	; (401f88 <sendRespPkt+0x40>)
  401f58:	4798      	blx	r3
	/* 3.5 Char Wait Time */
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);
  401f5a:	687b      	ldr	r3, [r7, #4]
  401f5c:	78fa      	ldrb	r2, [r7, #3]
  401f5e:	b292      	uxth	r2, r2
  401f60:	4611      	mov	r1, r2
  401f62:	4618      	mov	r0, r3
  401f64:	4b09      	ldr	r3, [pc, #36]	; (401f8c <sendRespPkt+0x44>)
  401f66:	4798      	blx	r3

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus());
  401f68:	bf00      	nop
  401f6a:	4b09      	ldr	r3, [pc, #36]	; (401f90 <sendRespPkt+0x48>)
  401f6c:	4798      	blx	r3
  401f6e:	4603      	mov	r3, r0
  401f70:	2b00      	cmp	r3, #0
  401f72:	d0fa      	beq.n	401f6a <sendRespPkt+0x22>

	/* 3.5 Char Wait Time */

	usart_disable_tx(RS485_USART);
  401f74:	4803      	ldr	r0, [pc, #12]	; (401f84 <sendRespPkt+0x3c>)
  401f76:	4b07      	ldr	r3, [pc, #28]	; (401f94 <sendRespPkt+0x4c>)
  401f78:	4798      	blx	r3
  401f7a:	bf00      	nop
  401f7c:	3708      	adds	r7, #8
  401f7e:	46bd      	mov	sp, r7
  401f80:	bd80      	pop	{r7, pc}
  401f82:	bf00      	nop
  401f84:	40028000 	.word	0x40028000
  401f88:	004002d5 	.word	0x004002d5
  401f8c:	00400b2d 	.word	0x00400b2d
  401f90:	00400bdd 	.word	0x00400bdd
  401f94:	004002ed 	.word	0x004002ed

00401f98 <__aeabi_uldivmod>:
  401f98:	b953      	cbnz	r3, 401fb0 <__aeabi_uldivmod+0x18>
  401f9a:	b94a      	cbnz	r2, 401fb0 <__aeabi_uldivmod+0x18>
  401f9c:	2900      	cmp	r1, #0
  401f9e:	bf08      	it	eq
  401fa0:	2800      	cmpeq	r0, #0
  401fa2:	bf1c      	itt	ne
  401fa4:	f04f 31ff 	movne.w	r1, #4294967295
  401fa8:	f04f 30ff 	movne.w	r0, #4294967295
  401fac:	f000 b97e 	b.w	4022ac <__aeabi_idiv0>
  401fb0:	f1ad 0c08 	sub.w	ip, sp, #8
  401fb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401fb8:	f000 f806 	bl	401fc8 <__udivmoddi4>
  401fbc:	f8dd e004 	ldr.w	lr, [sp, #4]
  401fc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401fc4:	b004      	add	sp, #16
  401fc6:	4770      	bx	lr

00401fc8 <__udivmoddi4>:
  401fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401fcc:	468c      	mov	ip, r1
  401fce:	460e      	mov	r6, r1
  401fd0:	4604      	mov	r4, r0
  401fd2:	9d08      	ldr	r5, [sp, #32]
  401fd4:	2b00      	cmp	r3, #0
  401fd6:	d150      	bne.n	40207a <__udivmoddi4+0xb2>
  401fd8:	428a      	cmp	r2, r1
  401fda:	4617      	mov	r7, r2
  401fdc:	d96c      	bls.n	4020b8 <__udivmoddi4+0xf0>
  401fde:	fab2 fe82 	clz	lr, r2
  401fe2:	f1be 0f00 	cmp.w	lr, #0
  401fe6:	d00b      	beq.n	402000 <__udivmoddi4+0x38>
  401fe8:	f1ce 0420 	rsb	r4, lr, #32
  401fec:	fa20 f404 	lsr.w	r4, r0, r4
  401ff0:	fa01 f60e 	lsl.w	r6, r1, lr
  401ff4:	ea44 0c06 	orr.w	ip, r4, r6
  401ff8:	fa02 f70e 	lsl.w	r7, r2, lr
  401ffc:	fa00 f40e 	lsl.w	r4, r0, lr
  402000:	ea4f 4917 	mov.w	r9, r7, lsr #16
  402004:	0c22      	lsrs	r2, r4, #16
  402006:	fbbc f0f9 	udiv	r0, ip, r9
  40200a:	fa1f f887 	uxth.w	r8, r7
  40200e:	fb09 c610 	mls	r6, r9, r0, ip
  402012:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  402016:	fb00 f308 	mul.w	r3, r0, r8
  40201a:	42b3      	cmp	r3, r6
  40201c:	d909      	bls.n	402032 <__udivmoddi4+0x6a>
  40201e:	19f6      	adds	r6, r6, r7
  402020:	f100 32ff 	add.w	r2, r0, #4294967295
  402024:	f080 8122 	bcs.w	40226c <__udivmoddi4+0x2a4>
  402028:	42b3      	cmp	r3, r6
  40202a:	f240 811f 	bls.w	40226c <__udivmoddi4+0x2a4>
  40202e:	3802      	subs	r0, #2
  402030:	443e      	add	r6, r7
  402032:	1af6      	subs	r6, r6, r3
  402034:	b2a2      	uxth	r2, r4
  402036:	fbb6 f3f9 	udiv	r3, r6, r9
  40203a:	fb09 6613 	mls	r6, r9, r3, r6
  40203e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  402042:	fb03 f808 	mul.w	r8, r3, r8
  402046:	45a0      	cmp	r8, r4
  402048:	d909      	bls.n	40205e <__udivmoddi4+0x96>
  40204a:	19e4      	adds	r4, r4, r7
  40204c:	f103 32ff 	add.w	r2, r3, #4294967295
  402050:	f080 810a 	bcs.w	402268 <__udivmoddi4+0x2a0>
  402054:	45a0      	cmp	r8, r4
  402056:	f240 8107 	bls.w	402268 <__udivmoddi4+0x2a0>
  40205a:	3b02      	subs	r3, #2
  40205c:	443c      	add	r4, r7
  40205e:	ebc8 0404 	rsb	r4, r8, r4
  402062:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402066:	2100      	movs	r1, #0
  402068:	2d00      	cmp	r5, #0
  40206a:	d062      	beq.n	402132 <__udivmoddi4+0x16a>
  40206c:	fa24 f40e 	lsr.w	r4, r4, lr
  402070:	2300      	movs	r3, #0
  402072:	602c      	str	r4, [r5, #0]
  402074:	606b      	str	r3, [r5, #4]
  402076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40207a:	428b      	cmp	r3, r1
  40207c:	d907      	bls.n	40208e <__udivmoddi4+0xc6>
  40207e:	2d00      	cmp	r5, #0
  402080:	d055      	beq.n	40212e <__udivmoddi4+0x166>
  402082:	2100      	movs	r1, #0
  402084:	e885 0041 	stmia.w	r5, {r0, r6}
  402088:	4608      	mov	r0, r1
  40208a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40208e:	fab3 f183 	clz	r1, r3
  402092:	2900      	cmp	r1, #0
  402094:	f040 8090 	bne.w	4021b8 <__udivmoddi4+0x1f0>
  402098:	42b3      	cmp	r3, r6
  40209a:	d302      	bcc.n	4020a2 <__udivmoddi4+0xda>
  40209c:	4282      	cmp	r2, r0
  40209e:	f200 80f8 	bhi.w	402292 <__udivmoddi4+0x2ca>
  4020a2:	1a84      	subs	r4, r0, r2
  4020a4:	eb66 0603 	sbc.w	r6, r6, r3
  4020a8:	2001      	movs	r0, #1
  4020aa:	46b4      	mov	ip, r6
  4020ac:	2d00      	cmp	r5, #0
  4020ae:	d040      	beq.n	402132 <__udivmoddi4+0x16a>
  4020b0:	e885 1010 	stmia.w	r5, {r4, ip}
  4020b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020b8:	b912      	cbnz	r2, 4020c0 <__udivmoddi4+0xf8>
  4020ba:	2701      	movs	r7, #1
  4020bc:	fbb7 f7f2 	udiv	r7, r7, r2
  4020c0:	fab7 fe87 	clz	lr, r7
  4020c4:	f1be 0f00 	cmp.w	lr, #0
  4020c8:	d135      	bne.n	402136 <__udivmoddi4+0x16e>
  4020ca:	1bf3      	subs	r3, r6, r7
  4020cc:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4020d0:	fa1f fc87 	uxth.w	ip, r7
  4020d4:	2101      	movs	r1, #1
  4020d6:	fbb3 f0f8 	udiv	r0, r3, r8
  4020da:	0c22      	lsrs	r2, r4, #16
  4020dc:	fb08 3610 	mls	r6, r8, r0, r3
  4020e0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4020e4:	fb0c f300 	mul.w	r3, ip, r0
  4020e8:	42b3      	cmp	r3, r6
  4020ea:	d907      	bls.n	4020fc <__udivmoddi4+0x134>
  4020ec:	19f6      	adds	r6, r6, r7
  4020ee:	f100 32ff 	add.w	r2, r0, #4294967295
  4020f2:	d202      	bcs.n	4020fa <__udivmoddi4+0x132>
  4020f4:	42b3      	cmp	r3, r6
  4020f6:	f200 80ce 	bhi.w	402296 <__udivmoddi4+0x2ce>
  4020fa:	4610      	mov	r0, r2
  4020fc:	1af6      	subs	r6, r6, r3
  4020fe:	b2a2      	uxth	r2, r4
  402100:	fbb6 f3f8 	udiv	r3, r6, r8
  402104:	fb08 6613 	mls	r6, r8, r3, r6
  402108:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40210c:	fb0c fc03 	mul.w	ip, ip, r3
  402110:	45a4      	cmp	ip, r4
  402112:	d907      	bls.n	402124 <__udivmoddi4+0x15c>
  402114:	19e4      	adds	r4, r4, r7
  402116:	f103 32ff 	add.w	r2, r3, #4294967295
  40211a:	d202      	bcs.n	402122 <__udivmoddi4+0x15a>
  40211c:	45a4      	cmp	ip, r4
  40211e:	f200 80b5 	bhi.w	40228c <__udivmoddi4+0x2c4>
  402122:	4613      	mov	r3, r2
  402124:	ebcc 0404 	rsb	r4, ip, r4
  402128:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40212c:	e79c      	b.n	402068 <__udivmoddi4+0xa0>
  40212e:	4629      	mov	r1, r5
  402130:	4628      	mov	r0, r5
  402132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402136:	f1ce 0120 	rsb	r1, lr, #32
  40213a:	fa06 f30e 	lsl.w	r3, r6, lr
  40213e:	fa07 f70e 	lsl.w	r7, r7, lr
  402142:	fa20 f901 	lsr.w	r9, r0, r1
  402146:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40214a:	40ce      	lsrs	r6, r1
  40214c:	ea49 0903 	orr.w	r9, r9, r3
  402150:	fbb6 faf8 	udiv	sl, r6, r8
  402154:	ea4f 4419 	mov.w	r4, r9, lsr #16
  402158:	fb08 661a 	mls	r6, r8, sl, r6
  40215c:	fa1f fc87 	uxth.w	ip, r7
  402160:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  402164:	fb0a f20c 	mul.w	r2, sl, ip
  402168:	429a      	cmp	r2, r3
  40216a:	fa00 f40e 	lsl.w	r4, r0, lr
  40216e:	d90a      	bls.n	402186 <__udivmoddi4+0x1be>
  402170:	19db      	adds	r3, r3, r7
  402172:	f10a 31ff 	add.w	r1, sl, #4294967295
  402176:	f080 8087 	bcs.w	402288 <__udivmoddi4+0x2c0>
  40217a:	429a      	cmp	r2, r3
  40217c:	f240 8084 	bls.w	402288 <__udivmoddi4+0x2c0>
  402180:	f1aa 0a02 	sub.w	sl, sl, #2
  402184:	443b      	add	r3, r7
  402186:	1a9b      	subs	r3, r3, r2
  402188:	fa1f f989 	uxth.w	r9, r9
  40218c:	fbb3 f1f8 	udiv	r1, r3, r8
  402190:	fb08 3311 	mls	r3, r8, r1, r3
  402194:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  402198:	fb01 f60c 	mul.w	r6, r1, ip
  40219c:	429e      	cmp	r6, r3
  40219e:	d907      	bls.n	4021b0 <__udivmoddi4+0x1e8>
  4021a0:	19db      	adds	r3, r3, r7
  4021a2:	f101 32ff 	add.w	r2, r1, #4294967295
  4021a6:	d26b      	bcs.n	402280 <__udivmoddi4+0x2b8>
  4021a8:	429e      	cmp	r6, r3
  4021aa:	d969      	bls.n	402280 <__udivmoddi4+0x2b8>
  4021ac:	3902      	subs	r1, #2
  4021ae:	443b      	add	r3, r7
  4021b0:	1b9b      	subs	r3, r3, r6
  4021b2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  4021b6:	e78e      	b.n	4020d6 <__udivmoddi4+0x10e>
  4021b8:	f1c1 0e20 	rsb	lr, r1, #32
  4021bc:	fa22 f40e 	lsr.w	r4, r2, lr
  4021c0:	408b      	lsls	r3, r1
  4021c2:	4323      	orrs	r3, r4
  4021c4:	fa20 f70e 	lsr.w	r7, r0, lr
  4021c8:	fa06 f401 	lsl.w	r4, r6, r1
  4021cc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4021d0:	fa26 f60e 	lsr.w	r6, r6, lr
  4021d4:	433c      	orrs	r4, r7
  4021d6:	fbb6 f9fc 	udiv	r9, r6, ip
  4021da:	0c27      	lsrs	r7, r4, #16
  4021dc:	fb0c 6619 	mls	r6, ip, r9, r6
  4021e0:	fa1f f883 	uxth.w	r8, r3
  4021e4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4021e8:	fb09 f708 	mul.w	r7, r9, r8
  4021ec:	42b7      	cmp	r7, r6
  4021ee:	fa02 f201 	lsl.w	r2, r2, r1
  4021f2:	fa00 fa01 	lsl.w	sl, r0, r1
  4021f6:	d908      	bls.n	40220a <__udivmoddi4+0x242>
  4021f8:	18f6      	adds	r6, r6, r3
  4021fa:	f109 30ff 	add.w	r0, r9, #4294967295
  4021fe:	d241      	bcs.n	402284 <__udivmoddi4+0x2bc>
  402200:	42b7      	cmp	r7, r6
  402202:	d93f      	bls.n	402284 <__udivmoddi4+0x2bc>
  402204:	f1a9 0902 	sub.w	r9, r9, #2
  402208:	441e      	add	r6, r3
  40220a:	1bf6      	subs	r6, r6, r7
  40220c:	b2a0      	uxth	r0, r4
  40220e:	fbb6 f4fc 	udiv	r4, r6, ip
  402212:	fb0c 6614 	mls	r6, ip, r4, r6
  402216:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40221a:	fb04 f808 	mul.w	r8, r4, r8
  40221e:	45b8      	cmp	r8, r7
  402220:	d907      	bls.n	402232 <__udivmoddi4+0x26a>
  402222:	18ff      	adds	r7, r7, r3
  402224:	f104 30ff 	add.w	r0, r4, #4294967295
  402228:	d228      	bcs.n	40227c <__udivmoddi4+0x2b4>
  40222a:	45b8      	cmp	r8, r7
  40222c:	d926      	bls.n	40227c <__udivmoddi4+0x2b4>
  40222e:	3c02      	subs	r4, #2
  402230:	441f      	add	r7, r3
  402232:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  402236:	ebc8 0707 	rsb	r7, r8, r7
  40223a:	fba0 8902 	umull	r8, r9, r0, r2
  40223e:	454f      	cmp	r7, r9
  402240:	4644      	mov	r4, r8
  402242:	464e      	mov	r6, r9
  402244:	d314      	bcc.n	402270 <__udivmoddi4+0x2a8>
  402246:	d029      	beq.n	40229c <__udivmoddi4+0x2d4>
  402248:	b365      	cbz	r5, 4022a4 <__udivmoddi4+0x2dc>
  40224a:	ebba 0304 	subs.w	r3, sl, r4
  40224e:	eb67 0706 	sbc.w	r7, r7, r6
  402252:	fa07 fe0e 	lsl.w	lr, r7, lr
  402256:	40cb      	lsrs	r3, r1
  402258:	40cf      	lsrs	r7, r1
  40225a:	ea4e 0303 	orr.w	r3, lr, r3
  40225e:	e885 0088 	stmia.w	r5, {r3, r7}
  402262:	2100      	movs	r1, #0
  402264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402268:	4613      	mov	r3, r2
  40226a:	e6f8      	b.n	40205e <__udivmoddi4+0x96>
  40226c:	4610      	mov	r0, r2
  40226e:	e6e0      	b.n	402032 <__udivmoddi4+0x6a>
  402270:	ebb8 0402 	subs.w	r4, r8, r2
  402274:	eb69 0603 	sbc.w	r6, r9, r3
  402278:	3801      	subs	r0, #1
  40227a:	e7e5      	b.n	402248 <__udivmoddi4+0x280>
  40227c:	4604      	mov	r4, r0
  40227e:	e7d8      	b.n	402232 <__udivmoddi4+0x26a>
  402280:	4611      	mov	r1, r2
  402282:	e795      	b.n	4021b0 <__udivmoddi4+0x1e8>
  402284:	4681      	mov	r9, r0
  402286:	e7c0      	b.n	40220a <__udivmoddi4+0x242>
  402288:	468a      	mov	sl, r1
  40228a:	e77c      	b.n	402186 <__udivmoddi4+0x1be>
  40228c:	3b02      	subs	r3, #2
  40228e:	443c      	add	r4, r7
  402290:	e748      	b.n	402124 <__udivmoddi4+0x15c>
  402292:	4608      	mov	r0, r1
  402294:	e70a      	b.n	4020ac <__udivmoddi4+0xe4>
  402296:	3802      	subs	r0, #2
  402298:	443e      	add	r6, r7
  40229a:	e72f      	b.n	4020fc <__udivmoddi4+0x134>
  40229c:	45c2      	cmp	sl, r8
  40229e:	d3e7      	bcc.n	402270 <__udivmoddi4+0x2a8>
  4022a0:	463e      	mov	r6, r7
  4022a2:	e7d1      	b.n	402248 <__udivmoddi4+0x280>
  4022a4:	4629      	mov	r1, r5
  4022a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022aa:	bf00      	nop

004022ac <__aeabi_idiv0>:
  4022ac:	4770      	bx	lr
  4022ae:	bf00      	nop

004022b0 <__libc_init_array>:
  4022b0:	b570      	push	{r4, r5, r6, lr}
  4022b2:	4e0f      	ldr	r6, [pc, #60]	; (4022f0 <__libc_init_array+0x40>)
  4022b4:	4d0f      	ldr	r5, [pc, #60]	; (4022f4 <__libc_init_array+0x44>)
  4022b6:	1b76      	subs	r6, r6, r5
  4022b8:	10b6      	asrs	r6, r6, #2
  4022ba:	bf18      	it	ne
  4022bc:	2400      	movne	r4, #0
  4022be:	d005      	beq.n	4022cc <__libc_init_array+0x1c>
  4022c0:	3401      	adds	r4, #1
  4022c2:	f855 3b04 	ldr.w	r3, [r5], #4
  4022c6:	4798      	blx	r3
  4022c8:	42a6      	cmp	r6, r4
  4022ca:	d1f9      	bne.n	4022c0 <__libc_init_array+0x10>
  4022cc:	4e0a      	ldr	r6, [pc, #40]	; (4022f8 <__libc_init_array+0x48>)
  4022ce:	4d0b      	ldr	r5, [pc, #44]	; (4022fc <__libc_init_array+0x4c>)
  4022d0:	1b76      	subs	r6, r6, r5
  4022d2:	f000 f89b 	bl	40240c <_init>
  4022d6:	10b6      	asrs	r6, r6, #2
  4022d8:	bf18      	it	ne
  4022da:	2400      	movne	r4, #0
  4022dc:	d006      	beq.n	4022ec <__libc_init_array+0x3c>
  4022de:	3401      	adds	r4, #1
  4022e0:	f855 3b04 	ldr.w	r3, [r5], #4
  4022e4:	4798      	blx	r3
  4022e6:	42a6      	cmp	r6, r4
  4022e8:	d1f9      	bne.n	4022de <__libc_init_array+0x2e>
  4022ea:	bd70      	pop	{r4, r5, r6, pc}
  4022ec:	bd70      	pop	{r4, r5, r6, pc}
  4022ee:	bf00      	nop
  4022f0:	00402418 	.word	0x00402418
  4022f4:	00402418 	.word	0x00402418
  4022f8:	00402420 	.word	0x00402420
  4022fc:	00402418 	.word	0x00402418

00402300 <register_fini>:
  402300:	4b02      	ldr	r3, [pc, #8]	; (40230c <register_fini+0xc>)
  402302:	b113      	cbz	r3, 40230a <register_fini+0xa>
  402304:	4802      	ldr	r0, [pc, #8]	; (402310 <register_fini+0x10>)
  402306:	f000 b805 	b.w	402314 <atexit>
  40230a:	4770      	bx	lr
  40230c:	00000000 	.word	0x00000000
  402310:	00402321 	.word	0x00402321

00402314 <atexit>:
  402314:	2300      	movs	r3, #0
  402316:	4601      	mov	r1, r0
  402318:	461a      	mov	r2, r3
  40231a:	4618      	mov	r0, r3
  40231c:	f000 b814 	b.w	402348 <__register_exitproc>

00402320 <__libc_fini_array>:
  402320:	b538      	push	{r3, r4, r5, lr}
  402322:	4d07      	ldr	r5, [pc, #28]	; (402340 <__libc_fini_array+0x20>)
  402324:	4c07      	ldr	r4, [pc, #28]	; (402344 <__libc_fini_array+0x24>)
  402326:	1b2c      	subs	r4, r5, r4
  402328:	10a4      	asrs	r4, r4, #2
  40232a:	d005      	beq.n	402338 <__libc_fini_array+0x18>
  40232c:	3c01      	subs	r4, #1
  40232e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402332:	4798      	blx	r3
  402334:	2c00      	cmp	r4, #0
  402336:	d1f9      	bne.n	40232c <__libc_fini_array+0xc>
  402338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40233c:	f000 b870 	b.w	402420 <_fini>
  402340:	00402430 	.word	0x00402430
  402344:	0040242c 	.word	0x0040242c

00402348 <__register_exitproc>:
  402348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40234c:	4c25      	ldr	r4, [pc, #148]	; (4023e4 <__register_exitproc+0x9c>)
  40234e:	6825      	ldr	r5, [r4, #0]
  402350:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402354:	4606      	mov	r6, r0
  402356:	4688      	mov	r8, r1
  402358:	4692      	mov	sl, r2
  40235a:	4699      	mov	r9, r3
  40235c:	b3c4      	cbz	r4, 4023d0 <__register_exitproc+0x88>
  40235e:	6860      	ldr	r0, [r4, #4]
  402360:	281f      	cmp	r0, #31
  402362:	dc17      	bgt.n	402394 <__register_exitproc+0x4c>
  402364:	1c43      	adds	r3, r0, #1
  402366:	b176      	cbz	r6, 402386 <__register_exitproc+0x3e>
  402368:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40236c:	2201      	movs	r2, #1
  40236e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402372:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402376:	4082      	lsls	r2, r0
  402378:	4311      	orrs	r1, r2
  40237a:	2e02      	cmp	r6, #2
  40237c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402380:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402384:	d01e      	beq.n	4023c4 <__register_exitproc+0x7c>
  402386:	3002      	adds	r0, #2
  402388:	6063      	str	r3, [r4, #4]
  40238a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40238e:	2000      	movs	r0, #0
  402390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402394:	4b14      	ldr	r3, [pc, #80]	; (4023e8 <__register_exitproc+0xa0>)
  402396:	b303      	cbz	r3, 4023da <__register_exitproc+0x92>
  402398:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40239c:	f3af 8000 	nop.w
  4023a0:	4604      	mov	r4, r0
  4023a2:	b1d0      	cbz	r0, 4023da <__register_exitproc+0x92>
  4023a4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4023a8:	2700      	movs	r7, #0
  4023aa:	e880 0088 	stmia.w	r0, {r3, r7}
  4023ae:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4023b2:	4638      	mov	r0, r7
  4023b4:	2301      	movs	r3, #1
  4023b6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4023ba:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4023be:	2e00      	cmp	r6, #0
  4023c0:	d0e1      	beq.n	402386 <__register_exitproc+0x3e>
  4023c2:	e7d1      	b.n	402368 <__register_exitproc+0x20>
  4023c4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4023c8:	430a      	orrs	r2, r1
  4023ca:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4023ce:	e7da      	b.n	402386 <__register_exitproc+0x3e>
  4023d0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4023d4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4023d8:	e7c1      	b.n	40235e <__register_exitproc+0x16>
  4023da:	f04f 30ff 	mov.w	r0, #4294967295
  4023de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023e2:	bf00      	nop
  4023e4:	00402408 	.word	0x00402408
  4023e8:	00000000 	.word	0x00000000
  4023ec:	00002580 	.word	0x00002580
  4023f0:	000000c0 	.word	0x000000c0
  4023f4:	00000800 	.word	0x00000800
	...
  402404:	00000043 	.word	0x00000043

00402408 <_global_impure_ptr>:
  402408:	20000010                                ... 

0040240c <_init>:
  40240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40240e:	bf00      	nop
  402410:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402412:	bc08      	pop	{r3}
  402414:	469e      	mov	lr, r3
  402416:	4770      	bx	lr

00402418 <__init_array_start>:
  402418:	00402301 	.word	0x00402301

0040241c <__frame_dummy_init_array_entry>:
  40241c:	004000f1                                ..@.

00402420 <_fini>:
  402420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402422:	bf00      	nop
  402424:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402426:	bc08      	pop	{r3}
  402428:	469e      	mov	lr, r3
  40242a:	4770      	bx	lr

0040242c <__fini_array_start>:
  40242c:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
20000044:	2404 0040 0000 0000 0000 0000 0000 0000     .$@.............
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
