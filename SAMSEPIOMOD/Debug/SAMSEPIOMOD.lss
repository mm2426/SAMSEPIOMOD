
SAMSEPIOMOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ec  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  004006ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  20000430  00400b1c  00020430  2**2
                  ALLOC
  3 .stack        00003004  200004c4  00400bb0  00020430  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00004daa  00000000  00000000  000204b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d61  00000000  00000000  0002525d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000023f2  00000000  00000000  00025fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004b0  00000000  00000000  000283b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000440  00000000  00000000  00028860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001036b  00000000  00000000  00028ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005562  00000000  00000000  0003900b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004d7c5  00000000  00000000  0003e56d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ae8  00000000  00000000  0008bd34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034c8 	.word	0x200034c8
  400004:	00400321 	.word	0x00400321
  400008:	0040031d 	.word	0x0040031d
  40000c:	0040031d 	.word	0x0040031d
  400010:	0040031d 	.word	0x0040031d
  400014:	0040031d 	.word	0x0040031d
  400018:	0040031d 	.word	0x0040031d
	...
  40002c:	0040031d 	.word	0x0040031d
  400030:	0040031d 	.word	0x0040031d
  400034:	00000000 	.word	0x00000000
  400038:	0040031d 	.word	0x0040031d
  40003c:	0040031d 	.word	0x0040031d
  400040:	0040031d 	.word	0x0040031d
  400044:	0040031d 	.word	0x0040031d
  400048:	0040031d 	.word	0x0040031d
  40004c:	0040031d 	.word	0x0040031d
  400050:	0040031d 	.word	0x0040031d
  400054:	0040031d 	.word	0x0040031d
  400058:	0040031d 	.word	0x0040031d
  40005c:	0040031d 	.word	0x0040031d
  400060:	0040031d 	.word	0x0040031d
  400064:	0040031d 	.word	0x0040031d
  400068:	00000000 	.word	0x00000000
  40006c:	00400191 	.word	0x00400191
  400070:	004001a5 	.word	0x004001a5
  400074:	004001b9 	.word	0x004001b9
  400078:	0040031d 	.word	0x0040031d
  40007c:	0040031d 	.word	0x0040031d
	...
  400088:	0040031d 	.word	0x0040031d
  40008c:	0040031d 	.word	0x0040031d
  400090:	0040031d 	.word	0x0040031d
  400094:	0040031d 	.word	0x0040031d
  400098:	0040031d 	.word	0x0040031d
  40009c:	0040031d 	.word	0x0040031d
  4000a0:	0040031d 	.word	0x0040031d
  4000a4:	0040031d 	.word	0x0040031d
  4000a8:	0040031d 	.word	0x0040031d
  4000ac:	0040031d 	.word	0x0040031d
  4000b0:	0040031d 	.word	0x0040031d
  4000b4:	0040031d 	.word	0x0040031d
  4000b8:	0040031d 	.word	0x0040031d
  4000bc:	0040031d 	.word	0x0040031d
  4000c0:	0040031d 	.word	0x0040031d
  4000c4:	0040031d 	.word	0x0040031d
  4000c8:	0040031d 	.word	0x0040031d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000430 	.word	0x20000430
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004006ec 	.word	0x004006ec

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000434 	.word	0x20000434
  40011c:	004006ec 	.word	0x004006ec
  400120:	004006ec 	.word	0x004006ec
  400124:	00000000 	.word	0x00000000

00400128 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40012c:	4681      	mov	r9, r0
  40012e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400130:	4b12      	ldr	r3, [pc, #72]	; (40017c <pio_handler_process+0x54>)
  400132:	4798      	blx	r3
  400134:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400136:	4648      	mov	r0, r9
  400138:	4b11      	ldr	r3, [pc, #68]	; (400180 <pio_handler_process+0x58>)
  40013a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40013c:	4005      	ands	r5, r0
  40013e:	d013      	beq.n	400168 <pio_handler_process+0x40>
  400140:	4c10      	ldr	r4, [pc, #64]	; (400184 <pio_handler_process+0x5c>)
  400142:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400146:	6823      	ldr	r3, [r4, #0]
  400148:	4543      	cmp	r3, r8
  40014a:	d108      	bne.n	40015e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40014c:	6861      	ldr	r1, [r4, #4]
  40014e:	4229      	tst	r1, r5
  400150:	d005      	beq.n	40015e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400152:	68e3      	ldr	r3, [r4, #12]
  400154:	4640      	mov	r0, r8
  400156:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400158:	6863      	ldr	r3, [r4, #4]
  40015a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40015e:	42b4      	cmp	r4, r6
  400160:	d002      	beq.n	400168 <pio_handler_process+0x40>
  400162:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400164:	2d00      	cmp	r5, #0
  400166:	d1ee      	bne.n	400146 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400168:	4b07      	ldr	r3, [pc, #28]	; (400188 <pio_handler_process+0x60>)
  40016a:	681b      	ldr	r3, [r3, #0]
  40016c:	b123      	cbz	r3, 400178 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40016e:	4b07      	ldr	r3, [pc, #28]	; (40018c <pio_handler_process+0x64>)
  400170:	681b      	ldr	r3, [r3, #0]
  400172:	b10b      	cbz	r3, 400178 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400174:	4648      	mov	r0, r9
  400176:	4798      	blx	r3
  400178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40017c:	00400231 	.word	0x00400231
  400180:	00400235 	.word	0x00400235
  400184:	20000450 	.word	0x20000450
  400188:	200004c0 	.word	0x200004c0
  40018c:	2000044c 	.word	0x2000044c

00400190 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400190:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400192:	210b      	movs	r1, #11
  400194:	4801      	ldr	r0, [pc, #4]	; (40019c <PIOA_Handler+0xc>)
  400196:	4b02      	ldr	r3, [pc, #8]	; (4001a0 <PIOA_Handler+0x10>)
  400198:	4798      	blx	r3
  40019a:	bd08      	pop	{r3, pc}
  40019c:	400e0e00 	.word	0x400e0e00
  4001a0:	00400129 	.word	0x00400129

004001a4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4001a4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4001a6:	210c      	movs	r1, #12
  4001a8:	4801      	ldr	r0, [pc, #4]	; (4001b0 <PIOB_Handler+0xc>)
  4001aa:	4b02      	ldr	r3, [pc, #8]	; (4001b4 <PIOB_Handler+0x10>)
  4001ac:	4798      	blx	r3
  4001ae:	bd08      	pop	{r3, pc}
  4001b0:	400e1000 	.word	0x400e1000
  4001b4:	00400129 	.word	0x00400129

004001b8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4001b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4001ba:	210d      	movs	r1, #13
  4001bc:	4801      	ldr	r0, [pc, #4]	; (4001c4 <PIOC_Handler+0xc>)
  4001be:	4b02      	ldr	r3, [pc, #8]	; (4001c8 <PIOC_Handler+0x10>)
  4001c0:	4798      	blx	r3
  4001c2:	bd08      	pop	{r3, pc}
  4001c4:	400e1200 	.word	0x400e1200
  4001c8:	00400129 	.word	0x00400129

004001cc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001cc:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ce:	480e      	ldr	r0, [pc, #56]	; (400208 <sysclk_init+0x3c>)
  4001d0:	4b0e      	ldr	r3, [pc, #56]	; (40020c <sysclk_init+0x40>)
  4001d2:	4798      	blx	r3
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
		break;


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001d4:	2000      	movs	r0, #0
  4001d6:	4b0e      	ldr	r3, [pc, #56]	; (400210 <sysclk_init+0x44>)
  4001d8:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001da:	4c0e      	ldr	r4, [pc, #56]	; (400214 <sysclk_init+0x48>)
  4001dc:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001de:	2800      	cmp	r0, #0
  4001e0:	d0fc      	beq.n	4001dc <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x4c>)
  4001e4:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001e6:	4a0d      	ldr	r2, [pc, #52]	; (40021c <sysclk_init+0x50>)
  4001e8:	4b0d      	ldr	r3, [pc, #52]	; (400220 <sysclk_init+0x54>)
  4001ea:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4001ec:	4c0d      	ldr	r4, [pc, #52]	; (400224 <sysclk_init+0x58>)
  4001ee:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001f0:	2800      	cmp	r0, #0
  4001f2:	d0fc      	beq.n	4001ee <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001f4:	2000      	movs	r0, #0
  4001f6:	4b0c      	ldr	r3, [pc, #48]	; (400228 <sysclk_init+0x5c>)
  4001f8:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <sysclk_init+0x60>)
  4001fc:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001fe:	4802      	ldr	r0, [pc, #8]	; (400208 <sysclk_init+0x3c>)
  400200:	4b02      	ldr	r3, [pc, #8]	; (40020c <sysclk_init+0x40>)
  400202:	4798      	blx	r3
  400204:	bd10      	pop	{r4, pc}
  400206:	bf00      	nop
  400208:	07270e00 	.word	0x07270e00
  40020c:	004004e5 	.word	0x004004e5
  400210:	004002a1 	.word	0x004002a1
  400214:	004002ed 	.word	0x004002ed
  400218:	004002fd 	.word	0x004002fd
  40021c:	201d3f01 	.word	0x201d3f01
  400220:	400e0400 	.word	0x400e0400
  400224:	0040030d 	.word	0x0040030d
  400228:	00400239 	.word	0x00400239
  40022c:	004003d1 	.word	0x004003d1

00400230 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400230:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400232:	4770      	bx	lr

00400234 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400234:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400236:	4770      	bx	lr

00400238 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400238:	4a18      	ldr	r2, [pc, #96]	; (40029c <pmc_switch_mck_to_pllack+0x64>)
  40023a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40023c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400240:	4318      	orrs	r0, r3
  400242:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400244:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400246:	f013 0f08 	tst.w	r3, #8
  40024a:	d003      	beq.n	400254 <pmc_switch_mck_to_pllack+0x1c>
  40024c:	e009      	b.n	400262 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40024e:	3b01      	subs	r3, #1
  400250:	d103      	bne.n	40025a <pmc_switch_mck_to_pllack+0x22>
  400252:	e01e      	b.n	400292 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400254:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400258:	4910      	ldr	r1, [pc, #64]	; (40029c <pmc_switch_mck_to_pllack+0x64>)
  40025a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40025c:	f012 0f08 	tst.w	r2, #8
  400260:	d0f5      	beq.n	40024e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400262:	4a0e      	ldr	r2, [pc, #56]	; (40029c <pmc_switch_mck_to_pllack+0x64>)
  400264:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400266:	f023 0303 	bic.w	r3, r3, #3
  40026a:	f043 0302 	orr.w	r3, r3, #2
  40026e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400270:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400272:	f010 0008 	ands.w	r0, r0, #8
  400276:	d004      	beq.n	400282 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400278:	2000      	movs	r0, #0
  40027a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40027c:	3b01      	subs	r3, #1
  40027e:	d103      	bne.n	400288 <pmc_switch_mck_to_pllack+0x50>
  400280:	e009      	b.n	400296 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400282:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400286:	4905      	ldr	r1, [pc, #20]	; (40029c <pmc_switch_mck_to_pllack+0x64>)
  400288:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40028a:	f012 0f08 	tst.w	r2, #8
  40028e:	d0f5      	beq.n	40027c <pmc_switch_mck_to_pllack+0x44>
  400290:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400292:	2001      	movs	r0, #1
  400294:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400296:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400298:	4770      	bx	lr
  40029a:	bf00      	nop
  40029c:	400e0400 	.word	0x400e0400

004002a0 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4002a0:	4b11      	ldr	r3, [pc, #68]	; (4002e8 <pmc_switch_mainck_to_fastrc+0x48>)
  4002a2:	6a1a      	ldr	r2, [r3, #32]
  4002a4:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  4002a8:	f042 0208 	orr.w	r2, r2, #8
  4002ac:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4002ae:	461a      	mov	r2, r3
  4002b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4002b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4002b6:	d0fb      	beq.n	4002b0 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4002b8:	4a0b      	ldr	r2, [pc, #44]	; (4002e8 <pmc_switch_mainck_to_fastrc+0x48>)
  4002ba:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4002bc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4002c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4002c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4002c8:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4002ca:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4002cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4002ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4002d2:	d0fb      	beq.n	4002cc <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4002d4:	4a04      	ldr	r2, [pc, #16]	; (4002e8 <pmc_switch_mainck_to_fastrc+0x48>)
  4002d6:	6a13      	ldr	r3, [r2, #32]
  4002d8:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4002dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4002e0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4002e4:	6213      	str	r3, [r2, #32]
  4002e6:	4770      	bx	lr
  4002e8:	400e0400 	.word	0x400e0400

004002ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4002ec:	4b02      	ldr	r3, [pc, #8]	; (4002f8 <pmc_osc_is_ready_mainck+0xc>)
  4002ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4002f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4002f4:	4770      	bx	lr
  4002f6:	bf00      	nop
  4002f8:	400e0400 	.word	0x400e0400

004002fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4002fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400300:	4b01      	ldr	r3, [pc, #4]	; (400308 <pmc_disable_pllack+0xc>)
  400302:	629a      	str	r2, [r3, #40]	; 0x28
  400304:	4770      	bx	lr
  400306:	bf00      	nop
  400308:	400e0400 	.word	0x400e0400

0040030c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40030c:	4b02      	ldr	r3, [pc, #8]	; (400318 <pmc_is_locked_pllack+0xc>)
  40030e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400310:	f000 0002 	and.w	r0, r0, #2
  400314:	4770      	bx	lr
  400316:	bf00      	nop
  400318:	400e0400 	.word	0x400e0400

0040031c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40031c:	e7fe      	b.n	40031c <Dummy_Handler>
  40031e:	bf00      	nop

00400320 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400320:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400322:	4b20      	ldr	r3, [pc, #128]	; (4003a4 <Reset_Handler+0x84>)
  400324:	4a20      	ldr	r2, [pc, #128]	; (4003a8 <Reset_Handler+0x88>)
  400326:	429a      	cmp	r2, r3
  400328:	d912      	bls.n	400350 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  40032a:	4b20      	ldr	r3, [pc, #128]	; (4003ac <Reset_Handler+0x8c>)
  40032c:	4a1d      	ldr	r2, [pc, #116]	; (4003a4 <Reset_Handler+0x84>)
  40032e:	429a      	cmp	r2, r3
  400330:	d21e      	bcs.n	400370 <Reset_Handler+0x50>
  400332:	4611      	mov	r1, r2
  400334:	3b01      	subs	r3, #1
  400336:	1a9b      	subs	r3, r3, r2
  400338:	f023 0303 	bic.w	r3, r3, #3
  40033c:	3304      	adds	r3, #4
  40033e:	4a1a      	ldr	r2, [pc, #104]	; (4003a8 <Reset_Handler+0x88>)
  400340:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400342:	f852 0b04 	ldr.w	r0, [r2], #4
  400346:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40034a:	429a      	cmp	r2, r3
  40034c:	d1f9      	bne.n	400342 <Reset_Handler+0x22>
  40034e:	e00f      	b.n	400370 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400350:	4b14      	ldr	r3, [pc, #80]	; (4003a4 <Reset_Handler+0x84>)
  400352:	4a15      	ldr	r2, [pc, #84]	; (4003a8 <Reset_Handler+0x88>)
  400354:	429a      	cmp	r2, r3
  400356:	d20b      	bcs.n	400370 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400358:	4b14      	ldr	r3, [pc, #80]	; (4003ac <Reset_Handler+0x8c>)
  40035a:	4a12      	ldr	r2, [pc, #72]	; (4003a4 <Reset_Handler+0x84>)
  40035c:	1a9a      	subs	r2, r3, r2
  40035e:	4814      	ldr	r0, [pc, #80]	; (4003b0 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400360:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400362:	b12a      	cbz	r2, 400370 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400364:	f851 2904 	ldr.w	r2, [r1], #-4
  400368:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40036c:	4281      	cmp	r1, r0
  40036e:	d1f9      	bne.n	400364 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400370:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400372:	4b10      	ldr	r3, [pc, #64]	; (4003b4 <Reset_Handler+0x94>)
  400374:	4a10      	ldr	r2, [pc, #64]	; (4003b8 <Reset_Handler+0x98>)
  400376:	429a      	cmp	r2, r3
  400378:	d20b      	bcs.n	400392 <Reset_Handler+0x72>
  40037a:	1d13      	adds	r3, r2, #4
  40037c:	4a0f      	ldr	r2, [pc, #60]	; (4003bc <Reset_Handler+0x9c>)
  40037e:	1ad2      	subs	r2, r2, r3
  400380:	f022 0203 	bic.w	r2, r2, #3
  400384:	441a      	add	r2, r3
  400386:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400388:	2100      	movs	r1, #0
  40038a:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40038e:	429a      	cmp	r2, r3
  400390:	d1fb      	bne.n	40038a <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400392:	4b0b      	ldr	r3, [pc, #44]	; (4003c0 <Reset_Handler+0xa0>)
  400394:	4a0b      	ldr	r2, [pc, #44]	; (4003c4 <Reset_Handler+0xa4>)
  400396:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400398:	4b0b      	ldr	r3, [pc, #44]	; (4003c8 <Reset_Handler+0xa8>)
  40039a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40039c:	4b0b      	ldr	r3, [pc, #44]	; (4003cc <Reset_Handler+0xac>)
  40039e:	4798      	blx	r3
  4003a0:	e7fe      	b.n	4003a0 <Reset_Handler+0x80>
  4003a2:	bf00      	nop
  4003a4:	20000000 	.word	0x20000000
  4003a8:	004006ec 	.word	0x004006ec
  4003ac:	20000430 	.word	0x20000430
  4003b0:	004006e8 	.word	0x004006e8
  4003b4:	200004c4 	.word	0x200004c4
  4003b8:	20000430 	.word	0x20000430
  4003bc:	200004c7 	.word	0x200004c7
  4003c0:	e000ed00 	.word	0xe000ed00
  4003c4:	00400000 	.word	0x00400000
  4003c8:	00400585 	.word	0x00400585
  4003cc:	00400579 	.word	0x00400579

004003d0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4003d0:	4b3d      	ldr	r3, [pc, #244]	; (4004c8 <SystemCoreClockUpdate+0xf8>)
  4003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4003d4:	f003 0303 	and.w	r3, r3, #3
  4003d8:	2b03      	cmp	r3, #3
  4003da:	d85d      	bhi.n	400498 <SystemCoreClockUpdate+0xc8>
  4003dc:	e8df f003 	tbb	[pc, r3]
  4003e0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4003e4:	4b39      	ldr	r3, [pc, #228]	; (4004cc <SystemCoreClockUpdate+0xfc>)
  4003e6:	695b      	ldr	r3, [r3, #20]
  4003e8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4003ec:	bf14      	ite	ne
  4003ee:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4003f2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4003f6:	4b36      	ldr	r3, [pc, #216]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  4003f8:	601a      	str	r2, [r3, #0]
  4003fa:	e04d      	b.n	400498 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4003fc:	4b32      	ldr	r3, [pc, #200]	; (4004c8 <SystemCoreClockUpdate+0xf8>)
  4003fe:	6a1b      	ldr	r3, [r3, #32]
  400400:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400404:	d003      	beq.n	40040e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400406:	4a33      	ldr	r2, [pc, #204]	; (4004d4 <SystemCoreClockUpdate+0x104>)
  400408:	4b31      	ldr	r3, [pc, #196]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  40040a:	601a      	str	r2, [r3, #0]
  40040c:	e044      	b.n	400498 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40040e:	4a32      	ldr	r2, [pc, #200]	; (4004d8 <SystemCoreClockUpdate+0x108>)
  400410:	4b2f      	ldr	r3, [pc, #188]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  400412:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400414:	4b2c      	ldr	r3, [pc, #176]	; (4004c8 <SystemCoreClockUpdate+0xf8>)
  400416:	6a1b      	ldr	r3, [r3, #32]
  400418:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40041c:	2b10      	cmp	r3, #16
  40041e:	d002      	beq.n	400426 <SystemCoreClockUpdate+0x56>
  400420:	2b20      	cmp	r3, #32
  400422:	d004      	beq.n	40042e <SystemCoreClockUpdate+0x5e>
  400424:	e038      	b.n	400498 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400426:	4a2d      	ldr	r2, [pc, #180]	; (4004dc <SystemCoreClockUpdate+0x10c>)
  400428:	4b29      	ldr	r3, [pc, #164]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  40042a:	601a      	str	r2, [r3, #0]
			break;
  40042c:	e034      	b.n	400498 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40042e:	4a29      	ldr	r2, [pc, #164]	; (4004d4 <SystemCoreClockUpdate+0x104>)
  400430:	4b27      	ldr	r3, [pc, #156]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  400432:	601a      	str	r2, [r3, #0]
			break;
  400434:	e030      	b.n	400498 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400436:	4b24      	ldr	r3, [pc, #144]	; (4004c8 <SystemCoreClockUpdate+0xf8>)
  400438:	6a1b      	ldr	r3, [r3, #32]
  40043a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40043e:	d003      	beq.n	400448 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400440:	4a24      	ldr	r2, [pc, #144]	; (4004d4 <SystemCoreClockUpdate+0x104>)
  400442:	4b23      	ldr	r3, [pc, #140]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  400444:	601a      	str	r2, [r3, #0]
  400446:	e012      	b.n	40046e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400448:	4a23      	ldr	r2, [pc, #140]	; (4004d8 <SystemCoreClockUpdate+0x108>)
  40044a:	4b21      	ldr	r3, [pc, #132]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  40044c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40044e:	4b1e      	ldr	r3, [pc, #120]	; (4004c8 <SystemCoreClockUpdate+0xf8>)
  400450:	6a1b      	ldr	r3, [r3, #32]
  400452:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400456:	2b10      	cmp	r3, #16
  400458:	d002      	beq.n	400460 <SystemCoreClockUpdate+0x90>
  40045a:	2b20      	cmp	r3, #32
  40045c:	d004      	beq.n	400468 <SystemCoreClockUpdate+0x98>
  40045e:	e006      	b.n	40046e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400460:	4a1e      	ldr	r2, [pc, #120]	; (4004dc <SystemCoreClockUpdate+0x10c>)
  400462:	4b1b      	ldr	r3, [pc, #108]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  400464:	601a      	str	r2, [r3, #0]
					break;
  400466:	e002      	b.n	40046e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400468:	4a1a      	ldr	r2, [pc, #104]	; (4004d4 <SystemCoreClockUpdate+0x104>)
  40046a:	4b19      	ldr	r3, [pc, #100]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  40046c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40046e:	4b16      	ldr	r3, [pc, #88]	; (4004c8 <SystemCoreClockUpdate+0xf8>)
  400470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400472:	f003 0303 	and.w	r3, r3, #3
  400476:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400478:	4a13      	ldr	r2, [pc, #76]	; (4004c8 <SystemCoreClockUpdate+0xf8>)
  40047a:	bf07      	ittee	eq
  40047c:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40047e:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400480:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400482:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400484:	4812      	ldr	r0, [pc, #72]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  400486:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40048a:	6803      	ldr	r3, [r0, #0]
  40048c:	fb01 3303 	mla	r3, r1, r3, r3
  400490:	b2d2      	uxtb	r2, r2
  400492:	fbb3 f3f2 	udiv	r3, r3, r2
  400496:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400498:	4b0b      	ldr	r3, [pc, #44]	; (4004c8 <SystemCoreClockUpdate+0xf8>)
  40049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40049c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4004a0:	2b70      	cmp	r3, #112	; 0x70
  4004a2:	d107      	bne.n	4004b4 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4004a4:	4a0a      	ldr	r2, [pc, #40]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  4004a6:	6813      	ldr	r3, [r2, #0]
  4004a8:	490d      	ldr	r1, [pc, #52]	; (4004e0 <SystemCoreClockUpdate+0x110>)
  4004aa:	fba1 1303 	umull	r1, r3, r1, r3
  4004ae:	085b      	lsrs	r3, r3, #1
  4004b0:	6013      	str	r3, [r2, #0]
  4004b2:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4004b4:	4b04      	ldr	r3, [pc, #16]	; (4004c8 <SystemCoreClockUpdate+0xf8>)
  4004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4004b8:	4905      	ldr	r1, [pc, #20]	; (4004d0 <SystemCoreClockUpdate+0x100>)
  4004ba:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4004be:	680b      	ldr	r3, [r1, #0]
  4004c0:	40d3      	lsrs	r3, r2
  4004c2:	600b      	str	r3, [r1, #0]
  4004c4:	4770      	bx	lr
  4004c6:	bf00      	nop
  4004c8:	400e0400 	.word	0x400e0400
  4004cc:	400e1410 	.word	0x400e1410
  4004d0:	20000000 	.word	0x20000000
  4004d4:	00b71b00 	.word	0x00b71b00
  4004d8:	003d0900 	.word	0x003d0900
  4004dc:	007a1200 	.word	0x007a1200
  4004e0:	aaaaaaab 	.word	0xaaaaaaab

004004e4 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4004e4:	4b1a      	ldr	r3, [pc, #104]	; (400550 <system_init_flash+0x6c>)
  4004e6:	4298      	cmp	r0, r3
  4004e8:	d807      	bhi.n	4004fa <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4004ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  4004ee:	4a19      	ldr	r2, [pc, #100]	; (400554 <system_init_flash+0x70>)
  4004f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4004f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4004f6:	6013      	str	r3, [r2, #0]
  4004f8:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4004fa:	4b17      	ldr	r3, [pc, #92]	; (400558 <system_init_flash+0x74>)
  4004fc:	4298      	cmp	r0, r3
  4004fe:	d806      	bhi.n	40050e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400500:	4b16      	ldr	r3, [pc, #88]	; (40055c <system_init_flash+0x78>)
  400502:	4a14      	ldr	r2, [pc, #80]	; (400554 <system_init_flash+0x70>)
  400504:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400506:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40050a:	6013      	str	r3, [r2, #0]
  40050c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40050e:	4b14      	ldr	r3, [pc, #80]	; (400560 <system_init_flash+0x7c>)
  400510:	4298      	cmp	r0, r3
  400512:	d806      	bhi.n	400522 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400514:	4b13      	ldr	r3, [pc, #76]	; (400564 <system_init_flash+0x80>)
  400516:	4a0f      	ldr	r2, [pc, #60]	; (400554 <system_init_flash+0x70>)
  400518:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40051a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40051e:	6013      	str	r3, [r2, #0]
  400520:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400522:	4b11      	ldr	r3, [pc, #68]	; (400568 <system_init_flash+0x84>)
  400524:	4298      	cmp	r0, r3
  400526:	d806      	bhi.n	400536 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400528:	4b10      	ldr	r3, [pc, #64]	; (40056c <system_init_flash+0x88>)
  40052a:	4a0a      	ldr	r2, [pc, #40]	; (400554 <system_init_flash+0x70>)
  40052c:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40052e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400532:	6013      	str	r3, [r2, #0]
  400534:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400536:	4b0e      	ldr	r3, [pc, #56]	; (400570 <system_init_flash+0x8c>)
  400538:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40053a:	bf94      	ite	ls
  40053c:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400540:	4b0c      	ldrhi	r3, [pc, #48]	; (400574 <system_init_flash+0x90>)
  400542:	4a04      	ldr	r2, [pc, #16]	; (400554 <system_init_flash+0x70>)
  400544:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400546:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40054a:	6013      	str	r3, [r2, #0]
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	01312cff 	.word	0x01312cff
  400554:	400e0a00 	.word	0x400e0a00
  400558:	026259ff 	.word	0x026259ff
  40055c:	04000100 	.word	0x04000100
  400560:	039386ff 	.word	0x039386ff
  400564:	04000200 	.word	0x04000200
  400568:	04c4b3ff 	.word	0x04c4b3ff
  40056c:	04000300 	.word	0x04000300
  400570:	05f5e0ff 	.word	0x05f5e0ff
  400574:	04000500 	.word	0x04000500

00400578 <main>:
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
#include <asf.h>

int main (void)
{
  400578:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  40057a:	4b01      	ldr	r3, [pc, #4]	; (400580 <main+0x8>)
  40057c:	4798      	blx	r3
  40057e:	e7fe      	b.n	40057e <main+0x6>
  400580:	004001cd 	.word	0x004001cd

00400584 <__libc_init_array>:
  400584:	b570      	push	{r4, r5, r6, lr}
  400586:	4e0f      	ldr	r6, [pc, #60]	; (4005c4 <__libc_init_array+0x40>)
  400588:	4d0f      	ldr	r5, [pc, #60]	; (4005c8 <__libc_init_array+0x44>)
  40058a:	1b76      	subs	r6, r6, r5
  40058c:	10b6      	asrs	r6, r6, #2
  40058e:	bf18      	it	ne
  400590:	2400      	movne	r4, #0
  400592:	d005      	beq.n	4005a0 <__libc_init_array+0x1c>
  400594:	3401      	adds	r4, #1
  400596:	f855 3b04 	ldr.w	r3, [r5], #4
  40059a:	4798      	blx	r3
  40059c:	42a6      	cmp	r6, r4
  40059e:	d1f9      	bne.n	400594 <__libc_init_array+0x10>
  4005a0:	4e0a      	ldr	r6, [pc, #40]	; (4005cc <__libc_init_array+0x48>)
  4005a2:	4d0b      	ldr	r5, [pc, #44]	; (4005d0 <__libc_init_array+0x4c>)
  4005a4:	1b76      	subs	r6, r6, r5
  4005a6:	f000 f88f 	bl	4006c8 <_init>
  4005aa:	10b6      	asrs	r6, r6, #2
  4005ac:	bf18      	it	ne
  4005ae:	2400      	movne	r4, #0
  4005b0:	d006      	beq.n	4005c0 <__libc_init_array+0x3c>
  4005b2:	3401      	adds	r4, #1
  4005b4:	f855 3b04 	ldr.w	r3, [r5], #4
  4005b8:	4798      	blx	r3
  4005ba:	42a6      	cmp	r6, r4
  4005bc:	d1f9      	bne.n	4005b2 <__libc_init_array+0x2e>
  4005be:	bd70      	pop	{r4, r5, r6, pc}
  4005c0:	bd70      	pop	{r4, r5, r6, pc}
  4005c2:	bf00      	nop
  4005c4:	004006d4 	.word	0x004006d4
  4005c8:	004006d4 	.word	0x004006d4
  4005cc:	004006dc 	.word	0x004006dc
  4005d0:	004006d4 	.word	0x004006d4

004005d4 <register_fini>:
  4005d4:	4b02      	ldr	r3, [pc, #8]	; (4005e0 <register_fini+0xc>)
  4005d6:	b113      	cbz	r3, 4005de <register_fini+0xa>
  4005d8:	4802      	ldr	r0, [pc, #8]	; (4005e4 <register_fini+0x10>)
  4005da:	f000 b805 	b.w	4005e8 <atexit>
  4005de:	4770      	bx	lr
  4005e0:	00000000 	.word	0x00000000
  4005e4:	004005f5 	.word	0x004005f5

004005e8 <atexit>:
  4005e8:	2300      	movs	r3, #0
  4005ea:	4601      	mov	r1, r0
  4005ec:	461a      	mov	r2, r3
  4005ee:	4618      	mov	r0, r3
  4005f0:	f000 b814 	b.w	40061c <__register_exitproc>

004005f4 <__libc_fini_array>:
  4005f4:	b538      	push	{r3, r4, r5, lr}
  4005f6:	4d07      	ldr	r5, [pc, #28]	; (400614 <__libc_fini_array+0x20>)
  4005f8:	4c07      	ldr	r4, [pc, #28]	; (400618 <__libc_fini_array+0x24>)
  4005fa:	1b2c      	subs	r4, r5, r4
  4005fc:	10a4      	asrs	r4, r4, #2
  4005fe:	d005      	beq.n	40060c <__libc_fini_array+0x18>
  400600:	3c01      	subs	r4, #1
  400602:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400606:	4798      	blx	r3
  400608:	2c00      	cmp	r4, #0
  40060a:	d1f9      	bne.n	400600 <__libc_fini_array+0xc>
  40060c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400610:	f000 b864 	b.w	4006dc <_fini>
  400614:	004006ec 	.word	0x004006ec
  400618:	004006e8 	.word	0x004006e8

0040061c <__register_exitproc>:
  40061c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400620:	4c25      	ldr	r4, [pc, #148]	; (4006b8 <__register_exitproc+0x9c>)
  400622:	6825      	ldr	r5, [r4, #0]
  400624:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400628:	4606      	mov	r6, r0
  40062a:	4688      	mov	r8, r1
  40062c:	4692      	mov	sl, r2
  40062e:	4699      	mov	r9, r3
  400630:	b3c4      	cbz	r4, 4006a4 <__register_exitproc+0x88>
  400632:	6860      	ldr	r0, [r4, #4]
  400634:	281f      	cmp	r0, #31
  400636:	dc17      	bgt.n	400668 <__register_exitproc+0x4c>
  400638:	1c43      	adds	r3, r0, #1
  40063a:	b176      	cbz	r6, 40065a <__register_exitproc+0x3e>
  40063c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400640:	2201      	movs	r2, #1
  400642:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400646:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40064a:	4082      	lsls	r2, r0
  40064c:	4311      	orrs	r1, r2
  40064e:	2e02      	cmp	r6, #2
  400650:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400654:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400658:	d01e      	beq.n	400698 <__register_exitproc+0x7c>
  40065a:	3002      	adds	r0, #2
  40065c:	6063      	str	r3, [r4, #4]
  40065e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400662:	2000      	movs	r0, #0
  400664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400668:	4b14      	ldr	r3, [pc, #80]	; (4006bc <__register_exitproc+0xa0>)
  40066a:	b303      	cbz	r3, 4006ae <__register_exitproc+0x92>
  40066c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400670:	f3af 8000 	nop.w
  400674:	4604      	mov	r4, r0
  400676:	b1d0      	cbz	r0, 4006ae <__register_exitproc+0x92>
  400678:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40067c:	2700      	movs	r7, #0
  40067e:	e880 0088 	stmia.w	r0, {r3, r7}
  400682:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400686:	4638      	mov	r0, r7
  400688:	2301      	movs	r3, #1
  40068a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40068e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400692:	2e00      	cmp	r6, #0
  400694:	d0e1      	beq.n	40065a <__register_exitproc+0x3e>
  400696:	e7d1      	b.n	40063c <__register_exitproc+0x20>
  400698:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40069c:	430a      	orrs	r2, r1
  40069e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4006a2:	e7da      	b.n	40065a <__register_exitproc+0x3e>
  4006a4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4006a8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4006ac:	e7c1      	b.n	400632 <__register_exitproc+0x16>
  4006ae:	f04f 30ff 	mov.w	r0, #4294967295
  4006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006b6:	bf00      	nop
  4006b8:	004006c4 	.word	0x004006c4
  4006bc:	00000000 	.word	0x00000000
  4006c0:	00000043 	.word	0x00000043

004006c4 <_global_impure_ptr>:
  4006c4:	20000008                                ... 

004006c8 <_init>:
  4006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006ca:	bf00      	nop
  4006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4006ce:	bc08      	pop	{r3}
  4006d0:	469e      	mov	lr, r3
  4006d2:	4770      	bx	lr

004006d4 <__init_array_start>:
  4006d4:	004005d5 	.word	0x004005d5

004006d8 <__frame_dummy_init_array_entry>:
  4006d8:	004000f1                                ..@.

004006dc <_fini>:
  4006dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006de:	bf00      	nop
  4006e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4006e2:	bc08      	pop	{r3}
  4006e4:	469e      	mov	lr, r3
  4006e6:	4770      	bx	lr

004006e8 <__fini_array_start>:
  4006e8:	004000cd 	.word	0x004000cd
