
SAMSEPIOMOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003334  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00403334  00403334  00013334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000438  20000000  0040333c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000f4  20000438  00403774  00020438  2**2
                  ALLOC
  4 .stack        00003004  2000052c  00403868  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  7 .debug_info   000087c5  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000174b  00000000  00000000  00028c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005b9e  00000000  00000000  0002a3cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a20  00000000  00000000  0002ff69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000930  00000000  00000000  00030989  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013911  00000000  00000000  000312b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c6ad  00000000  00000000  00044bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004f122  00000000  00000000  00051277  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002b78  00000000  00000000  000a039c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003530 	.word	0x20003530
  400004:	00401f51 	.word	0x00401f51
  400008:	00402019 	.word	0x00402019
  40000c:	00402019 	.word	0x00402019
  400010:	00402019 	.word	0x00402019
  400014:	00402019 	.word	0x00402019
  400018:	00402019 	.word	0x00402019
	...
  40002c:	00402019 	.word	0x00402019
  400030:	00402019 	.word	0x00402019
  400034:	00000000 	.word	0x00000000
  400038:	00402019 	.word	0x00402019
  40003c:	00402019 	.word	0x00402019
  400040:	00402019 	.word	0x00402019
  400044:	00402019 	.word	0x00402019
  400048:	00402019 	.word	0x00402019
  40004c:	00402019 	.word	0x00402019
  400050:	00402019 	.word	0x00402019
  400054:	00402019 	.word	0x00402019
  400058:	00402019 	.word	0x00402019
  40005c:	00402019 	.word	0x00402019
  400060:	00402019 	.word	0x00402019
  400064:	00402019 	.word	0x00402019
  400068:	00000000 	.word	0x00000000
  40006c:	00401111 	.word	0x00401111
  400070:	00401129 	.word	0x00401129
  400074:	00401141 	.word	0x00401141
  400078:	00402019 	.word	0x00402019
  40007c:	00400f29 	.word	0x00400f29
	...
  400088:	00402019 	.word	0x00402019
  40008c:	00402019 	.word	0x00402019
  400090:	00402019 	.word	0x00402019
  400094:	00402019 	.word	0x00402019
  400098:	00402019 	.word	0x00402019
  40009c:	00402019 	.word	0x00402019
  4000a0:	00402019 	.word	0x00402019
  4000a4:	00402019 	.word	0x00402019
  4000a8:	00402019 	.word	0x00402019
  4000ac:	00402019 	.word	0x00402019
  4000b0:	00402019 	.word	0x00402019
  4000b4:	00402019 	.word	0x00402019
  4000b8:	00402019 	.word	0x00402019
  4000bc:	00402019 	.word	0x00402019
  4000c0:	00402019 	.word	0x00402019
  4000c4:	00402019 	.word	0x00402019
  4000c8:	00402019 	.word	0x00402019

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000438 	.word	0x20000438
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040333c 	.word	0x0040333c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	2000043c 	.word	0x2000043c
  40011c:	0040333c 	.word	0x0040333c
  400120:	0040333c 	.word	0x0040333c
  400124:	00000000 	.word	0x00000000

00400128 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  400128:	b480      	push	{r7}
  40012a:	b083      	sub	sp, #12
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	2208      	movs	r2, #8
  400134:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400136:	687b      	ldr	r3, [r7, #4]
  400138:	2220      	movs	r2, #32
  40013a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  40013c:	687b      	ldr	r3, [r7, #4]
  40013e:	2204      	movs	r2, #4
  400140:	601a      	str	r2, [r3, #0]
}
  400142:	bf00      	nop
  400144:	370c      	adds	r7, #12
  400146:	46bd      	mov	sp, r7
  400148:	bc80      	pop	{r7}
  40014a:	4770      	bx	lr

0040014c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  40014c:	b580      	push	{r7, lr}
  40014e:	b084      	sub	sp, #16
  400150:	af00      	add	r7, sp, #0
  400152:	6078      	str	r0, [r7, #4]
  400154:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  400156:	2300      	movs	r3, #0
  400158:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40015a:	687b      	ldr	r3, [r7, #4]
  40015c:	f04f 32ff 	mov.w	r2, #4294967295
  400160:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400162:	687b      	ldr	r3, [r7, #4]
  400164:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  400166:	6878      	ldr	r0, [r7, #4]
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <twi_master_init+0x58>)
  40016a:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  40016c:	6878      	ldr	r0, [r7, #4]
  40016e:	4b0e      	ldr	r3, [pc, #56]	; (4001a8 <twi_master_init+0x5c>)
  400170:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400172:	683b      	ldr	r3, [r7, #0]
  400174:	6859      	ldr	r1, [r3, #4]
  400176:	683b      	ldr	r3, [r7, #0]
  400178:	681b      	ldr	r3, [r3, #0]
  40017a:	461a      	mov	r2, r3
  40017c:	6878      	ldr	r0, [r7, #4]
  40017e:	4b0b      	ldr	r3, [pc, #44]	; (4001ac <twi_master_init+0x60>)
  400180:	4798      	blx	r3
  400182:	4603      	mov	r3, r0
  400184:	2b01      	cmp	r3, #1
  400186:	d101      	bne.n	40018c <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  400188:	2301      	movs	r3, #1
  40018a:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  40018c:	683b      	ldr	r3, [r7, #0]
  40018e:	7a5b      	ldrb	r3, [r3, #9]
  400190:	2b01      	cmp	r3, #1
  400192:	d102      	bne.n	40019a <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  400194:	687b      	ldr	r3, [r7, #4]
  400196:	2240      	movs	r2, #64	; 0x40
  400198:	601a      	str	r2, [r3, #0]
	}

	return status;
  40019a:	68fb      	ldr	r3, [r7, #12]
}
  40019c:	4618      	mov	r0, r3
  40019e:	3710      	adds	r7, #16
  4001a0:	46bd      	mov	sp, r7
  4001a2:	bd80      	pop	{r7, pc}
  4001a4:	004004e9 	.word	0x004004e9
  4001a8:	00400129 	.word	0x00400129
  4001ac:	004001b1 	.word	0x004001b1

004001b0 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4001b0:	b480      	push	{r7}
  4001b2:	b089      	sub	sp, #36	; 0x24
  4001b4:	af00      	add	r7, sp, #0
  4001b6:	60f8      	str	r0, [r7, #12]
  4001b8:	60b9      	str	r1, [r7, #8]
  4001ba:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  4001bc:	2300      	movs	r3, #0
  4001be:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4001c0:	68bb      	ldr	r3, [r7, #8]
  4001c2:	4a34      	ldr	r2, [pc, #208]	; (400294 <twi_set_speed+0xe4>)
  4001c4:	4293      	cmp	r3, r2
  4001c6:	d901      	bls.n	4001cc <twi_set_speed+0x1c>
		return FAIL;
  4001c8:	2301      	movs	r3, #1
  4001ca:	e05d      	b.n	400288 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4001cc:	68bb      	ldr	r3, [r7, #8]
  4001ce:	4a32      	ldr	r2, [pc, #200]	; (400298 <twi_set_speed+0xe8>)
  4001d0:	4293      	cmp	r3, r2
  4001d2:	d937      	bls.n	400244 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4001d4:	687b      	ldr	r3, [r7, #4]
  4001d6:	4a31      	ldr	r2, [pc, #196]	; (40029c <twi_set_speed+0xec>)
  4001d8:	fba2 2303 	umull	r2, r3, r2, r3
  4001dc:	0b9b      	lsrs	r3, r3, #14
  4001de:	3b04      	subs	r3, #4
  4001e0:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4001e2:	68ba      	ldr	r2, [r7, #8]
  4001e4:	4b2e      	ldr	r3, [pc, #184]	; (4002a0 <twi_set_speed+0xf0>)
  4001e6:	4413      	add	r3, r2
  4001e8:	009b      	lsls	r3, r3, #2
  4001ea:	687a      	ldr	r2, [r7, #4]
  4001ec:	fbb2 f3f3 	udiv	r3, r2, r3
  4001f0:	3b04      	subs	r3, #4
  4001f2:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4001f4:	e005      	b.n	400202 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  4001f6:	69fb      	ldr	r3, [r7, #28]
  4001f8:	3301      	adds	r3, #1
  4001fa:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4001fc:	697b      	ldr	r3, [r7, #20]
  4001fe:	085b      	lsrs	r3, r3, #1
  400200:	617b      	str	r3, [r7, #20]
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400202:	697b      	ldr	r3, [r7, #20]
  400204:	2bff      	cmp	r3, #255	; 0xff
  400206:	d909      	bls.n	40021c <twi_set_speed+0x6c>
  400208:	69fb      	ldr	r3, [r7, #28]
  40020a:	2b06      	cmp	r3, #6
  40020c:	d9f3      	bls.n	4001f6 <twi_set_speed+0x46>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40020e:	e005      	b.n	40021c <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  400210:	69fb      	ldr	r3, [r7, #28]
  400212:	3301      	adds	r3, #1
  400214:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  400216:	693b      	ldr	r3, [r7, #16]
  400218:	085b      	lsrs	r3, r3, #1
  40021a:	613b      	str	r3, [r7, #16]
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40021c:	693b      	ldr	r3, [r7, #16]
  40021e:	2bff      	cmp	r3, #255	; 0xff
  400220:	d902      	bls.n	400228 <twi_set_speed+0x78>
  400222:	69fb      	ldr	r3, [r7, #28]
  400224:	2b06      	cmp	r3, #6
  400226:	d9f3      	bls.n	400210 <twi_set_speed+0x60>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400228:	697b      	ldr	r3, [r7, #20]
  40022a:	b2da      	uxtb	r2, r3
  40022c:	693b      	ldr	r3, [r7, #16]
  40022e:	021b      	lsls	r3, r3, #8
  400230:	b29b      	uxth	r3, r3
  400232:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  400234:	69fb      	ldr	r3, [r7, #28]
  400236:	041b      	lsls	r3, r3, #16
  400238:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  40023c:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  40023e:	68fb      	ldr	r3, [r7, #12]
  400240:	611a      	str	r2, [r3, #16]
  400242:	e020      	b.n	400286 <twi_set_speed+0xd6>
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400244:	68bb      	ldr	r3, [r7, #8]
  400246:	005b      	lsls	r3, r3, #1
  400248:	687a      	ldr	r2, [r7, #4]
  40024a:	fbb2 f3f3 	udiv	r3, r2, r3
  40024e:	3b04      	subs	r3, #4
  400250:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400252:	e005      	b.n	400260 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  400254:	69fb      	ldr	r3, [r7, #28]
  400256:	3301      	adds	r3, #1
  400258:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  40025a:	69bb      	ldr	r3, [r7, #24]
  40025c:	085b      	lsrs	r3, r3, #1
  40025e:	61bb      	str	r3, [r7, #24]
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400260:	69bb      	ldr	r3, [r7, #24]
  400262:	2bff      	cmp	r3, #255	; 0xff
  400264:	d902      	bls.n	40026c <twi_set_speed+0xbc>
  400266:	69fb      	ldr	r3, [r7, #28]
  400268:	2b06      	cmp	r3, #6
  40026a:	d9f3      	bls.n	400254 <twi_set_speed+0xa4>
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40026c:	69bb      	ldr	r3, [r7, #24]
  40026e:	b2da      	uxtb	r2, r3
  400270:	69bb      	ldr	r3, [r7, #24]
  400272:	021b      	lsls	r3, r3, #8
  400274:	b29b      	uxth	r3, r3
  400276:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  400278:	69fb      	ldr	r3, [r7, #28]
  40027a:	041b      	lsls	r3, r3, #16
  40027c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400280:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400282:	68fb      	ldr	r3, [r7, #12]
  400284:	611a      	str	r2, [r3, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400286:	2300      	movs	r3, #0
}
  400288:	4618      	mov	r0, r3
  40028a:	3724      	adds	r7, #36	; 0x24
  40028c:	46bd      	mov	sp, r7
  40028e:	bc80      	pop	{r7}
  400290:	4770      	bx	lr
  400292:	bf00      	nop
  400294:	00061a80 	.word	0x00061a80
  400298:	0005dc00 	.word	0x0005dc00
  40029c:	057619f1 	.word	0x057619f1
  4002a0:	3ffd1200 	.word	0x3ffd1200

004002a4 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b085      	sub	sp, #20
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
  4002ac:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  4002ae:	683b      	ldr	r3, [r7, #0]
  4002b0:	2b00      	cmp	r3, #0
  4002b2:	d101      	bne.n	4002b8 <twi_mk_addr+0x14>
		return 0;
  4002b4:	2300      	movs	r3, #0
  4002b6:	e01d      	b.n	4002f4 <twi_mk_addr+0x50>

	val = addr[0];
  4002b8:	687b      	ldr	r3, [r7, #4]
  4002ba:	781b      	ldrb	r3, [r3, #0]
  4002bc:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  4002be:	683b      	ldr	r3, [r7, #0]
  4002c0:	2b01      	cmp	r3, #1
  4002c2:	dd09      	ble.n	4002d8 <twi_mk_addr+0x34>
		val <<= 8;
  4002c4:	68fb      	ldr	r3, [r7, #12]
  4002c6:	021b      	lsls	r3, r3, #8
  4002c8:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	3301      	adds	r3, #1
  4002ce:	781b      	ldrb	r3, [r3, #0]
  4002d0:	461a      	mov	r2, r3
  4002d2:	68fb      	ldr	r3, [r7, #12]
  4002d4:	4313      	orrs	r3, r2
  4002d6:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4002d8:	683b      	ldr	r3, [r7, #0]
  4002da:	2b02      	cmp	r3, #2
  4002dc:	dd09      	ble.n	4002f2 <twi_mk_addr+0x4e>
		val <<= 8;
  4002de:	68fb      	ldr	r3, [r7, #12]
  4002e0:	021b      	lsls	r3, r3, #8
  4002e2:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4002e4:	687b      	ldr	r3, [r7, #4]
  4002e6:	3302      	adds	r3, #2
  4002e8:	781b      	ldrb	r3, [r3, #0]
  4002ea:	461a      	mov	r2, r3
  4002ec:	68fb      	ldr	r3, [r7, #12]
  4002ee:	4313      	orrs	r3, r2
  4002f0:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4002f2:	68fb      	ldr	r3, [r7, #12]
}
  4002f4:	4618      	mov	r0, r3
  4002f6:	3714      	adds	r7, #20
  4002f8:	46bd      	mov	sp, r7
  4002fa:	bc80      	pop	{r7}
  4002fc:	4770      	bx	lr
  4002fe:	bf00      	nop

00400300 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400300:	b580      	push	{r7, lr}
  400302:	b088      	sub	sp, #32
  400304:	af00      	add	r7, sp, #0
  400306:	6078      	str	r0, [r7, #4]
  400308:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40030a:	683b      	ldr	r3, [r7, #0]
  40030c:	68db      	ldr	r3, [r3, #12]
  40030e:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  400310:	683b      	ldr	r3, [r7, #0]
  400312:	689b      	ldr	r3, [r3, #8]
  400314:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  400316:	2300      	movs	r3, #0
  400318:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  40031a:	f247 5330 	movw	r3, #30000	; 0x7530
  40031e:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  400320:	69fb      	ldr	r3, [r7, #28]
  400322:	2b00      	cmp	r3, #0
  400324:	d101      	bne.n	40032a <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  400326:	2301      	movs	r3, #1
  400328:	e069      	b.n	4003fe <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40032a:	687b      	ldr	r3, [r7, #4]
  40032c:	2200      	movs	r2, #0
  40032e:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400330:	683b      	ldr	r3, [r7, #0]
  400332:	7c1b      	ldrb	r3, [r3, #16]
  400334:	041b      	lsls	r3, r3, #16
  400336:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  40033a:	683b      	ldr	r3, [r7, #0]
  40033c:	685b      	ldr	r3, [r3, #4]
  40033e:	021b      	lsls	r3, r3, #8
  400340:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400344:	4313      	orrs	r3, r2
  400346:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  40034a:	687b      	ldr	r3, [r7, #4]
  40034c:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40034e:	687b      	ldr	r3, [r7, #4]
  400350:	2200      	movs	r2, #0
  400352:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400354:	683a      	ldr	r2, [r7, #0]
  400356:	683b      	ldr	r3, [r7, #0]
  400358:	685b      	ldr	r3, [r3, #4]
  40035a:	4619      	mov	r1, r3
  40035c:	4610      	mov	r0, r2
  40035e:	4b2a      	ldr	r3, [pc, #168]	; (400408 <twi_master_read+0x108>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400368:	69fb      	ldr	r3, [r7, #28]
  40036a:	2b01      	cmp	r3, #1
  40036c:	d105      	bne.n	40037a <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40036e:	687b      	ldr	r3, [r7, #4]
  400370:	2203      	movs	r2, #3
  400372:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  400374:	2301      	movs	r3, #1
  400376:	75fb      	strb	r3, [r7, #23]
  400378:	e034      	b.n	4003e4 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40037a:	687b      	ldr	r3, [r7, #4]
  40037c:	2201      	movs	r2, #1
  40037e:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  400380:	2300      	movs	r3, #0
  400382:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  400384:	e02e      	b.n	4003e4 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  400386:	687b      	ldr	r3, [r7, #4]
  400388:	6a1b      	ldr	r3, [r3, #32]
  40038a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40038c:	68fb      	ldr	r3, [r7, #12]
  40038e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400392:	2b00      	cmp	r3, #0
  400394:	d001      	beq.n	40039a <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  400396:	2305      	movs	r3, #5
  400398:	e031      	b.n	4003fe <twi_master_read+0xfe>
		}

		if (!timeout--) {
  40039a:	693b      	ldr	r3, [r7, #16]
  40039c:	1e5a      	subs	r2, r3, #1
  40039e:	613a      	str	r2, [r7, #16]
  4003a0:	2b00      	cmp	r3, #0
  4003a2:	d101      	bne.n	4003a8 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  4003a4:	2309      	movs	r3, #9
  4003a6:	e02a      	b.n	4003fe <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4003a8:	69fb      	ldr	r3, [r7, #28]
  4003aa:	2b01      	cmp	r3, #1
  4003ac:	d107      	bne.n	4003be <twi_master_read+0xbe>
  4003ae:	7dfb      	ldrb	r3, [r7, #23]
  4003b0:	2b00      	cmp	r3, #0
  4003b2:	d104      	bne.n	4003be <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  4003b4:	687b      	ldr	r3, [r7, #4]
  4003b6:	2202      	movs	r2, #2
  4003b8:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  4003ba:	2301      	movs	r3, #1
  4003bc:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  4003be:	68fb      	ldr	r3, [r7, #12]
  4003c0:	f003 0302 	and.w	r3, r3, #2
  4003c4:	2b00      	cmp	r3, #0
  4003c6:	d100      	bne.n	4003ca <twi_master_read+0xca>
			continue;
  4003c8:	e00c      	b.n	4003e4 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  4003ca:	69bb      	ldr	r3, [r7, #24]
  4003cc:	1c5a      	adds	r2, r3, #1
  4003ce:	61ba      	str	r2, [r7, #24]
  4003d0:	687a      	ldr	r2, [r7, #4]
  4003d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4003d4:	b2d2      	uxtb	r2, r2
  4003d6:	701a      	strb	r2, [r3, #0]

		cnt--;
  4003d8:	69fb      	ldr	r3, [r7, #28]
  4003da:	3b01      	subs	r3, #1
  4003dc:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  4003de:	f247 5330 	movw	r3, #30000	; 0x7530
  4003e2:	613b      	str	r3, [r7, #16]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4003e4:	69fb      	ldr	r3, [r7, #28]
  4003e6:	2b00      	cmp	r3, #0
  4003e8:	d1cd      	bne.n	400386 <twi_master_read+0x86>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4003ea:	bf00      	nop
  4003ec:	687b      	ldr	r3, [r7, #4]
  4003ee:	6a1b      	ldr	r3, [r3, #32]
  4003f0:	f003 0301 	and.w	r3, r3, #1
  4003f4:	2b00      	cmp	r3, #0
  4003f6:	d0f9      	beq.n	4003ec <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  4003fc:	2300      	movs	r3, #0
}
  4003fe:	4618      	mov	r0, r3
  400400:	3720      	adds	r7, #32
  400402:	46bd      	mov	sp, r7
  400404:	bd80      	pop	{r7, pc}
  400406:	bf00      	nop
  400408:	004002a5 	.word	0x004002a5

0040040c <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b086      	sub	sp, #24
  400410:	af00      	add	r7, sp, #0
  400412:	6078      	str	r0, [r7, #4]
  400414:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400416:	683b      	ldr	r3, [r7, #0]
  400418:	68db      	ldr	r3, [r3, #12]
  40041a:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  40041c:	683b      	ldr	r3, [r7, #0]
  40041e:	689b      	ldr	r3, [r3, #8]
  400420:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  400422:	697b      	ldr	r3, [r7, #20]
  400424:	2b00      	cmp	r3, #0
  400426:	d101      	bne.n	40042c <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  400428:	2301      	movs	r3, #1
  40042a:	e056      	b.n	4004da <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40042c:	687b      	ldr	r3, [r7, #4]
  40042e:	2200      	movs	r2, #0
  400430:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400432:	683b      	ldr	r3, [r7, #0]
  400434:	7c1b      	ldrb	r3, [r3, #16]
  400436:	041b      	lsls	r3, r3, #16
  400438:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  40043c:	683b      	ldr	r3, [r7, #0]
  40043e:	685b      	ldr	r3, [r3, #4]
  400440:	021b      	lsls	r3, r3, #8
  400442:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400446:	431a      	orrs	r2, r3
  400448:	687b      	ldr	r3, [r7, #4]
  40044a:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40044c:	687b      	ldr	r3, [r7, #4]
  40044e:	2200      	movs	r2, #0
  400450:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400452:	683a      	ldr	r2, [r7, #0]
  400454:	683b      	ldr	r3, [r7, #0]
  400456:	685b      	ldr	r3, [r3, #4]
  400458:	4619      	mov	r1, r3
  40045a:	4610      	mov	r0, r2
  40045c:	4b21      	ldr	r3, [pc, #132]	; (4004e4 <twi_master_write+0xd8>)
  40045e:	4798      	blx	r3
  400460:	4602      	mov	r2, r0
  400462:	687b      	ldr	r3, [r7, #4]
  400464:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  400466:	e019      	b.n	40049c <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  400468:	687b      	ldr	r3, [r7, #4]
  40046a:	6a1b      	ldr	r3, [r3, #32]
  40046c:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40046e:	68fb      	ldr	r3, [r7, #12]
  400470:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400474:	2b00      	cmp	r3, #0
  400476:	d001      	beq.n	40047c <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  400478:	2305      	movs	r3, #5
  40047a:	e02e      	b.n	4004da <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  40047c:	68fb      	ldr	r3, [r7, #12]
  40047e:	f003 0304 	and.w	r3, r3, #4
  400482:	2b00      	cmp	r3, #0
  400484:	d100      	bne.n	400488 <twi_master_write+0x7c>
			continue;
  400486:	e009      	b.n	40049c <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  400488:	693b      	ldr	r3, [r7, #16]
  40048a:	1c5a      	adds	r2, r3, #1
  40048c:	613a      	str	r2, [r7, #16]
  40048e:	781b      	ldrb	r3, [r3, #0]
  400490:	461a      	mov	r2, r3
  400492:	687b      	ldr	r3, [r7, #4]
  400494:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  400496:	697b      	ldr	r3, [r7, #20]
  400498:	3b01      	subs	r3, #1
  40049a:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40049c:	697b      	ldr	r3, [r7, #20]
  40049e:	2b00      	cmp	r3, #0
  4004a0:	d1e2      	bne.n	400468 <twi_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  4004a2:	687b      	ldr	r3, [r7, #4]
  4004a4:	6a1b      	ldr	r3, [r3, #32]
  4004a6:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4004a8:	68fb      	ldr	r3, [r7, #12]
  4004aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4004ae:	2b00      	cmp	r3, #0
  4004b0:	d001      	beq.n	4004b6 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  4004b2:	2305      	movs	r3, #5
  4004b4:	e011      	b.n	4004da <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  4004b6:	68fb      	ldr	r3, [r7, #12]
  4004b8:	f003 0304 	and.w	r3, r3, #4
  4004bc:	2b00      	cmp	r3, #0
  4004be:	d100      	bne.n	4004c2 <twi_master_write+0xb6>
			break;
		}
	}
  4004c0:	e7ef      	b.n	4004a2 <twi_master_write+0x96>
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
  4004c2:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4004c4:	687b      	ldr	r3, [r7, #4]
  4004c6:	2202      	movs	r2, #2
  4004c8:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4004ca:	bf00      	nop
  4004cc:	687b      	ldr	r3, [r7, #4]
  4004ce:	6a1b      	ldr	r3, [r3, #32]
  4004d0:	f003 0301 	and.w	r3, r3, #1
  4004d4:	2b00      	cmp	r3, #0
  4004d6:	d0f9      	beq.n	4004cc <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  4004d8:	2300      	movs	r3, #0
}
  4004da:	4618      	mov	r0, r3
  4004dc:	3718      	adds	r7, #24
  4004de:	46bd      	mov	sp, r7
  4004e0:	bd80      	pop	{r7, pc}
  4004e2:	bf00      	nop
  4004e4:	004002a5 	.word	0x004002a5

004004e8 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  4004e8:	b480      	push	{r7}
  4004ea:	b083      	sub	sp, #12
  4004ec:	af00      	add	r7, sp, #0
  4004ee:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4004f0:	687b      	ldr	r3, [r7, #4]
  4004f2:	2280      	movs	r2, #128	; 0x80
  4004f4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  4004f6:	687b      	ldr	r3, [r7, #4]
  4004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4004fa:	bf00      	nop
  4004fc:	370c      	adds	r7, #12
  4004fe:	46bd      	mov	sp, r7
  400500:	bc80      	pop	{r7}
  400502:	4770      	bx	lr

00400504 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400504:	b480      	push	{r7}
  400506:	b089      	sub	sp, #36	; 0x24
  400508:	af00      	add	r7, sp, #0
  40050a:	60f8      	str	r0, [r7, #12]
  40050c:	60b9      	str	r1, [r7, #8]
  40050e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400510:	68bb      	ldr	r3, [r7, #8]
  400512:	011a      	lsls	r2, r3, #4
  400514:	687b      	ldr	r3, [r7, #4]
  400516:	429a      	cmp	r2, r3
  400518:	d802      	bhi.n	400520 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40051a:	2310      	movs	r3, #16
  40051c:	61fb      	str	r3, [r7, #28]
  40051e:	e001      	b.n	400524 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400520:	2308      	movs	r3, #8
  400522:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400524:	687b      	ldr	r3, [r7, #4]
  400526:	00da      	lsls	r2, r3, #3
  400528:	69fb      	ldr	r3, [r7, #28]
  40052a:	68b9      	ldr	r1, [r7, #8]
  40052c:	fb01 f303 	mul.w	r3, r1, r3
  400530:	085b      	lsrs	r3, r3, #1
  400532:	441a      	add	r2, r3
  400534:	69fb      	ldr	r3, [r7, #28]
  400536:	68b9      	ldr	r1, [r7, #8]
  400538:	fb01 f303 	mul.w	r3, r1, r3
  40053c:	fbb2 f3f3 	udiv	r3, r2, r3
  400540:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400542:	69bb      	ldr	r3, [r7, #24]
  400544:	08db      	lsrs	r3, r3, #3
  400546:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400548:	69bb      	ldr	r3, [r7, #24]
  40054a:	f003 0307 	and.w	r3, r3, #7
  40054e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400550:	697b      	ldr	r3, [r7, #20]
  400552:	2b00      	cmp	r3, #0
  400554:	d003      	beq.n	40055e <usart_set_async_baudrate+0x5a>
  400556:	697b      	ldr	r3, [r7, #20]
  400558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40055c:	d301      	bcc.n	400562 <usart_set_async_baudrate+0x5e>
		return 1;
  40055e:	2301      	movs	r3, #1
  400560:	e00f      	b.n	400582 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400562:	69fb      	ldr	r3, [r7, #28]
  400564:	2b08      	cmp	r3, #8
  400566:	d105      	bne.n	400574 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400568:	68fb      	ldr	r3, [r7, #12]
  40056a:	685b      	ldr	r3, [r3, #4]
  40056c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400570:	68fb      	ldr	r3, [r7, #12]
  400572:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400574:	693b      	ldr	r3, [r7, #16]
  400576:	041a      	lsls	r2, r3, #16
  400578:	697b      	ldr	r3, [r7, #20]
  40057a:	431a      	orrs	r2, r3
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	621a      	str	r2, [r3, #32]

	return 0;
  400580:	2300      	movs	r3, #0
}
  400582:	4618      	mov	r0, r3
  400584:	3724      	adds	r7, #36	; 0x24
  400586:	46bd      	mov	sp, r7
  400588:	bc80      	pop	{r7}
  40058a:	4770      	bx	lr

0040058c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40058c:	b580      	push	{r7, lr}
  40058e:	b082      	sub	sp, #8
  400590:	af00      	add	r7, sp, #0
  400592:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400594:	6878      	ldr	r0, [r7, #4]
  400596:	4b0f      	ldr	r3, [pc, #60]	; (4005d4 <usart_reset+0x48>)
  400598:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40059a:	687b      	ldr	r3, [r7, #4]
  40059c:	2200      	movs	r2, #0
  40059e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	2200      	movs	r2, #0
  4005a4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4005a6:	687b      	ldr	r3, [r7, #4]
  4005a8:	2200      	movs	r2, #0
  4005aa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4005ac:	6878      	ldr	r0, [r7, #4]
  4005ae:	4b0a      	ldr	r3, [pc, #40]	; (4005d8 <usart_reset+0x4c>)
  4005b0:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4005b2:	6878      	ldr	r0, [r7, #4]
  4005b4:	4b09      	ldr	r3, [pc, #36]	; (4005dc <usart_reset+0x50>)
  4005b6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4005b8:	6878      	ldr	r0, [r7, #4]
  4005ba:	4b09      	ldr	r3, [pc, #36]	; (4005e0 <usart_reset+0x54>)
  4005bc:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4005be:	6878      	ldr	r0, [r7, #4]
  4005c0:	4b08      	ldr	r3, [pc, #32]	; (4005e4 <usart_reset+0x58>)
  4005c2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4005c4:	6878      	ldr	r0, [r7, #4]
  4005c6:	4b08      	ldr	r3, [pc, #32]	; (4005e8 <usart_reset+0x5c>)
  4005c8:	4798      	blx	r3
#endif
}
  4005ca:	bf00      	nop
  4005cc:	3708      	adds	r7, #8
  4005ce:	46bd      	mov	sp, r7
  4005d0:	bd80      	pop	{r7, pc}
  4005d2:	bf00      	nop
  4005d4:	00400811 	.word	0x00400811
  4005d8:	004006e1 	.word	0x004006e1
  4005dc:	00400729 	.word	0x00400729
  4005e0:	00400775 	.word	0x00400775
  4005e4:	004007ad 	.word	0x004007ad
  4005e8:	00400791 	.word	0x00400791

004005ec <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4005ec:	b580      	push	{r7, lr}
  4005ee:	b084      	sub	sp, #16
  4005f0:	af00      	add	r7, sp, #0
  4005f2:	60f8      	str	r0, [r7, #12]
  4005f4:	60b9      	str	r1, [r7, #8]
  4005f6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4005f8:	68f8      	ldr	r0, [r7, #12]
  4005fa:	4b1a      	ldr	r3, [pc, #104]	; (400664 <usart_init_rs232+0x78>)
  4005fc:	4798      	blx	r3

	ul_reg_val = 0;
  4005fe:	4b1a      	ldr	r3, [pc, #104]	; (400668 <usart_init_rs232+0x7c>)
  400600:	2200      	movs	r2, #0
  400602:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400604:	68bb      	ldr	r3, [r7, #8]
  400606:	2b00      	cmp	r3, #0
  400608:	d009      	beq.n	40061e <usart_init_rs232+0x32>
  40060a:	68bb      	ldr	r3, [r7, #8]
  40060c:	681b      	ldr	r3, [r3, #0]
  40060e:	687a      	ldr	r2, [r7, #4]
  400610:	4619      	mov	r1, r3
  400612:	68f8      	ldr	r0, [r7, #12]
  400614:	4b15      	ldr	r3, [pc, #84]	; (40066c <usart_init_rs232+0x80>)
  400616:	4798      	blx	r3
  400618:	4603      	mov	r3, r0
  40061a:	2b00      	cmp	r3, #0
  40061c:	d001      	beq.n	400622 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40061e:	2301      	movs	r3, #1
  400620:	e01b      	b.n	40065a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400622:	68bb      	ldr	r3, [r7, #8]
  400624:	685a      	ldr	r2, [r3, #4]
  400626:	68bb      	ldr	r3, [r7, #8]
  400628:	689b      	ldr	r3, [r3, #8]
  40062a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40062c:	68bb      	ldr	r3, [r7, #8]
  40062e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400630:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400632:	68bb      	ldr	r3, [r7, #8]
  400634:	68db      	ldr	r3, [r3, #12]
  400636:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400638:	4b0b      	ldr	r3, [pc, #44]	; (400668 <usart_init_rs232+0x7c>)
  40063a:	681b      	ldr	r3, [r3, #0]
  40063c:	4313      	orrs	r3, r2
  40063e:	4a0a      	ldr	r2, [pc, #40]	; (400668 <usart_init_rs232+0x7c>)
  400640:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400642:	4b09      	ldr	r3, [pc, #36]	; (400668 <usart_init_rs232+0x7c>)
  400644:	681b      	ldr	r3, [r3, #0]
  400646:	4a08      	ldr	r2, [pc, #32]	; (400668 <usart_init_rs232+0x7c>)
  400648:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	685a      	ldr	r2, [r3, #4]
  40064e:	4b06      	ldr	r3, [pc, #24]	; (400668 <usart_init_rs232+0x7c>)
  400650:	681b      	ldr	r3, [r3, #0]
  400652:	431a      	orrs	r2, r3
  400654:	68fb      	ldr	r3, [r7, #12]
  400656:	605a      	str	r2, [r3, #4]

	return 0;
  400658:	2300      	movs	r3, #0
}
  40065a:	4618      	mov	r0, r3
  40065c:	3710      	adds	r7, #16
  40065e:	46bd      	mov	sp, r7
  400660:	bd80      	pop	{r7, pc}
  400662:	bf00      	nop
  400664:	0040058d 	.word	0x0040058d
  400668:	20000454 	.word	0x20000454
  40066c:	00400505 	.word	0x00400505

00400670 <usart_init_rs485>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400670:	b580      	push	{r7, lr}
  400672:	b084      	sub	sp, #16
  400674:	af00      	add	r7, sp, #0
  400676:	60f8      	str	r0, [r7, #12]
  400678:	60b9      	str	r1, [r7, #8]
  40067a:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  40067c:	687a      	ldr	r2, [r7, #4]
  40067e:	68b9      	ldr	r1, [r7, #8]
  400680:	68f8      	ldr	r0, [r7, #12]
  400682:	4b0a      	ldr	r3, [pc, #40]	; (4006ac <usart_init_rs485+0x3c>)
  400684:	4798      	blx	r3
  400686:	4603      	mov	r3, r0
  400688:	2b00      	cmp	r3, #0
  40068a:	d001      	beq.n	400690 <usart_init_rs485+0x20>
		return 1;
  40068c:	2301      	movs	r3, #1
  40068e:	e008      	b.n	4006a2 <usart_init_rs485+0x32>
	}

	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400690:	68fb      	ldr	r3, [r7, #12]
  400692:	685b      	ldr	r3, [r3, #4]
  400694:	f023 030f 	bic.w	r3, r3, #15
  400698:	f043 0201 	orr.w	r2, r3, #1
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_RS485;

	return 0;
  4006a0:	2300      	movs	r3, #0
}
  4006a2:	4618      	mov	r0, r3
  4006a4:	3710      	adds	r7, #16
  4006a6:	46bd      	mov	sp, r7
  4006a8:	bd80      	pop	{r7, pc}
  4006aa:	bf00      	nop
  4006ac:	004005ed 	.word	0x004005ed

004006b0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4006b0:	b480      	push	{r7}
  4006b2:	b083      	sub	sp, #12
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4006b8:	687b      	ldr	r3, [r7, #4]
  4006ba:	2240      	movs	r2, #64	; 0x40
  4006bc:	601a      	str	r2, [r3, #0]
}
  4006be:	bf00      	nop
  4006c0:	370c      	adds	r7, #12
  4006c2:	46bd      	mov	sp, r7
  4006c4:	bc80      	pop	{r7}
  4006c6:	4770      	bx	lr

004006c8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  4006c8:	b480      	push	{r7}
  4006ca:	b083      	sub	sp, #12
  4006cc:	af00      	add	r7, sp, #0
  4006ce:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  4006d0:	687b      	ldr	r3, [r7, #4]
  4006d2:	2280      	movs	r2, #128	; 0x80
  4006d4:	601a      	str	r2, [r3, #0]
}
  4006d6:	bf00      	nop
  4006d8:	370c      	adds	r7, #12
  4006da:	46bd      	mov	sp, r7
  4006dc:	bc80      	pop	{r7}
  4006de:	4770      	bx	lr

004006e0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4006e0:	b480      	push	{r7}
  4006e2:	b083      	sub	sp, #12
  4006e4:	af00      	add	r7, sp, #0
  4006e6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4006e8:	687b      	ldr	r3, [r7, #4]
  4006ea:	2288      	movs	r2, #136	; 0x88
  4006ec:	601a      	str	r2, [r3, #0]
}
  4006ee:	bf00      	nop
  4006f0:	370c      	adds	r7, #12
  4006f2:	46bd      	mov	sp, r7
  4006f4:	bc80      	pop	{r7}
  4006f6:	4770      	bx	lr

004006f8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4006f8:	b480      	push	{r7}
  4006fa:	b083      	sub	sp, #12
  4006fc:	af00      	add	r7, sp, #0
  4006fe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400700:	687b      	ldr	r3, [r7, #4]
  400702:	2210      	movs	r2, #16
  400704:	601a      	str	r2, [r3, #0]
}
  400706:	bf00      	nop
  400708:	370c      	adds	r7, #12
  40070a:	46bd      	mov	sp, r7
  40070c:	bc80      	pop	{r7}
  40070e:	4770      	bx	lr

00400710 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
  400710:	b480      	push	{r7}
  400712:	b083      	sub	sp, #12
  400714:	af00      	add	r7, sp, #0
  400716:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
  400718:	687b      	ldr	r3, [r7, #4]
  40071a:	2220      	movs	r2, #32
  40071c:	601a      	str	r2, [r3, #0]
}
  40071e:	bf00      	nop
  400720:	370c      	adds	r7, #12
  400722:	46bd      	mov	sp, r7
  400724:	bc80      	pop	{r7}
  400726:	4770      	bx	lr

00400728 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400728:	b480      	push	{r7}
  40072a:	b083      	sub	sp, #12
  40072c:	af00      	add	r7, sp, #0
  40072e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400730:	687b      	ldr	r3, [r7, #4]
  400732:	2224      	movs	r2, #36	; 0x24
  400734:	601a      	str	r2, [r3, #0]
}
  400736:	bf00      	nop
  400738:	370c      	adds	r7, #12
  40073a:	46bd      	mov	sp, r7
  40073c:	bc80      	pop	{r7}
  40073e:	4770      	bx	lr

00400740 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400740:	b480      	push	{r7}
  400742:	b083      	sub	sp, #12
  400744:	af00      	add	r7, sp, #0
  400746:	6078      	str	r0, [r7, #4]
  400748:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40074a:	687b      	ldr	r3, [r7, #4]
  40074c:	683a      	ldr	r2, [r7, #0]
  40074e:	60da      	str	r2, [r3, #12]
}
  400750:	bf00      	nop
  400752:	370c      	adds	r7, #12
  400754:	46bd      	mov	sp, r7
  400756:	bc80      	pop	{r7}
  400758:	4770      	bx	lr
  40075a:	bf00      	nop

0040075c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40075c:	b480      	push	{r7}
  40075e:	b083      	sub	sp, #12
  400760:	af00      	add	r7, sp, #0
  400762:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400764:	687b      	ldr	r3, [r7, #4]
  400766:	695b      	ldr	r3, [r3, #20]
}
  400768:	4618      	mov	r0, r3
  40076a:	370c      	adds	r7, #12
  40076c:	46bd      	mov	sp, r7
  40076e:	bc80      	pop	{r7}
  400770:	4770      	bx	lr
  400772:	bf00      	nop

00400774 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400774:	b480      	push	{r7}
  400776:	b083      	sub	sp, #12
  400778:	af00      	add	r7, sp, #0
  40077a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40077c:	687b      	ldr	r3, [r7, #4]
  40077e:	f44f 7280 	mov.w	r2, #256	; 0x100
  400782:	601a      	str	r2, [r3, #0]
}
  400784:	bf00      	nop
  400786:	370c      	adds	r7, #12
  400788:	46bd      	mov	sp, r7
  40078a:	bc80      	pop	{r7}
  40078c:	4770      	bx	lr
  40078e:	bf00      	nop

00400790 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400790:	b480      	push	{r7}
  400792:	b083      	sub	sp, #12
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400798:	687b      	ldr	r3, [r7, #4]
  40079a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40079e:	601a      	str	r2, [r3, #0]
}
  4007a0:	bf00      	nop
  4007a2:	370c      	adds	r7, #12
  4007a4:	46bd      	mov	sp, r7
  4007a6:	bc80      	pop	{r7}
  4007a8:	4770      	bx	lr
  4007aa:	bf00      	nop

004007ac <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4007ac:	b480      	push	{r7}
  4007ae:	b083      	sub	sp, #12
  4007b0:	af00      	add	r7, sp, #0
  4007b2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4007b4:	687b      	ldr	r3, [r7, #4]
  4007b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4007ba:	601a      	str	r2, [r3, #0]
}
  4007bc:	bf00      	nop
  4007be:	370c      	adds	r7, #12
  4007c0:	46bd      	mov	sp, r7
  4007c2:	bc80      	pop	{r7}
  4007c4:	4770      	bx	lr
  4007c6:	bf00      	nop

004007c8 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  4007c8:	b480      	push	{r7}
  4007ca:	b085      	sub	sp, #20
  4007cc:	af00      	add	r7, sp, #0
  4007ce:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  4007d0:	2300      	movs	r3, #0
  4007d2:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  4007d4:	687b      	ldr	r3, [r7, #4]
  4007d6:	4a0a      	ldr	r2, [pc, #40]	; (400800 <usart_get_pdc_base+0x38>)
  4007d8:	4293      	cmp	r3, r2
  4007da:	d103      	bne.n	4007e4 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  4007dc:	4b09      	ldr	r3, [pc, #36]	; (400804 <usart_get_pdc_base+0x3c>)
  4007de:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4007e0:	68fb      	ldr	r3, [r7, #12]
  4007e2:	e008      	b.n	4007f6 <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  4007e4:	687b      	ldr	r3, [r7, #4]
  4007e6:	4a08      	ldr	r2, [pc, #32]	; (400808 <usart_get_pdc_base+0x40>)
  4007e8:	4293      	cmp	r3, r2
  4007ea:	d103      	bne.n	4007f4 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  4007ec:	4b07      	ldr	r3, [pc, #28]	; (40080c <usart_get_pdc_base+0x44>)
  4007ee:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4007f0:	68fb      	ldr	r3, [r7, #12]
  4007f2:	e000      	b.n	4007f6 <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  4007f4:	68fb      	ldr	r3, [r7, #12]
}
  4007f6:	4618      	mov	r0, r3
  4007f8:	3714      	adds	r7, #20
  4007fa:	46bd      	mov	sp, r7
  4007fc:	bc80      	pop	{r7}
  4007fe:	4770      	bx	lr
  400800:	40024000 	.word	0x40024000
  400804:	40024100 	.word	0x40024100
  400808:	40028000 	.word	0x40028000
  40080c:	40028100 	.word	0x40028100

00400810 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400810:	b480      	push	{r7}
  400812:	b083      	sub	sp, #12
  400814:	af00      	add	r7, sp, #0
  400816:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400818:	687b      	ldr	r3, [r7, #4]
  40081a:	4a04      	ldr	r2, [pc, #16]	; (40082c <usart_disable_writeprotect+0x1c>)
  40081c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400820:	bf00      	nop
  400822:	370c      	adds	r7, #12
  400824:	46bd      	mov	sp, r7
  400826:	bc80      	pop	{r7}
  400828:	4770      	bx	lr
  40082a:	bf00      	nop
  40082c:	55534100 	.word	0x55534100

00400830 <ParseMbusPkt>:
//Write function pointer
void (*writeFunc)(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);

/* Modbus stack parser function */
void ParseMbusPkt(uint8_t slaveAddr, uint8_t *buff, uint8_t len, uint8_t *respBuff, uint8_t *respLen)
{
  400830:	b580      	push	{r7, lr}
  400832:	b08a      	sub	sp, #40	; 0x28
  400834:	af00      	add	r7, sp, #0
  400836:	60b9      	str	r1, [r7, #8]
  400838:	607b      	str	r3, [r7, #4]
  40083a:	4603      	mov	r3, r0
  40083c:	73fb      	strb	r3, [r7, #15]
  40083e:	4613      	mov	r3, r2
  400840:	73bb      	strb	r3, [r7, #14]
	 uint16_t crc = 0, recvCrc = 0;
  400842:	2300      	movs	r3, #0
  400844:	83fb      	strh	r3, [r7, #30]
  400846:	2300      	movs	r3, #0
  400848:	83bb      	strh	r3, [r7, #28]
	 uint16_t regAddr = 0, numReg = 0;
  40084a:	2300      	movs	r3, #0
  40084c:	837b      	strh	r3, [r7, #26]
  40084e:	2300      	movs	r3, #0
  400850:	833b      	strh	r3, [r7, #24]
	 uint16_t regVal = 0;
  400852:	2300      	movs	r3, #0
  400854:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t fCode = 0, genErrRsp = 0;
  400856:	2300      	movs	r3, #0
  400858:	75fb      	strb	r3, [r7, #23]
  40085a:	2300      	movs	r3, #0
  40085c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t expFuncCode = 0, expCode = 0;
  400860:	2300      	movs	r3, #0
  400862:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  400866:	2300      	movs	r3, #0
  400868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 uint8_t i = 0, ind = 0;
  40086c:	2300      	movs	r3, #0
  40086e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400872:	2300      	movs	r3, #0
  400874:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 
	 /* Self Addr recvd or Broadcast Addr = 0 recvd */
	 if(buff[0]==slaveAddr||buff[0]==0)
  400878:	68bb      	ldr	r3, [r7, #8]
  40087a:	781b      	ldrb	r3, [r3, #0]
  40087c:	7bfa      	ldrb	r2, [r7, #15]
  40087e:	429a      	cmp	r2, r3
  400880:	d004      	beq.n	40088c <ParseMbusPkt+0x5c>
  400882:	68bb      	ldr	r3, [r7, #8]
  400884:	781b      	ldrb	r3, [r3, #0]
  400886:	2b00      	cmp	r3, #0
  400888:	f040 81fb 	bne.w	400c82 <ParseMbusPkt+0x452>
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
  40088c:	7bbb      	ldrb	r3, [r7, #14]
  40088e:	3b01      	subs	r3, #1
  400890:	68ba      	ldr	r2, [r7, #8]
  400892:	4413      	add	r3, r2
  400894:	781b      	ldrb	r3, [r3, #0]
  400896:	021b      	lsls	r3, r3, #8
  400898:	b21a      	sxth	r2, r3
  40089a:	7bbb      	ldrb	r3, [r7, #14]
  40089c:	3b02      	subs	r3, #2
  40089e:	68b9      	ldr	r1, [r7, #8]
  4008a0:	440b      	add	r3, r1
  4008a2:	781b      	ldrb	r3, [r3, #0]
  4008a4:	b21b      	sxth	r3, r3
  4008a6:	4313      	orrs	r3, r2
  4008a8:	b21b      	sxth	r3, r3
  4008aa:	83bb      	strh	r3, [r7, #28]
		 crc = calcCRC(buff,len-2);
  4008ac:	7bbb      	ldrb	r3, [r7, #14]
  4008ae:	3b02      	subs	r3, #2
  4008b0:	b2db      	uxtb	r3, r3
  4008b2:	4619      	mov	r1, r3
  4008b4:	68b8      	ldr	r0, [r7, #8]
  4008b6:	4b90      	ldr	r3, [pc, #576]	; (400af8 <ParseMbusPkt+0x2c8>)
  4008b8:	4798      	blx	r3
  4008ba:	4603      	mov	r3, r0
  4008bc:	83fb      	strh	r3, [r7, #30]
		 /* If CRC Matched */
		 if(crc==recvCrc)
  4008be:	8bfa      	ldrh	r2, [r7, #30]
  4008c0:	8bbb      	ldrh	r3, [r7, #28]
  4008c2:	429a      	cmp	r2, r3
  4008c4:	f040 81e0 	bne.w	400c88 <ParseMbusPkt+0x458>
		 {
			 /* Function Code Extraction */
			 fCode = buff[1];
  4008c8:	68bb      	ldr	r3, [r7, #8]
  4008ca:	785b      	ldrb	r3, [r3, #1]
  4008cc:	75fb      	strb	r3, [r7, #23]
			 switch(fCode)
  4008ce:	7dfb      	ldrb	r3, [r7, #23]
  4008d0:	2b06      	cmp	r3, #6
  4008d2:	f000 80a9 	beq.w	400a28 <ParseMbusPkt+0x1f8>
  4008d6:	2b10      	cmp	r3, #16
  4008d8:	f000 8114 	beq.w	400b04 <ParseMbusPkt+0x2d4>
  4008dc:	2b03      	cmp	r3, #3
  4008de:	f040 81c2 	bne.w	400c66 <ParseMbusPkt+0x436>
			 {
				 /* Read Analog Reg Func Code Recvd */
				 case 0x03:
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  4008e2:	68bb      	ldr	r3, [r7, #8]
  4008e4:	3304      	adds	r3, #4
  4008e6:	781b      	ldrb	r3, [r3, #0]
  4008e8:	021b      	lsls	r3, r3, #8
  4008ea:	b21a      	sxth	r2, r3
  4008ec:	68bb      	ldr	r3, [r7, #8]
  4008ee:	3305      	adds	r3, #5
  4008f0:	781b      	ldrb	r3, [r3, #0]
  4008f2:	b21b      	sxth	r3, r3
  4008f4:	4313      	orrs	r3, r2
  4008f6:	b21b      	sxth	r3, r3
  4008f8:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  4008fa:	8b3b      	ldrh	r3, [r7, #24]
  4008fc:	2b00      	cmp	r3, #0
  4008fe:	f000 8088 	beq.w	400a12 <ParseMbusPkt+0x1e2>
  400902:	8b3b      	ldrh	r3, [r7, #24]
  400904:	2b7d      	cmp	r3, #125	; 0x7d
  400906:	f200 8084 	bhi.w	400a12 <ParseMbusPkt+0x1e2>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  40090a:	68bb      	ldr	r3, [r7, #8]
  40090c:	3302      	adds	r3, #2
  40090e:	781b      	ldrb	r3, [r3, #0]
  400910:	021b      	lsls	r3, r3, #8
  400912:	b21a      	sxth	r2, r3
  400914:	68bb      	ldr	r3, [r7, #8]
  400916:	3303      	adds	r3, #3
  400918:	781b      	ldrb	r3, [r3, #0]
  40091a:	b21b      	sxth	r3, r3
  40091c:	4313      	orrs	r3, r2
  40091e:	b21b      	sxth	r3, r3
  400920:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400922:	8b7a      	ldrh	r2, [r7, #26]
  400924:	8b3b      	ldrh	r3, [r7, #24]
  400926:	4413      	add	r3, r2
  400928:	2b0c      	cmp	r3, #12
  40092a:	dc68      	bgt.n	4009fe <ParseMbusPkt+0x1ce>
					 {
						 /* Process Read Reg Req */
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  40092c:	687b      	ldr	r3, [r7, #4]
  40092e:	7bfa      	ldrb	r2, [r7, #15]
  400930:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x03;
  400932:	687b      	ldr	r3, [r7, #4]
  400934:	3301      	adds	r3, #1
  400936:	2203      	movs	r2, #3
  400938:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = (numReg *2); //No of Data Bytes
  40093a:	687b      	ldr	r3, [r7, #4]
  40093c:	3302      	adds	r3, #2
  40093e:	8b3a      	ldrh	r2, [r7, #24]
  400940:	b2d2      	uxtb	r2, r2
  400942:	0052      	lsls	r2, r2, #1
  400944:	b2d2      	uxtb	r2, r2
  400946:	701a      	strb	r2, [r3, #0]
						 
						 i = 3;
  400948:	2303      	movs	r3, #3
  40094a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						 for(ind = 0; ind < numReg; ind++)
  40094e:	2300      	movs	r3, #0
  400950:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  400954:	e028      	b.n	4009a8 <ParseMbusPkt+0x178>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
  400956:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  40095a:	1c5a      	adds	r2, r3, #1
  40095c:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400960:	461a      	mov	r2, r3
  400962:	687b      	ldr	r3, [r7, #4]
  400964:	4413      	add	r3, r2
  400966:	8b79      	ldrh	r1, [r7, #26]
  400968:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  40096c:	440a      	add	r2, r1
  40096e:	4963      	ldr	r1, [pc, #396]	; (400afc <ParseMbusPkt+0x2cc>)
  400970:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  400974:	0a12      	lsrs	r2, r2, #8
  400976:	b292      	uxth	r2, r2
  400978:	b2d2      	uxtb	r2, r2
  40097a:	701a      	strb	r2, [r3, #0]
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
  40097c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400980:	1c5a      	adds	r2, r3, #1
  400982:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400986:	461a      	mov	r2, r3
  400988:	687b      	ldr	r3, [r7, #4]
  40098a:	4413      	add	r3, r2
  40098c:	8b79      	ldrh	r1, [r7, #26]
  40098e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400992:	440a      	add	r2, r1
  400994:	4959      	ldr	r1, [pc, #356]	; (400afc <ParseMbusPkt+0x2cc>)
  400996:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  40099a:	b2d2      	uxtb	r2, r2
  40099c:	701a      	strb	r2, [r3, #0]
						 respBuff[0] = slaveAddr;
						 respBuff[1] = 0x03;
						 respBuff[2] = (numReg *2); //No of Data Bytes
						 
						 i = 3;
						 for(ind = 0; ind < numReg; ind++)
  40099e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  4009a2:	3301      	adds	r3, #1
  4009a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  4009a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  4009ac:	b29b      	uxth	r3, r3
  4009ae:	8b3a      	ldrh	r2, [r7, #24]
  4009b0:	429a      	cmp	r2, r3
  4009b2:	d8d0      	bhi.n	400956 <ParseMbusPkt+0x126>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
						 }
						 crc = calcCRC(respBuff, i);
  4009b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4009b8:	4619      	mov	r1, r3
  4009ba:	6878      	ldr	r0, [r7, #4]
  4009bc:	4b4e      	ldr	r3, [pc, #312]	; (400af8 <ParseMbusPkt+0x2c8>)
  4009be:	4798      	blx	r3
  4009c0:	4603      	mov	r3, r0
  4009c2:	83fb      	strh	r3, [r7, #30]
						 respBuff[i++] = (crc&0x00FF);
  4009c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4009c8:	1c5a      	adds	r2, r3, #1
  4009ca:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  4009ce:	461a      	mov	r2, r3
  4009d0:	687b      	ldr	r3, [r7, #4]
  4009d2:	4413      	add	r3, r2
  4009d4:	8bfa      	ldrh	r2, [r7, #30]
  4009d6:	b2d2      	uxtb	r2, r2
  4009d8:	701a      	strb	r2, [r3, #0]
						 respBuff[i++] = (crc>>8);
  4009da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4009de:	1c5a      	adds	r2, r3, #1
  4009e0:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  4009e4:	461a      	mov	r2, r3
  4009e6:	687b      	ldr	r3, [r7, #4]
  4009e8:	4413      	add	r3, r2
  4009ea:	8bfa      	ldrh	r2, [r7, #30]
  4009ec:	0a12      	lsrs	r2, r2, #8
  4009ee:	b292      	uxth	r2, r2
  4009f0:	b2d2      	uxtb	r2, r2
  4009f2:	701a      	strb	r2, [r3, #0]
						 *respLen = i;
  4009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4009f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
  4009fa:	701a      	strb	r2, [r3, #0]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4009fc:	e013      	b.n	400a26 <ParseMbusPkt+0x1f6>
						 *respLen = i;
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  4009fe:	2301      	movs	r3, #1
  400a00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x83;
  400a04:	2383      	movs	r3, #131	; 0x83
  400a06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  400a0a:	2302      	movs	r3, #2
  400a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400a10:	e009      	b.n	400a26 <ParseMbusPkt+0x1f6>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  400a12:	2301      	movs	r3, #1
  400a14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x83;
  400a18:	2383      	movs	r3, #131	; 0x83
  400a1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  400a1e:	2303      	movs	r3, #3
  400a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  400a24:	e12c      	b.n	400c80 <ParseMbusPkt+0x450>
  400a26:	e12b      	b.n	400c80 <ParseMbusPkt+0x450>
				 /* Write Single Analog Reg */
				 case 0x06:
				 /* Output Value = 0x0000 or 0xFF00 */
				 regVal = (((uint16_t)buff[4])<<8)|(buff[5]);
  400a28:	68bb      	ldr	r3, [r7, #8]
  400a2a:	3304      	adds	r3, #4
  400a2c:	781b      	ldrb	r3, [r3, #0]
  400a2e:	021b      	lsls	r3, r3, #8
  400a30:	b21a      	sxth	r2, r3
  400a32:	68bb      	ldr	r3, [r7, #8]
  400a34:	3305      	adds	r3, #5
  400a36:	781b      	ldrb	r3, [r3, #0]
  400a38:	b21b      	sxth	r3, r3
  400a3a:	4313      	orrs	r3, r2
  400a3c:	b21b      	sxth	r3, r3
  400a3e:	84fb      	strh	r3, [r7, #38]	; 0x26
				 if(1)
				 {
					 /* Output Address = OK */
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400a40:	68bb      	ldr	r3, [r7, #8]
  400a42:	3302      	adds	r3, #2
  400a44:	781b      	ldrb	r3, [r3, #0]
  400a46:	021b      	lsls	r3, r3, #8
  400a48:	b21a      	sxth	r2, r3
  400a4a:	68bb      	ldr	r3, [r7, #8]
  400a4c:	3303      	adds	r3, #3
  400a4e:	781b      	ldrb	r3, [r3, #0]
  400a50:	b21b      	sxth	r3, r3
  400a52:	4313      	orrs	r3, r2
  400a54:	b21b      	sxth	r3, r3
  400a56:	837b      	strh	r3, [r7, #26]
					 if(regAddr <= MBUS_MAX_REGS)
  400a58:	8b7b      	ldrh	r3, [r7, #26]
  400a5a:	2b0c      	cmp	r3, #12
  400a5c:	d841      	bhi.n	400ae2 <ParseMbusPkt+0x2b2>
					 {
						 /* Gen Valid Mbus Resp */
						 mBusRegs[regAddr] = regVal;
  400a5e:	8b7b      	ldrh	r3, [r7, #26]
  400a60:	4926      	ldr	r1, [pc, #152]	; (400afc <ParseMbusPkt+0x2cc>)
  400a62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  400a64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						 /* Success Error Code */
						 respBuff[0] = slaveAddr;
  400a68:	687b      	ldr	r3, [r7, #4]
  400a6a:	7bfa      	ldrb	r2, [r7, #15]
  400a6c:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x06;
  400a6e:	687b      	ldr	r3, [r7, #4]
  400a70:	3301      	adds	r3, #1
  400a72:	2206      	movs	r2, #6
  400a74:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  400a76:	687b      	ldr	r3, [r7, #4]
  400a78:	3302      	adds	r3, #2
  400a7a:	68ba      	ldr	r2, [r7, #8]
  400a7c:	7892      	ldrb	r2, [r2, #2]
  400a7e:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  400a80:	687b      	ldr	r3, [r7, #4]
  400a82:	3303      	adds	r3, #3
  400a84:	68ba      	ldr	r2, [r7, #8]
  400a86:	78d2      	ldrb	r2, [r2, #3]
  400a88:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  400a8a:	687b      	ldr	r3, [r7, #4]
  400a8c:	3304      	adds	r3, #4
  400a8e:	68ba      	ldr	r2, [r7, #8]
  400a90:	7912      	ldrb	r2, [r2, #4]
  400a92:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  400a94:	687b      	ldr	r3, [r7, #4]
  400a96:	3305      	adds	r3, #5
  400a98:	68ba      	ldr	r2, [r7, #8]
  400a9a:	7952      	ldrb	r2, [r2, #5]
  400a9c:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  400a9e:	2106      	movs	r1, #6
  400aa0:	6878      	ldr	r0, [r7, #4]
  400aa2:	4b15      	ldr	r3, [pc, #84]	; (400af8 <ParseMbusPkt+0x2c8>)
  400aa4:	4798      	blx	r3
  400aa6:	4603      	mov	r3, r0
  400aa8:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  400aaa:	687b      	ldr	r3, [r7, #4]
  400aac:	3306      	adds	r3, #6
  400aae:	8bfa      	ldrh	r2, [r7, #30]
  400ab0:	b2d2      	uxtb	r2, r2
  400ab2:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  400ab4:	687b      	ldr	r3, [r7, #4]
  400ab6:	3307      	adds	r3, #7
  400ab8:	8bfa      	ldrh	r2, [r7, #30]
  400aba:	0a12      	lsrs	r2, r2, #8
  400abc:	b292      	uxth	r2, r2
  400abe:	b2d2      	uxtb	r2, r2
  400ac0:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  400ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400ac4:	2208      	movs	r2, #8
  400ac6:	701a      	strb	r2, [r3, #0]
						 
						 /* Process Write Reg Req */
						 if(writeFunc!=NULL)
  400ac8:	4b0d      	ldr	r3, [pc, #52]	; (400b00 <ParseMbusPkt+0x2d0>)
  400aca:	681b      	ldr	r3, [r3, #0]
  400acc:	2b00      	cmp	r3, #0
  400ace:	f000 80d6 	beq.w	400c7e <ParseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
  400ad2:	4b0b      	ldr	r3, [pc, #44]	; (400b00 <ParseMbusPkt+0x2d0>)
  400ad4:	681b      	ldr	r3, [r3, #0]
  400ad6:	8b7a      	ldrh	r2, [r7, #26]
  400ad8:	b2d1      	uxtb	r1, r2
  400ada:	2201      	movs	r2, #1
  400adc:	4807      	ldr	r0, [pc, #28]	; (400afc <ParseMbusPkt+0x2cc>)
  400ade:	4798      	blx	r3
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  400ae0:	e0cd      	b.n	400c7e <ParseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
					 }
					 else
					 {
						 /* Illegal Data Address Error */
						 genErrRsp = 1;
  400ae2:	2301      	movs	r3, #1
  400ae4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x86;
  400ae8:	2386      	movs	r3, #134	; 0x86
  400aea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  400aee:	2302      	movs	r3, #2
  400af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  400af4:	e0c3      	b.n	400c7e <ParseMbusPkt+0x44e>
  400af6:	bf00      	nop
  400af8:	00400ce9 	.word	0x00400ce9
  400afc:	20000458 	.word	0x20000458
  400b00:	200004e8 	.word	0x200004e8
				 case 0x10: /* Write Mul Register */
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  400b04:	68bb      	ldr	r3, [r7, #8]
  400b06:	3304      	adds	r3, #4
  400b08:	781b      	ldrb	r3, [r3, #0]
  400b0a:	021b      	lsls	r3, r3, #8
  400b0c:	b21a      	sxth	r2, r3
  400b0e:	68bb      	ldr	r3, [r7, #8]
  400b10:	3305      	adds	r3, #5
  400b12:	781b      	ldrb	r3, [r3, #0]
  400b14:	b21b      	sxth	r3, r3
  400b16:	4313      	orrs	r3, r2
  400b18:	b21b      	sxth	r3, r3
  400b1a:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  400b1c:	8b3b      	ldrh	r3, [r7, #24]
  400b1e:	2b00      	cmp	r3, #0
  400b20:	f000 8096 	beq.w	400c50 <ParseMbusPkt+0x420>
  400b24:	8b3b      	ldrh	r3, [r7, #24]
  400b26:	2b7d      	cmp	r3, #125	; 0x7d
  400b28:	f200 8092 	bhi.w	400c50 <ParseMbusPkt+0x420>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400b2c:	68bb      	ldr	r3, [r7, #8]
  400b2e:	3302      	adds	r3, #2
  400b30:	781b      	ldrb	r3, [r3, #0]
  400b32:	021b      	lsls	r3, r3, #8
  400b34:	b21a      	sxth	r2, r3
  400b36:	68bb      	ldr	r3, [r7, #8]
  400b38:	3303      	adds	r3, #3
  400b3a:	781b      	ldrb	r3, [r3, #0]
  400b3c:	b21b      	sxth	r3, r3
  400b3e:	4313      	orrs	r3, r2
  400b40:	b21b      	sxth	r3, r3
  400b42:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400b44:	8b7a      	ldrh	r2, [r7, #26]
  400b46:	8b3b      	ldrh	r3, [r7, #24]
  400b48:	4413      	add	r3, r2
  400b4a:	2b0c      	cmp	r3, #12
  400b4c:	dc76      	bgt.n	400c3c <ParseMbusPkt+0x40c>
					 {
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  400b4e:	687b      	ldr	r3, [r7, #4]
  400b50:	7bfa      	ldrb	r2, [r7, #15]
  400b52:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x10;
  400b54:	687b      	ldr	r3, [r7, #4]
  400b56:	3301      	adds	r3, #1
  400b58:	2210      	movs	r2, #16
  400b5a:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  400b5c:	687b      	ldr	r3, [r7, #4]
  400b5e:	3302      	adds	r3, #2
  400b60:	68ba      	ldr	r2, [r7, #8]
  400b62:	7892      	ldrb	r2, [r2, #2]
  400b64:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  400b66:	687b      	ldr	r3, [r7, #4]
  400b68:	3303      	adds	r3, #3
  400b6a:	68ba      	ldr	r2, [r7, #8]
  400b6c:	78d2      	ldrb	r2, [r2, #3]
  400b6e:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  400b70:	687b      	ldr	r3, [r7, #4]
  400b72:	3304      	adds	r3, #4
  400b74:	68ba      	ldr	r2, [r7, #8]
  400b76:	7912      	ldrb	r2, [r2, #4]
  400b78:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  400b7a:	687b      	ldr	r3, [r7, #4]
  400b7c:	3305      	adds	r3, #5
  400b7e:	68ba      	ldr	r2, [r7, #8]
  400b80:	7952      	ldrb	r2, [r2, #5]
  400b82:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  400b84:	2106      	movs	r1, #6
  400b86:	6878      	ldr	r0, [r7, #4]
  400b88:	4b54      	ldr	r3, [pc, #336]	; (400cdc <ParseMbusPkt+0x4ac>)
  400b8a:	4798      	blx	r3
  400b8c:	4603      	mov	r3, r0
  400b8e:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  400b90:	687b      	ldr	r3, [r7, #4]
  400b92:	3306      	adds	r3, #6
  400b94:	8bfa      	ldrh	r2, [r7, #30]
  400b96:	b2d2      	uxtb	r2, r2
  400b98:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  400b9a:	687b      	ldr	r3, [r7, #4]
  400b9c:	3307      	adds	r3, #7
  400b9e:	8bfa      	ldrh	r2, [r7, #30]
  400ba0:	0a12      	lsrs	r2, r2, #8
  400ba2:	b292      	uxth	r2, r2
  400ba4:	b2d2      	uxtb	r2, r2
  400ba6:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  400ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400baa:	2208      	movs	r2, #8
  400bac:	701a      	strb	r2, [r3, #0]
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
  400bae:	68bb      	ldr	r3, [r7, #8]
  400bb0:	3306      	adds	r3, #6
  400bb2:	781b      	ldrb	r3, [r3, #0]
  400bb4:	b29b      	uxth	r3, r3
  400bb6:	3307      	adds	r3, #7
  400bb8:	833b      	strh	r3, [r7, #24]
						 ind = 0;
  400bba:	2300      	movs	r3, #0
  400bbc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 for(i = 7; i < numReg; i++)
  400bc0:	2307      	movs	r3, #7
  400bc2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400bc6:	e02a      	b.n	400c1e <ParseMbusPkt+0x3ee>
						 {
							 if(i%2==1)
  400bc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400bcc:	f003 0301 	and.w	r3, r3, #1
  400bd0:	b2db      	uxtb	r3, r3
  400bd2:	2b00      	cmp	r3, #0
  400bd4:	d008      	beq.n	400be8 <ParseMbusPkt+0x3b8>
							 {
								 regVal = ((uint16_t)buff[i])<<8;
  400bd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400bda:	68ba      	ldr	r2, [r7, #8]
  400bdc:	4413      	add	r3, r2
  400bde:	781b      	ldrb	r3, [r3, #0]
  400be0:	b29b      	uxth	r3, r3
  400be2:	021b      	lsls	r3, r3, #8
  400be4:	84fb      	strh	r3, [r7, #38]	; 0x26
  400be6:	e015      	b.n	400c14 <ParseMbusPkt+0x3e4>
							 }
							 else
							 {
								 regVal |= buff[i];
  400be8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400bec:	68ba      	ldr	r2, [r7, #8]
  400bee:	4413      	add	r3, r2
  400bf0:	781b      	ldrb	r3, [r3, #0]
  400bf2:	b29a      	uxth	r2, r3
  400bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  400bf6:	4313      	orrs	r3, r2
  400bf8:	84fb      	strh	r3, [r7, #38]	; 0x26
								 mBusRegs[regAddr+ind] = regVal;
  400bfa:	8b7a      	ldrh	r2, [r7, #26]
  400bfc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400c00:	4413      	add	r3, r2
  400c02:	4937      	ldr	r1, [pc, #220]	; (400ce0 <ParseMbusPkt+0x4b0>)
  400c04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  400c06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								 ind ++;
  400c0a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400c0e:	3301      	adds	r3, #1
  400c10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 *respLen = 8;
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
						 ind = 0;
						 for(i = 7; i < numReg; i++)
  400c14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400c18:	3301      	adds	r3, #1
  400c1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400c1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400c22:	b29b      	uxth	r3, r3
  400c24:	8b3a      	ldrh	r2, [r7, #24]
  400c26:	429a      	cmp	r2, r3
  400c28:	d8ce      	bhi.n	400bc8 <ParseMbusPkt+0x398>
								 mBusRegs[regAddr+ind] = regVal;
								 ind ++;
							 }
						 }
						 /* Process Write Reg Req */
						 writeFunc(mBusRegs,regAddr,ind);
  400c2a:	4b2e      	ldr	r3, [pc, #184]	; (400ce4 <ParseMbusPkt+0x4b4>)
  400c2c:	681b      	ldr	r3, [r3, #0]
  400c2e:	8b7a      	ldrh	r2, [r7, #26]
  400c30:	b2d1      	uxtb	r1, r2
  400c32:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400c36:	482a      	ldr	r0, [pc, #168]	; (400ce0 <ParseMbusPkt+0x4b0>)
  400c38:	4798      	blx	r3
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400c3a:	e013      	b.n	400c64 <ParseMbusPkt+0x434>
						 writeFunc(mBusRegs,regAddr,ind);
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  400c3c:	2301      	movs	r3, #1
  400c3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x90;
  400c42:	2390      	movs	r3, #144	; 0x90
  400c44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  400c48:	2302      	movs	r3, #2
  400c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400c4e:	e009      	b.n	400c64 <ParseMbusPkt+0x434>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  400c50:	2301      	movs	r3, #1
  400c52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x90;
  400c56:	2390      	movs	r3, #144	; 0x90
  400c58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  400c5c:	2303      	movs	r3, #3
  400c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  400c62:	e00d      	b.n	400c80 <ParseMbusPkt+0x450>
  400c64:	e00c      	b.n	400c80 <ParseMbusPkt+0x450>
				 default:
				 /* Illegal Function Code Error */
				 /* Set MSB of recvd Function code */
				 /* Error Code 0x01 */
				 expFuncCode = fCode|(1<<7);
  400c66:	7dfb      	ldrb	r3, [r7, #23]
  400c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
  400c6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				 expCode = 0x01;
  400c70:	2301      	movs	r3, #1
  400c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 genErrRsp = 1;
  400c76:	2301      	movs	r3, #1
  400c78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				 break;
  400c7c:	e000      	b.n	400c80 <ParseMbusPkt+0x450>
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  400c7e:	bf00      	nop
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
		 crc = calcCRC(buff,len-2);
		 /* If CRC Matched */
		 if(crc==recvCrc)
  400c80:	e002      	b.n	400c88 <ParseMbusPkt+0x458>
			 }
		 }
	 }
	 else
	 {
		 *respLen = 0;
  400c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400c84:	2200      	movs	r2, #0
  400c86:	701a      	strb	r2, [r3, #0]
	 }
	 
	 if(genErrRsp)
  400c88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
  400c8c:	2b00      	cmp	r3, #0
  400c8e:	d021      	beq.n	400cd4 <ParseMbusPkt+0x4a4>
	 {
		 respBuff[0] = slaveAddr;
  400c90:	687b      	ldr	r3, [r7, #4]
  400c92:	7bfa      	ldrb	r2, [r7, #15]
  400c94:	701a      	strb	r2, [r3, #0]
		 respBuff[1] = expFuncCode;
  400c96:	687b      	ldr	r3, [r7, #4]
  400c98:	3301      	adds	r3, #1
  400c9a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
  400c9e:	701a      	strb	r2, [r3, #0]
		 respBuff[2] = expCode;
  400ca0:	687b      	ldr	r3, [r7, #4]
  400ca2:	3302      	adds	r3, #2
  400ca4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
  400ca8:	701a      	strb	r2, [r3, #0]
		 crc = calcCRC(respBuff, 3);
  400caa:	2103      	movs	r1, #3
  400cac:	6878      	ldr	r0, [r7, #4]
  400cae:	4b0b      	ldr	r3, [pc, #44]	; (400cdc <ParseMbusPkt+0x4ac>)
  400cb0:	4798      	blx	r3
  400cb2:	4603      	mov	r3, r0
  400cb4:	83fb      	strh	r3, [r7, #30]
		 respBuff[3] = (crc&0x00FF);
  400cb6:	687b      	ldr	r3, [r7, #4]
  400cb8:	3303      	adds	r3, #3
  400cba:	8bfa      	ldrh	r2, [r7, #30]
  400cbc:	b2d2      	uxtb	r2, r2
  400cbe:	701a      	strb	r2, [r3, #0]
		 respBuff[4] = (crc>>8);
  400cc0:	687b      	ldr	r3, [r7, #4]
  400cc2:	3304      	adds	r3, #4
  400cc4:	8bfa      	ldrh	r2, [r7, #30]
  400cc6:	0a12      	lsrs	r2, r2, #8
  400cc8:	b292      	uxth	r2, r2
  400cca:	b2d2      	uxtb	r2, r2
  400ccc:	701a      	strb	r2, [r3, #0]
		 *respLen = 5;
  400cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400cd0:	2205      	movs	r2, #5
  400cd2:	701a      	strb	r2, [r3, #0]
	 }
 }
  400cd4:	bf00      	nop
  400cd6:	3728      	adds	r7, #40	; 0x28
  400cd8:	46bd      	mov	sp, r7
  400cda:	bd80      	pop	{r7, pc}
  400cdc:	00400ce9 	.word	0x00400ce9
  400ce0:	20000458 	.word	0x20000458
  400ce4:	200004e8 	.word	0x200004e8

00400ce8 <calcCRC>:

 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
  400ce8:	b480      	push	{r7}
  400cea:	b085      	sub	sp, #20
  400cec:	af00      	add	r7, sp, #0
  400cee:	6078      	str	r0, [r7, #4]
  400cf0:	460b      	mov	r3, r1
  400cf2:	70fb      	strb	r3, [r7, #3]
	 uint16_t crcReg = 0xFFFF;
  400cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400cf8:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;
  400cfa:	2300      	movs	r3, #0
  400cfc:	737b      	strb	r3, [r7, #13]
  400cfe:	2300      	movs	r3, #0
  400d00:	733b      	strb	r3, [r7, #12]

	 for(i=0;i<len;i++)
  400d02:	2300      	movs	r3, #0
  400d04:	737b      	strb	r3, [r7, #13]
  400d06:	e026      	b.n	400d56 <calcCRC+0x6e>
	 {
		 crcReg = crcReg ^ buff[i];
  400d08:	7b7b      	ldrb	r3, [r7, #13]
  400d0a:	687a      	ldr	r2, [r7, #4]
  400d0c:	4413      	add	r3, r2
  400d0e:	781b      	ldrb	r3, [r3, #0]
  400d10:	b29a      	uxth	r2, r3
  400d12:	89fb      	ldrh	r3, [r7, #14]
  400d14:	4053      	eors	r3, r2
  400d16:	81fb      	strh	r3, [r7, #14]
		 for(j=0;j<8;j++)
  400d18:	2300      	movs	r3, #0
  400d1a:	733b      	strb	r3, [r7, #12]
  400d1c:	e015      	b.n	400d4a <calcCRC+0x62>
		 {

			 if(bitIsSet(crcReg,0))
  400d1e:	89fb      	ldrh	r3, [r7, #14]
  400d20:	f003 0301 	and.w	r3, r3, #1
  400d24:	2b00      	cmp	r3, #0
  400d26:	d00a      	beq.n	400d3e <calcCRC+0x56>
			 {
				 crcReg = crcReg >> 1;
  400d28:	89fb      	ldrh	r3, [r7, #14]
  400d2a:	085b      	lsrs	r3, r3, #1
  400d2c:	81fb      	strh	r3, [r7, #14]
				 crcReg = crcReg ^ MBUS_CRC_POLY;
  400d2e:	89fb      	ldrh	r3, [r7, #14]
  400d30:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
  400d34:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
  400d38:	43db      	mvns	r3, r3
  400d3a:	81fb      	strh	r3, [r7, #14]
  400d3c:	e002      	b.n	400d44 <calcCRC+0x5c>
			 }
			 else
			 {
				 crcReg = crcReg >> 1;
  400d3e:	89fb      	ldrh	r3, [r7, #14]
  400d40:	085b      	lsrs	r3, r3, #1
  400d42:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
	 {
		 crcReg = crcReg ^ buff[i];
		 for(j=0;j<8;j++)
  400d44:	7b3b      	ldrb	r3, [r7, #12]
  400d46:	3301      	adds	r3, #1
  400d48:	733b      	strb	r3, [r7, #12]
  400d4a:	7b3b      	ldrb	r3, [r7, #12]
  400d4c:	2b07      	cmp	r3, #7
  400d4e:	d9e6      	bls.n	400d1e <calcCRC+0x36>
 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
	 uint16_t crcReg = 0xFFFF;
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
  400d50:	7b7b      	ldrb	r3, [r7, #13]
  400d52:	3301      	adds	r3, #1
  400d54:	737b      	strb	r3, [r7, #13]
  400d56:	7b7a      	ldrb	r2, [r7, #13]
  400d58:	78fb      	ldrb	r3, [r7, #3]
  400d5a:	429a      	cmp	r2, r3
  400d5c:	d3d4      	bcc.n	400d08 <calcCRC+0x20>
			 {
				 crcReg = crcReg >> 1;
			 }
		 }
	 }
	 return crcReg;
  400d5e:	89fb      	ldrh	r3, [r7, #14]
 }
  400d60:	4618      	mov	r0, r3
  400d62:	3714      	adds	r7, #20
  400d64:	46bd      	mov	sp, r7
  400d66:	bc80      	pop	{r7}
  400d68:	4770      	bx	lr
  400d6a:	bf00      	nop

00400d6c <WriteMCP3425>:
 {
	WriteMCP3425(Port, conf);
 }
 
 void WriteMCP3425(Twi *Port, uint8_t conf)
 {
  400d6c:	b580      	push	{r7, lr}
  400d6e:	b088      	sub	sp, #32
  400d70:	af00      	add	r7, sp, #0
  400d72:	6078      	str	r0, [r7, #4]
  400d74:	460b      	mov	r3, r1
  400d76:	70fb      	strb	r3, [r7, #3]
	twi_packet_t pkt;
	/* Set Device Address */
	pkt.chip = ADDR_MCP3425;
  400d78:	2368      	movs	r3, #104	; 0x68
  400d7a:	773b      	strb	r3, [r7, #28]
	/* No Address Bytes to be clocked */
	pkt.addr_length = 0;
  400d7c:	2300      	movs	r3, #0
  400d7e:	613b      	str	r3, [r7, #16]
	/* Address of data to be transferred */
	pkt.buffer = &conf;
  400d80:	1cfb      	adds	r3, r7, #3
  400d82:	617b      	str	r3, [r7, #20]
	/* No of bytes to transfer */
	pkt.length = 1;
  400d84:	2301      	movs	r3, #1
  400d86:	61bb      	str	r3, [r7, #24]
	twi_master_write(Port, &pkt);
  400d88:	f107 030c 	add.w	r3, r7, #12
  400d8c:	4619      	mov	r1, r3
  400d8e:	6878      	ldr	r0, [r7, #4]
  400d90:	4b02      	ldr	r3, [pc, #8]	; (400d9c <WriteMCP3425+0x30>)
  400d92:	4798      	blx	r3
 }
  400d94:	bf00      	nop
  400d96:	3720      	adds	r7, #32
  400d98:	46bd      	mov	sp, r7
  400d9a:	bd80      	pop	{r7, pc}
  400d9c:	0040040d 	.word	0x0040040d

00400da0 <ReadMCP3425>:

 void ReadMCP3425(Twi * Port, uint8_t *dPkt)
 {
  400da0:	b580      	push	{r7, lr}
  400da2:	b088      	sub	sp, #32
  400da4:	af00      	add	r7, sp, #0
  400da6:	6078      	str	r0, [r7, #4]
  400da8:	6039      	str	r1, [r7, #0]
	twi_packet_t pkt;
	/* Set Device Address */
	pkt.chip = ADDR_MCP3425;
  400daa:	2368      	movs	r3, #104	; 0x68
  400dac:	773b      	strb	r3, [r7, #28]
	/* No Address Bytes to be clocked */
	pkt.addr_length = 0;
  400dae:	2300      	movs	r3, #0
  400db0:	613b      	str	r3, [r7, #16]
	/* Address of buffer where recvd data is to be stored */
	pkt.buffer = dPkt;
  400db2:	683b      	ldr	r3, [r7, #0]
  400db4:	617b      	str	r3, [r7, #20]
	/* No of bytes to read */
	pkt.length = 3;
  400db6:	2303      	movs	r3, #3
  400db8:	61bb      	str	r3, [r7, #24]
	twi_master_read(Port, &pkt);
  400dba:	f107 030c 	add.w	r3, r7, #12
  400dbe:	4619      	mov	r1, r3
  400dc0:	6878      	ldr	r0, [r7, #4]
  400dc2:	4b03      	ldr	r3, [pc, #12]	; (400dd0 <ReadMCP3425+0x30>)
  400dc4:	4798      	blx	r3
 }
  400dc6:	bf00      	nop
  400dc8:	3720      	adds	r7, #32
  400dca:	46bd      	mov	sp, r7
  400dcc:	bd80      	pop	{r7, pc}
  400dce:	bf00      	nop
  400dd0:	00400301 	.word	0x00400301

00400dd4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400dd4:	b480      	push	{r7}
  400dd6:	b083      	sub	sp, #12
  400dd8:	af00      	add	r7, sp, #0
  400dda:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400ddc:	687b      	ldr	r3, [r7, #4]
  400dde:	2b07      	cmp	r3, #7
  400de0:	d825      	bhi.n	400e2e <osc_get_rate+0x5a>
  400de2:	a201      	add	r2, pc, #4	; (adr r2, 400de8 <osc_get_rate+0x14>)
  400de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400de8:	00400e09 	.word	0x00400e09
  400dec:	00400e0f 	.word	0x00400e0f
  400df0:	00400e15 	.word	0x00400e15
  400df4:	00400e1b 	.word	0x00400e1b
  400df8:	00400e1f 	.word	0x00400e1f
  400dfc:	00400e23 	.word	0x00400e23
  400e00:	00400e27 	.word	0x00400e27
  400e04:	00400e2b 	.word	0x00400e2b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400e08:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400e0c:	e010      	b.n	400e30 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e12:	e00d      	b.n	400e30 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e18:	e00a      	b.n	400e30 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400e1a:	4b08      	ldr	r3, [pc, #32]	; (400e3c <osc_get_rate+0x68>)
  400e1c:	e008      	b.n	400e30 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400e1e:	4b08      	ldr	r3, [pc, #32]	; (400e40 <osc_get_rate+0x6c>)
  400e20:	e006      	b.n	400e30 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400e22:	4b08      	ldr	r3, [pc, #32]	; (400e44 <osc_get_rate+0x70>)
  400e24:	e004      	b.n	400e30 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400e26:	4b07      	ldr	r3, [pc, #28]	; (400e44 <osc_get_rate+0x70>)
  400e28:	e002      	b.n	400e30 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400e2a:	4b06      	ldr	r3, [pc, #24]	; (400e44 <osc_get_rate+0x70>)
  400e2c:	e000      	b.n	400e30 <osc_get_rate+0x5c>
	}

	return 0;
  400e2e:	2300      	movs	r3, #0
}
  400e30:	4618      	mov	r0, r3
  400e32:	370c      	adds	r7, #12
  400e34:	46bd      	mov	sp, r7
  400e36:	bc80      	pop	{r7}
  400e38:	4770      	bx	lr
  400e3a:	bf00      	nop
  400e3c:	003d0900 	.word	0x003d0900
  400e40:	007a1200 	.word	0x007a1200
  400e44:	00b71b00 	.word	0x00b71b00

00400e48 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400e48:	b580      	push	{r7, lr}
  400e4a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400e4c:	2006      	movs	r0, #6
  400e4e:	4b04      	ldr	r3, [pc, #16]	; (400e60 <sysclk_get_main_hz+0x18>)
  400e50:	4798      	blx	r3
  400e52:	4602      	mov	r2, r0
  400e54:	4613      	mov	r3, r2
  400e56:	009b      	lsls	r3, r3, #2
  400e58:	4413      	add	r3, r2
  400e5a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400e5c:	4618      	mov	r0, r3
  400e5e:	bd80      	pop	{r7, pc}
  400e60:	00400dd5 	.word	0x00400dd5

00400e64 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400e64:	b580      	push	{r7, lr}
  400e66:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400e68:	4b02      	ldr	r3, [pc, #8]	; (400e74 <sysclk_get_peripheral_hz+0x10>)
  400e6a:	4798      	blx	r3
  400e6c:	4603      	mov	r3, r0
  400e6e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400e70:	4618      	mov	r0, r3
  400e72:	bd80      	pop	{r7, pc}
  400e74:	00400e49 	.word	0x00400e49

00400e78 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400e78:	b580      	push	{r7, lr}
  400e7a:	b082      	sub	sp, #8
  400e7c:	af00      	add	r7, sp, #0
  400e7e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400e80:	6878      	ldr	r0, [r7, #4]
  400e82:	4b03      	ldr	r3, [pc, #12]	; (400e90 <sysclk_enable_peripheral_clock+0x18>)
  400e84:	4798      	blx	r3
}
  400e86:	bf00      	nop
  400e88:	3708      	adds	r7, #8
  400e8a:	46bd      	mov	sp, r7
  400e8c:	bd80      	pop	{r7, pc}
  400e8e:	bf00      	nop
  400e90:	00401dd9 	.word	0x00401dd9

00400e94 <InitRs485Pdc>:

 //volatile uint8_t txDone = 1;
 //volatile uint8_t rxDone = 1;

 void InitRs485Pdc(void)
 {
  400e94:	b5b0      	push	{r4, r5, r7, lr}
  400e96:	b086      	sub	sp, #24
  400e98:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  400e9a:	4b18      	ldr	r3, [pc, #96]	; (400efc <InitRs485Pdc+0x68>)
  400e9c:	463c      	mov	r4, r7
  400e9e:	461d      	mov	r5, r3
  400ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400ea4:	e895 0003 	ldmia.w	r5, {r0, r1}
  400ea8:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(RS485_USART_ID);
  400eac:	200f      	movs	r0, #15
  400eae:	4b14      	ldr	r3, [pc, #80]	; (400f00 <InitRs485Pdc+0x6c>)
  400eb0:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs485(RS485_USART, &usart_console_settings,
  400eb2:	4b14      	ldr	r3, [pc, #80]	; (400f04 <InitRs485Pdc+0x70>)
  400eb4:	4798      	blx	r3
  400eb6:	4602      	mov	r2, r0
  400eb8:	463b      	mov	r3, r7
  400eba:	4619      	mov	r1, r3
  400ebc:	4812      	ldr	r0, [pc, #72]	; (400f08 <InitRs485Pdc+0x74>)
  400ebe:	4b13      	ldr	r3, [pc, #76]	; (400f0c <InitRs485Pdc+0x78>)
  400ec0:	4798      	blx	r3
	 sysclk_get_peripheral_hz());


	 /* Disable all the interrupts. */
	 usart_disable_interrupt(RS485_USART, 0xFFFFFFFF);
  400ec2:	f04f 31ff 	mov.w	r1, #4294967295
  400ec6:	4810      	ldr	r0, [pc, #64]	; (400f08 <InitRs485Pdc+0x74>)
  400ec8:	4b11      	ldr	r3, [pc, #68]	; (400f10 <InitRs485Pdc+0x7c>)
  400eca:	4798      	blx	r3

	 /* Enable TX & RX function. */
	 usart_enable_tx(RS485_USART);
  400ecc:	480e      	ldr	r0, [pc, #56]	; (400f08 <InitRs485Pdc+0x74>)
  400ece:	4b11      	ldr	r3, [pc, #68]	; (400f14 <InitRs485Pdc+0x80>)
  400ed0:	4798      	blx	r3
	 usart_enable_rx(RS485_USART);
  400ed2:	480d      	ldr	r0, [pc, #52]	; (400f08 <InitRs485Pdc+0x74>)
  400ed4:	4b10      	ldr	r3, [pc, #64]	; (400f18 <InitRs485Pdc+0x84>)
  400ed6:	4798      	blx	r3
 	 
	 /* Configure and enable interrupt of USART. */
	 //NVIC_EnableIRQ(RS485_USART_IRQn);
 
	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 rs485PdcBase = usart_get_pdc_base(RS485_USART);
  400ed8:	480b      	ldr	r0, [pc, #44]	; (400f08 <InitRs485Pdc+0x74>)
  400eda:	4b10      	ldr	r3, [pc, #64]	; (400f1c <InitRs485Pdc+0x88>)
  400edc:	4798      	blx	r3
  400ede:	4602      	mov	r2, r0
  400ee0:	4b0f      	ldr	r3, [pc, #60]	; (400f20 <InitRs485Pdc+0x8c>)
  400ee2:	601a      	str	r2, [r3, #0]
	 pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400ee4:	4b0e      	ldr	r3, [pc, #56]	; (400f20 <InitRs485Pdc+0x8c>)
  400ee6:	681b      	ldr	r3, [r3, #0]
  400ee8:	f240 1101 	movw	r1, #257	; 0x101
  400eec:	4618      	mov	r0, r3
  400eee:	4b0d      	ldr	r3, [pc, #52]	; (400f24 <InitRs485Pdc+0x90>)
  400ef0:	4798      	blx	r3

	 /* Enable Rx & Tx interrupts */
	 //usart_enable_interrupt(RS485_USART, US_IER_ENDRX | US_IER_ENDTX);
 }
  400ef2:	bf00      	nop
  400ef4:	3718      	adds	r7, #24
  400ef6:	46bd      	mov	sp, r7
  400ef8:	bdb0      	pop	{r4, r5, r7, pc}
  400efa:	bf00      	nop
  400efc:	004032f0 	.word	0x004032f0
  400f00:	00400e79 	.word	0x00400e79
  400f04:	00400e65 	.word	0x00400e65
  400f08:	40028000 	.word	0x40028000
  400f0c:	00400671 	.word	0x00400671
  400f10:	00400741 	.word	0x00400741
  400f14:	004006b1 	.word	0x004006b1
  400f18:	004006f9 	.word	0x004006f9
  400f1c:	004007c9 	.word	0x004007c9
  400f20:	200004ec 	.word	0x200004ec
  400f24:	00401539 	.word	0x00401539

00400f28 <USART1_Handler>:

 /* USART Interrupt Handler */
 void RS485_USART_Handler(void)
 {
  400f28:	b580      	push	{r7, lr}
  400f2a:	b082      	sub	sp, #8
  400f2c:	af00      	add	r7, sp, #0
	 uint32_t ul_status;

	 /* Read USART status. */
	 ul_status = usart_get_status(RS485_USART);
  400f2e:	480d      	ldr	r0, [pc, #52]	; (400f64 <USART1_Handler+0x3c>)
  400f30:	4b0d      	ldr	r3, [pc, #52]	; (400f68 <USART1_Handler+0x40>)
  400f32:	4798      	blx	r3
  400f34:	6078      	str	r0, [r7, #4]

	 if(ul_status & US_CSR_ENDRX)
  400f36:	687b      	ldr	r3, [r7, #4]
  400f38:	f003 0308 	and.w	r3, r3, #8
  400f3c:	2b00      	cmp	r3, #0
  400f3e:	d004      	beq.n	400f4a <USART1_Handler+0x22>
	 {
		//rxDone = 1;
		usart_disable_interrupt(RS485_USART, US_IDR_ENDRX);
  400f40:	2108      	movs	r1, #8
  400f42:	4808      	ldr	r0, [pc, #32]	; (400f64 <USART1_Handler+0x3c>)
  400f44:	4b09      	ldr	r3, [pc, #36]	; (400f6c <USART1_Handler+0x44>)
  400f46:	4798      	blx	r3
	 else if(ul_status & US_CSR_ENDTX)
	 {
		//txDone = 1;
		usart_disable_interrupt(RS485_USART, US_IDR_ENDTX);
	 }
}
  400f48:	e008      	b.n	400f5c <USART1_Handler+0x34>
	 if(ul_status & US_CSR_ENDRX)
	 {
		//rxDone = 1;
		usart_disable_interrupt(RS485_USART, US_IDR_ENDRX);
	 }
	 else if(ul_status & US_CSR_ENDTX)
  400f4a:	687b      	ldr	r3, [r7, #4]
  400f4c:	f003 0310 	and.w	r3, r3, #16
  400f50:	2b00      	cmp	r3, #0
  400f52:	d003      	beq.n	400f5c <USART1_Handler+0x34>
	 {
		//txDone = 1;
		usart_disable_interrupt(RS485_USART, US_IDR_ENDTX);
  400f54:	2110      	movs	r1, #16
  400f56:	4803      	ldr	r0, [pc, #12]	; (400f64 <USART1_Handler+0x3c>)
  400f58:	4b04      	ldr	r3, [pc, #16]	; (400f6c <USART1_Handler+0x44>)
  400f5a:	4798      	blx	r3
	 }
}
  400f5c:	bf00      	nop
  400f5e:	3708      	adds	r7, #8
  400f60:	46bd      	mov	sp, r7
  400f62:	bd80      	pop	{r7, pc}
  400f64:	40028000 	.word	0x40028000
  400f68:	0040075d 	.word	0x0040075d
  400f6c:	00400741 	.word	0x00400741

00400f70 <Rs485PdcStartTx>:

 /* Set pointers and start transmitting */
 void Rs485PdcStartTx(uint32_t buff, uint16_t nBytes)
 {
  400f70:	b580      	push	{r7, lr}
  400f72:	b082      	sub	sp, #8
  400f74:	af00      	add	r7, sp, #0
  400f76:	6078      	str	r0, [r7, #4]
  400f78:	460b      	mov	r3, r1
  400f7a:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  400f7c:	4a08      	ldr	r2, [pc, #32]	; (400fa0 <Rs485PdcStartTx+0x30>)
  400f7e:	687b      	ldr	r3, [r7, #4]
  400f80:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  400f82:	887b      	ldrh	r3, [r7, #2]
  400f84:	4a06      	ldr	r2, [pc, #24]	; (400fa0 <Rs485PdcStartTx+0x30>)
  400f86:	6053      	str	r3, [r2, #4]
	pdc_tx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  400f88:	4b06      	ldr	r3, [pc, #24]	; (400fa4 <Rs485PdcStartTx+0x34>)
  400f8a:	681b      	ldr	r3, [r3, #0]
  400f8c:	2200      	movs	r2, #0
  400f8e:	4904      	ldr	r1, [pc, #16]	; (400fa0 <Rs485PdcStartTx+0x30>)
  400f90:	4618      	mov	r0, r3
  400f92:	4b05      	ldr	r3, [pc, #20]	; (400fa8 <Rs485PdcStartTx+0x38>)
  400f94:	4798      	blx	r3
	//txDone = 0;
 }
  400f96:	bf00      	nop
  400f98:	3708      	adds	r7, #8
  400f9a:	46bd      	mov	sp, r7
  400f9c:	bd80      	pop	{r7, pc}
  400f9e:	bf00      	nop
  400fa0:	200004f0 	.word	0x200004f0
  400fa4:	200004ec 	.word	0x200004ec
  400fa8:	004014b1 	.word	0x004014b1

00400fac <Rs485PdcStartRx>:

 /* Set pointers and start receiving */
 void Rs485PdcStartRx(uint32_t buff, uint16_t nBytes)
 {
  400fac:	b580      	push	{r7, lr}
  400fae:	b082      	sub	sp, #8
  400fb0:	af00      	add	r7, sp, #0
  400fb2:	6078      	str	r0, [r7, #4]
  400fb4:	460b      	mov	r3, r1
  400fb6:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  400fb8:	4a08      	ldr	r2, [pc, #32]	; (400fdc <Rs485PdcStartRx+0x30>)
  400fba:	687b      	ldr	r3, [r7, #4]
  400fbc:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  400fbe:	887b      	ldrh	r3, [r7, #2]
  400fc0:	4a06      	ldr	r2, [pc, #24]	; (400fdc <Rs485PdcStartRx+0x30>)
  400fc2:	6053      	str	r3, [r2, #4]
	pdc_rx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  400fc4:	4b06      	ldr	r3, [pc, #24]	; (400fe0 <Rs485PdcStartRx+0x34>)
  400fc6:	681b      	ldr	r3, [r3, #0]
  400fc8:	2200      	movs	r2, #0
  400fca:	4904      	ldr	r1, [pc, #16]	; (400fdc <Rs485PdcStartRx+0x30>)
  400fcc:	4618      	mov	r0, r3
  400fce:	4b05      	ldr	r3, [pc, #20]	; (400fe4 <Rs485PdcStartRx+0x38>)
  400fd0:	4798      	blx	r3
	//rxDone = 0;
 }
  400fd2:	bf00      	nop
  400fd4:	3708      	adds	r7, #8
  400fd6:	46bd      	mov	sp, r7
  400fd8:	bd80      	pop	{r7, pc}
  400fda:	bf00      	nop
  400fdc:	200004f0 	.word	0x200004f0
  400fe0:	200004ec 	.word	0x200004ec
  400fe4:	004014f5 	.word	0x004014f5

00400fe8 <Rs485PdcGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t Rs485PdcGetRxBytes(void)
 {
  400fe8:	b580      	push	{r7, lr}
  400fea:	b082      	sub	sp, #8
  400fec:	af00      	add	r7, sp, #0
	uint32_t recvdBytes = RS485_BUFFER_SIZE;
  400fee:	2323      	movs	r3, #35	; 0x23
  400ff0:	607b      	str	r3, [r7, #4]
	recvdBytes -= pdc_read_rx_counter(rs485PdcBase);
  400ff2:	4b09      	ldr	r3, [pc, #36]	; (401018 <Rs485PdcGetRxBytes+0x30>)
  400ff4:	681b      	ldr	r3, [r3, #0]
  400ff6:	4618      	mov	r0, r3
  400ff8:	4b08      	ldr	r3, [pc, #32]	; (40101c <Rs485PdcGetRxBytes+0x34>)
  400ffa:	4798      	blx	r3
  400ffc:	4602      	mov	r2, r0
  400ffe:	687b      	ldr	r3, [r7, #4]
  401000:	1a9b      	subs	r3, r3, r2
  401002:	607b      	str	r3, [r7, #4]
	if(recvdBytes>RS485_BUFFER_SIZE)//If overflow occurred. 
  401004:	687b      	ldr	r3, [r7, #4]
  401006:	2b23      	cmp	r3, #35	; 0x23
  401008:	d901      	bls.n	40100e <Rs485PdcGetRxBytes+0x26>
	{
		recvdBytes = 0;
  40100a:	2300      	movs	r3, #0
  40100c:	607b      	str	r3, [r7, #4]
	}
	return recvdBytes;
  40100e:	687b      	ldr	r3, [r7, #4]
 }
  401010:	4618      	mov	r0, r3
  401012:	3708      	adds	r7, #8
  401014:	46bd      	mov	sp, r7
  401016:	bd80      	pop	{r7, pc}
  401018:	200004ec 	.word	0x200004ec
  40101c:	00401579 	.word	0x00401579

00401020 <Rs485PdcGetTxStatus>:
	return (usart_get_status(RS485_USART)&US_CSR_ENDRX);
 }

 /* Returns 1 if Tx Buffer is empty else 0 */
 uint32_t Rs485PdcGetTxStatus(void)
 {
  401020:	b580      	push	{r7, lr}
  401022:	af00      	add	r7, sp, #0
	return (usart_get_status(RS485_USART)&US_CSR_ENDTX);
  401024:	4803      	ldr	r0, [pc, #12]	; (401034 <Rs485PdcGetTxStatus+0x14>)
  401026:	4b04      	ldr	r3, [pc, #16]	; (401038 <Rs485PdcGetTxStatus+0x18>)
  401028:	4798      	blx	r3
  40102a:	4603      	mov	r3, r0
  40102c:	f003 0310 	and.w	r3, r3, #16
 }
  401030:	4618      	mov	r0, r3
  401032:	bd80      	pop	{r7, pc}
  401034:	40028000 	.word	0x40028000
  401038:	0040075d 	.word	0x0040075d

0040103c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40103c:	b580      	push	{r7, lr}
  40103e:	b084      	sub	sp, #16
  401040:	af00      	add	r7, sp, #0
  401042:	6078      	str	r0, [r7, #4]
  401044:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401046:	6878      	ldr	r0, [r7, #4]
  401048:	4b2c      	ldr	r3, [pc, #176]	; (4010fc <pio_handler_process+0xc0>)
  40104a:	4798      	blx	r3
  40104c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40104e:	6878      	ldr	r0, [r7, #4]
  401050:	4b2b      	ldr	r3, [pc, #172]	; (401100 <pio_handler_process+0xc4>)
  401052:	4798      	blx	r3
  401054:	4602      	mov	r2, r0
  401056:	68fb      	ldr	r3, [r7, #12]
  401058:	4013      	ands	r3, r2
  40105a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40105c:	68fb      	ldr	r3, [r7, #12]
  40105e:	2b00      	cmp	r3, #0
  401060:	d03c      	beq.n	4010dc <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  401062:	2300      	movs	r3, #0
  401064:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  401066:	e034      	b.n	4010d2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401068:	4a26      	ldr	r2, [pc, #152]	; (401104 <pio_handler_process+0xc8>)
  40106a:	68bb      	ldr	r3, [r7, #8]
  40106c:	011b      	lsls	r3, r3, #4
  40106e:	4413      	add	r3, r2
  401070:	681a      	ldr	r2, [r3, #0]
  401072:	683b      	ldr	r3, [r7, #0]
  401074:	429a      	cmp	r2, r3
  401076:	d126      	bne.n	4010c6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401078:	4a22      	ldr	r2, [pc, #136]	; (401104 <pio_handler_process+0xc8>)
  40107a:	68bb      	ldr	r3, [r7, #8]
  40107c:	011b      	lsls	r3, r3, #4
  40107e:	4413      	add	r3, r2
  401080:	3304      	adds	r3, #4
  401082:	681a      	ldr	r2, [r3, #0]
  401084:	68fb      	ldr	r3, [r7, #12]
  401086:	4013      	ands	r3, r2
  401088:	2b00      	cmp	r3, #0
  40108a:	d01c      	beq.n	4010c6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40108c:	4a1d      	ldr	r2, [pc, #116]	; (401104 <pio_handler_process+0xc8>)
  40108e:	68bb      	ldr	r3, [r7, #8]
  401090:	011b      	lsls	r3, r3, #4
  401092:	4413      	add	r3, r2
  401094:	330c      	adds	r3, #12
  401096:	681b      	ldr	r3, [r3, #0]
  401098:	491a      	ldr	r1, [pc, #104]	; (401104 <pio_handler_process+0xc8>)
  40109a:	68ba      	ldr	r2, [r7, #8]
  40109c:	0112      	lsls	r2, r2, #4
  40109e:	440a      	add	r2, r1
  4010a0:	6810      	ldr	r0, [r2, #0]
  4010a2:	4918      	ldr	r1, [pc, #96]	; (401104 <pio_handler_process+0xc8>)
  4010a4:	68ba      	ldr	r2, [r7, #8]
  4010a6:	0112      	lsls	r2, r2, #4
  4010a8:	440a      	add	r2, r1
  4010aa:	3204      	adds	r2, #4
  4010ac:	6812      	ldr	r2, [r2, #0]
  4010ae:	4611      	mov	r1, r2
  4010b0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4010b2:	4a14      	ldr	r2, [pc, #80]	; (401104 <pio_handler_process+0xc8>)
  4010b4:	68bb      	ldr	r3, [r7, #8]
  4010b6:	011b      	lsls	r3, r3, #4
  4010b8:	4413      	add	r3, r2
  4010ba:	3304      	adds	r3, #4
  4010bc:	681b      	ldr	r3, [r3, #0]
  4010be:	43db      	mvns	r3, r3
  4010c0:	68fa      	ldr	r2, [r7, #12]
  4010c2:	4013      	ands	r3, r2
  4010c4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4010c6:	68bb      	ldr	r3, [r7, #8]
  4010c8:	3301      	adds	r3, #1
  4010ca:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4010cc:	68bb      	ldr	r3, [r7, #8]
  4010ce:	2b06      	cmp	r3, #6
  4010d0:	d803      	bhi.n	4010da <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4010d2:	68fb      	ldr	r3, [r7, #12]
  4010d4:	2b00      	cmp	r3, #0
  4010d6:	d1c7      	bne.n	401068 <pio_handler_process+0x2c>
  4010d8:	e000      	b.n	4010dc <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  4010da:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4010dc:	4b0a      	ldr	r3, [pc, #40]	; (401108 <pio_handler_process+0xcc>)
  4010de:	681b      	ldr	r3, [r3, #0]
  4010e0:	2b00      	cmp	r3, #0
  4010e2:	d007      	beq.n	4010f4 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4010e4:	4b09      	ldr	r3, [pc, #36]	; (40110c <pio_handler_process+0xd0>)
  4010e6:	681b      	ldr	r3, [r3, #0]
  4010e8:	2b00      	cmp	r3, #0
  4010ea:	d003      	beq.n	4010f4 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4010ec:	4b07      	ldr	r3, [pc, #28]	; (40110c <pio_handler_process+0xd0>)
  4010ee:	681b      	ldr	r3, [r3, #0]
  4010f0:	6878      	ldr	r0, [r7, #4]
  4010f2:	4798      	blx	r3
		}
	}
#endif
}
  4010f4:	bf00      	nop
  4010f6:	3710      	adds	r7, #16
  4010f8:	46bd      	mov	sp, r7
  4010fa:	bd80      	pop	{r7, pc}
  4010fc:	004017cd 	.word	0x004017cd
  401100:	004017e5 	.word	0x004017e5
  401104:	20000470 	.word	0x20000470
  401108:	200004f8 	.word	0x200004f8
  40110c:	200004e0 	.word	0x200004e0

00401110 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401110:	b580      	push	{r7, lr}
  401112:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401114:	210b      	movs	r1, #11
  401116:	4802      	ldr	r0, [pc, #8]	; (401120 <PIOA_Handler+0x10>)
  401118:	4b02      	ldr	r3, [pc, #8]	; (401124 <PIOA_Handler+0x14>)
  40111a:	4798      	blx	r3
}
  40111c:	bf00      	nop
  40111e:	bd80      	pop	{r7, pc}
  401120:	400e0e00 	.word	0x400e0e00
  401124:	0040103d 	.word	0x0040103d

00401128 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401128:	b580      	push	{r7, lr}
  40112a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40112c:	210c      	movs	r1, #12
  40112e:	4802      	ldr	r0, [pc, #8]	; (401138 <PIOB_Handler+0x10>)
  401130:	4b02      	ldr	r3, [pc, #8]	; (40113c <PIOB_Handler+0x14>)
  401132:	4798      	blx	r3
}
  401134:	bf00      	nop
  401136:	bd80      	pop	{r7, pc}
  401138:	400e1000 	.word	0x400e1000
  40113c:	0040103d 	.word	0x0040103d

00401140 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401140:	b580      	push	{r7, lr}
  401142:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401144:	210d      	movs	r1, #13
  401146:	4802      	ldr	r0, [pc, #8]	; (401150 <PIOC_Handler+0x10>)
  401148:	4b02      	ldr	r3, [pc, #8]	; (401154 <PIOC_Handler+0x14>)
  40114a:	4798      	blx	r3
}
  40114c:	bf00      	nop
  40114e:	bd80      	pop	{r7, pc}
  401150:	400e1200 	.word	0x400e1200
  401154:	0040103d 	.word	0x0040103d

00401158 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  401158:	b580      	push	{r7, lr}
  40115a:	b082      	sub	sp, #8
  40115c:	af00      	add	r7, sp, #0
  40115e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401160:	687b      	ldr	r3, [r7, #4]
  401162:	2b07      	cmp	r3, #7
  401164:	d831      	bhi.n	4011ca <osc_enable+0x72>
  401166:	a201      	add	r2, pc, #4	; (adr r2, 40116c <osc_enable+0x14>)
  401168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40116c:	004011c9 	.word	0x004011c9
  401170:	0040118d 	.word	0x0040118d
  401174:	00401195 	.word	0x00401195
  401178:	0040119d 	.word	0x0040119d
  40117c:	004011a5 	.word	0x004011a5
  401180:	004011ad 	.word	0x004011ad
  401184:	004011b5 	.word	0x004011b5
  401188:	004011bf 	.word	0x004011bf
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40118c:	2000      	movs	r0, #0
  40118e:	4b11      	ldr	r3, [pc, #68]	; (4011d4 <osc_enable+0x7c>)
  401190:	4798      	blx	r3
		break;
  401192:	e01a      	b.n	4011ca <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401194:	2001      	movs	r0, #1
  401196:	4b0f      	ldr	r3, [pc, #60]	; (4011d4 <osc_enable+0x7c>)
  401198:	4798      	blx	r3
		break;
  40119a:	e016      	b.n	4011ca <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40119c:	2000      	movs	r0, #0
  40119e:	4b0e      	ldr	r3, [pc, #56]	; (4011d8 <osc_enable+0x80>)
  4011a0:	4798      	blx	r3
		break;
  4011a2:	e012      	b.n	4011ca <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4011a4:	2010      	movs	r0, #16
  4011a6:	4b0c      	ldr	r3, [pc, #48]	; (4011d8 <osc_enable+0x80>)
  4011a8:	4798      	blx	r3
		break;
  4011aa:	e00e      	b.n	4011ca <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4011ac:	2020      	movs	r0, #32
  4011ae:	4b0a      	ldr	r3, [pc, #40]	; (4011d8 <osc_enable+0x80>)
  4011b0:	4798      	blx	r3
		break;
  4011b2:	e00a      	b.n	4011ca <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4011b4:	213e      	movs	r1, #62	; 0x3e
  4011b6:	2000      	movs	r0, #0
  4011b8:	4b08      	ldr	r3, [pc, #32]	; (4011dc <osc_enable+0x84>)
  4011ba:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4011bc:	e005      	b.n	4011ca <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4011be:	213e      	movs	r1, #62	; 0x3e
  4011c0:	2001      	movs	r0, #1
  4011c2:	4b06      	ldr	r3, [pc, #24]	; (4011dc <osc_enable+0x84>)
  4011c4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4011c6:	e000      	b.n	4011ca <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  4011c8:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  4011ca:	bf00      	nop
  4011cc:	3708      	adds	r7, #8
  4011ce:	46bd      	mov	sp, r7
  4011d0:	bd80      	pop	{r7, pc}
  4011d2:	bf00      	nop
  4011d4:	00401c0d 	.word	0x00401c0d
  4011d8:	00401c79 	.word	0x00401c79
  4011dc:	00401ce9 	.word	0x00401ce9

004011e0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4011e0:	b580      	push	{r7, lr}
  4011e2:	b082      	sub	sp, #8
  4011e4:	af00      	add	r7, sp, #0
  4011e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4011e8:	687b      	ldr	r3, [r7, #4]
  4011ea:	2b07      	cmp	r3, #7
  4011ec:	d826      	bhi.n	40123c <osc_is_ready+0x5c>
  4011ee:	a201      	add	r2, pc, #4	; (adr r2, 4011f4 <osc_is_ready+0x14>)
  4011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4011f4:	00401215 	.word	0x00401215
  4011f8:	00401219 	.word	0x00401219
  4011fc:	00401219 	.word	0x00401219
  401200:	0040122b 	.word	0x0040122b
  401204:	0040122b 	.word	0x0040122b
  401208:	0040122b 	.word	0x0040122b
  40120c:	0040122b 	.word	0x0040122b
  401210:	0040122b 	.word	0x0040122b
	case OSC_SLCK_32K_RC:
		return 1;
  401214:	2301      	movs	r3, #1
  401216:	e012      	b.n	40123e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  401218:	4b0b      	ldr	r3, [pc, #44]	; (401248 <osc_is_ready+0x68>)
  40121a:	4798      	blx	r3
  40121c:	4603      	mov	r3, r0
  40121e:	2b00      	cmp	r3, #0
  401220:	bf14      	ite	ne
  401222:	2301      	movne	r3, #1
  401224:	2300      	moveq	r3, #0
  401226:	b2db      	uxtb	r3, r3
  401228:	e009      	b.n	40123e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40122a:	4b08      	ldr	r3, [pc, #32]	; (40124c <osc_is_ready+0x6c>)
  40122c:	4798      	blx	r3
  40122e:	4603      	mov	r3, r0
  401230:	2b00      	cmp	r3, #0
  401232:	bf14      	ite	ne
  401234:	2301      	movne	r3, #1
  401236:	2300      	moveq	r3, #0
  401238:	b2db      	uxtb	r3, r3
  40123a:	e000      	b.n	40123e <osc_is_ready+0x5e>
	}

	return 0;
  40123c:	2300      	movs	r3, #0
}
  40123e:	4618      	mov	r0, r3
  401240:	3708      	adds	r7, #8
  401242:	46bd      	mov	sp, r7
  401244:	bd80      	pop	{r7, pc}
  401246:	bf00      	nop
  401248:	00401c45 	.word	0x00401c45
  40124c:	00401d61 	.word	0x00401d61

00401250 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401250:	b480      	push	{r7}
  401252:	b083      	sub	sp, #12
  401254:	af00      	add	r7, sp, #0
  401256:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401258:	687b      	ldr	r3, [r7, #4]
  40125a:	2b07      	cmp	r3, #7
  40125c:	d825      	bhi.n	4012aa <osc_get_rate+0x5a>
  40125e:	a201      	add	r2, pc, #4	; (adr r2, 401264 <osc_get_rate+0x14>)
  401260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401264:	00401285 	.word	0x00401285
  401268:	0040128b 	.word	0x0040128b
  40126c:	00401291 	.word	0x00401291
  401270:	00401297 	.word	0x00401297
  401274:	0040129b 	.word	0x0040129b
  401278:	0040129f 	.word	0x0040129f
  40127c:	004012a3 	.word	0x004012a3
  401280:	004012a7 	.word	0x004012a7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401284:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401288:	e010      	b.n	4012ac <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40128a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40128e:	e00d      	b.n	4012ac <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401294:	e00a      	b.n	4012ac <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401296:	4b08      	ldr	r3, [pc, #32]	; (4012b8 <osc_get_rate+0x68>)
  401298:	e008      	b.n	4012ac <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40129a:	4b08      	ldr	r3, [pc, #32]	; (4012bc <osc_get_rate+0x6c>)
  40129c:	e006      	b.n	4012ac <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40129e:	4b08      	ldr	r3, [pc, #32]	; (4012c0 <osc_get_rate+0x70>)
  4012a0:	e004      	b.n	4012ac <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4012a2:	4b07      	ldr	r3, [pc, #28]	; (4012c0 <osc_get_rate+0x70>)
  4012a4:	e002      	b.n	4012ac <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4012a6:	4b06      	ldr	r3, [pc, #24]	; (4012c0 <osc_get_rate+0x70>)
  4012a8:	e000      	b.n	4012ac <osc_get_rate+0x5c>
	}

	return 0;
  4012aa:	2300      	movs	r3, #0
}
  4012ac:	4618      	mov	r0, r3
  4012ae:	370c      	adds	r7, #12
  4012b0:	46bd      	mov	sp, r7
  4012b2:	bc80      	pop	{r7}
  4012b4:	4770      	bx	lr
  4012b6:	bf00      	nop
  4012b8:	003d0900 	.word	0x003d0900
  4012bc:	007a1200 	.word	0x007a1200
  4012c0:	00b71b00 	.word	0x00b71b00

004012c4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4012c4:	b580      	push	{r7, lr}
  4012c6:	b082      	sub	sp, #8
  4012c8:	af00      	add	r7, sp, #0
  4012ca:	4603      	mov	r3, r0
  4012cc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4012ce:	bf00      	nop
  4012d0:	79fb      	ldrb	r3, [r7, #7]
  4012d2:	4618      	mov	r0, r3
  4012d4:	4b05      	ldr	r3, [pc, #20]	; (4012ec <osc_wait_ready+0x28>)
  4012d6:	4798      	blx	r3
  4012d8:	4603      	mov	r3, r0
  4012da:	f083 0301 	eor.w	r3, r3, #1
  4012de:	b2db      	uxtb	r3, r3
  4012e0:	2b00      	cmp	r3, #0
  4012e2:	d1f5      	bne.n	4012d0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4012e4:	bf00      	nop
  4012e6:	3708      	adds	r7, #8
  4012e8:	46bd      	mov	sp, r7
  4012ea:	bd80      	pop	{r7, pc}
  4012ec:	004011e1 	.word	0x004011e1

004012f0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4012f0:	b580      	push	{r7, lr}
  4012f2:	b086      	sub	sp, #24
  4012f4:	af00      	add	r7, sp, #0
  4012f6:	60f8      	str	r0, [r7, #12]
  4012f8:	607a      	str	r2, [r7, #4]
  4012fa:	603b      	str	r3, [r7, #0]
  4012fc:	460b      	mov	r3, r1
  4012fe:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401300:	7afb      	ldrb	r3, [r7, #11]
  401302:	4618      	mov	r0, r3
  401304:	4b0d      	ldr	r3, [pc, #52]	; (40133c <pll_config_init+0x4c>)
  401306:	4798      	blx	r3
  401308:	4602      	mov	r2, r0
  40130a:	687b      	ldr	r3, [r7, #4]
  40130c:	fbb2 f3f3 	udiv	r3, r2, r3
  401310:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401312:	697b      	ldr	r3, [r7, #20]
  401314:	683a      	ldr	r2, [r7, #0]
  401316:	fb02 f303 	mul.w	r3, r2, r3
  40131a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40131c:	683b      	ldr	r3, [r7, #0]
  40131e:	3b01      	subs	r3, #1
  401320:	041a      	lsls	r2, r3, #16
  401322:	4b07      	ldr	r3, [pc, #28]	; (401340 <pll_config_init+0x50>)
  401324:	4013      	ands	r3, r2
  401326:	687a      	ldr	r2, [r7, #4]
  401328:	b2d2      	uxtb	r2, r2
  40132a:	4313      	orrs	r3, r2
  40132c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  401330:	68fb      	ldr	r3, [r7, #12]
  401332:	601a      	str	r2, [r3, #0]
}
  401334:	bf00      	nop
  401336:	3718      	adds	r7, #24
  401338:	46bd      	mov	sp, r7
  40133a:	bd80      	pop	{r7, pc}
  40133c:	00401251 	.word	0x00401251
  401340:	07ff0000 	.word	0x07ff0000

00401344 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401344:	b580      	push	{r7, lr}
  401346:	b082      	sub	sp, #8
  401348:	af00      	add	r7, sp, #0
  40134a:	6078      	str	r0, [r7, #4]
  40134c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40134e:	683b      	ldr	r3, [r7, #0]
  401350:	2b00      	cmp	r3, #0
  401352:	d108      	bne.n	401366 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401354:	4b09      	ldr	r3, [pc, #36]	; (40137c <pll_enable+0x38>)
  401356:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401358:	4a09      	ldr	r2, [pc, #36]	; (401380 <pll_enable+0x3c>)
  40135a:	687b      	ldr	r3, [r7, #4]
  40135c:	681b      	ldr	r3, [r3, #0]
  40135e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401362:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401364:	e005      	b.n	401372 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  401366:	4b07      	ldr	r3, [pc, #28]	; (401384 <pll_enable+0x40>)
  401368:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40136a:	4a05      	ldr	r2, [pc, #20]	; (401380 <pll_enable+0x3c>)
  40136c:	687b      	ldr	r3, [r7, #4]
  40136e:	681b      	ldr	r3, [r3, #0]
  401370:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  401372:	bf00      	nop
  401374:	3708      	adds	r7, #8
  401376:	46bd      	mov	sp, r7
  401378:	bd80      	pop	{r7, pc}
  40137a:	bf00      	nop
  40137c:	00401d79 	.word	0x00401d79
  401380:	400e0400 	.word	0x400e0400
  401384:	00401da9 	.word	0x00401da9

00401388 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401388:	b580      	push	{r7, lr}
  40138a:	b082      	sub	sp, #8
  40138c:	af00      	add	r7, sp, #0
  40138e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401390:	687b      	ldr	r3, [r7, #4]
  401392:	2b00      	cmp	r3, #0
  401394:	d103      	bne.n	40139e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  401396:	4b05      	ldr	r3, [pc, #20]	; (4013ac <pll_is_locked+0x24>)
  401398:	4798      	blx	r3
  40139a:	4603      	mov	r3, r0
  40139c:	e002      	b.n	4013a4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40139e:	4b04      	ldr	r3, [pc, #16]	; (4013b0 <pll_is_locked+0x28>)
  4013a0:	4798      	blx	r3
  4013a2:	4603      	mov	r3, r0
	}
}
  4013a4:	4618      	mov	r0, r3
  4013a6:	3708      	adds	r7, #8
  4013a8:	46bd      	mov	sp, r7
  4013aa:	bd80      	pop	{r7, pc}
  4013ac:	00401d91 	.word	0x00401d91
  4013b0:	00401dc1 	.word	0x00401dc1

004013b4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4013b4:	b580      	push	{r7, lr}
  4013b6:	b082      	sub	sp, #8
  4013b8:	af00      	add	r7, sp, #0
  4013ba:	4603      	mov	r3, r0
  4013bc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4013be:	79fb      	ldrb	r3, [r7, #7]
  4013c0:	3b03      	subs	r3, #3
  4013c2:	2b04      	cmp	r3, #4
  4013c4:	d808      	bhi.n	4013d8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4013c6:	79fb      	ldrb	r3, [r7, #7]
  4013c8:	4618      	mov	r0, r3
  4013ca:	4b06      	ldr	r3, [pc, #24]	; (4013e4 <pll_enable_source+0x30>)
  4013cc:	4798      	blx	r3
		osc_wait_ready(e_src);
  4013ce:	79fb      	ldrb	r3, [r7, #7]
  4013d0:	4618      	mov	r0, r3
  4013d2:	4b05      	ldr	r3, [pc, #20]	; (4013e8 <pll_enable_source+0x34>)
  4013d4:	4798      	blx	r3
		break;
  4013d6:	e000      	b.n	4013da <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4013d8:	bf00      	nop
	}
}
  4013da:	bf00      	nop
  4013dc:	3708      	adds	r7, #8
  4013de:	46bd      	mov	sp, r7
  4013e0:	bd80      	pop	{r7, pc}
  4013e2:	bf00      	nop
  4013e4:	00401159 	.word	0x00401159
  4013e8:	004012c5 	.word	0x004012c5

004013ec <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4013ec:	b580      	push	{r7, lr}
  4013ee:	b082      	sub	sp, #8
  4013f0:	af00      	add	r7, sp, #0
  4013f2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4013f4:	bf00      	nop
  4013f6:	6878      	ldr	r0, [r7, #4]
  4013f8:	4b04      	ldr	r3, [pc, #16]	; (40140c <pll_wait_for_lock+0x20>)
  4013fa:	4798      	blx	r3
  4013fc:	4603      	mov	r3, r0
  4013fe:	2b00      	cmp	r3, #0
  401400:	d0f9      	beq.n	4013f6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401402:	2300      	movs	r3, #0
}
  401404:	4618      	mov	r0, r3
  401406:	3708      	adds	r7, #8
  401408:	46bd      	mov	sp, r7
  40140a:	bd80      	pop	{r7, pc}
  40140c:	00401389 	.word	0x00401389

00401410 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401410:	b580      	push	{r7, lr}
  401412:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401414:	2006      	movs	r0, #6
  401416:	4b04      	ldr	r3, [pc, #16]	; (401428 <sysclk_get_main_hz+0x18>)
  401418:	4798      	blx	r3
  40141a:	4602      	mov	r2, r0
  40141c:	4613      	mov	r3, r2
  40141e:	009b      	lsls	r3, r3, #2
  401420:	4413      	add	r3, r2
  401422:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401424:	4618      	mov	r0, r3
  401426:	bd80      	pop	{r7, pc}
  401428:	00401251 	.word	0x00401251

0040142c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40142c:	b580      	push	{r7, lr}
  40142e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401430:	4b02      	ldr	r3, [pc, #8]	; (40143c <sysclk_get_cpu_hz+0x10>)
  401432:	4798      	blx	r3
  401434:	4603      	mov	r3, r0
  401436:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401438:	4618      	mov	r0, r3
  40143a:	bd80      	pop	{r7, pc}
  40143c:	00401411 	.word	0x00401411

00401440 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401440:	b590      	push	{r4, r7, lr}
  401442:	b083      	sub	sp, #12
  401444:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401446:	4811      	ldr	r0, [pc, #68]	; (40148c <sysclk_init+0x4c>)
  401448:	4b11      	ldr	r3, [pc, #68]	; (401490 <sysclk_init+0x50>)
  40144a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40144c:	2006      	movs	r0, #6
  40144e:	4b11      	ldr	r3, [pc, #68]	; (401494 <sysclk_init+0x54>)
  401450:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401452:	1d38      	adds	r0, r7, #4
  401454:	2314      	movs	r3, #20
  401456:	2201      	movs	r2, #1
  401458:	2106      	movs	r1, #6
  40145a:	4c0f      	ldr	r4, [pc, #60]	; (401498 <sysclk_init+0x58>)
  40145c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40145e:	1d3b      	adds	r3, r7, #4
  401460:	2100      	movs	r1, #0
  401462:	4618      	mov	r0, r3
  401464:	4b0d      	ldr	r3, [pc, #52]	; (40149c <sysclk_init+0x5c>)
  401466:	4798      	blx	r3
		pll_wait_for_lock(0);
  401468:	2000      	movs	r0, #0
  40146a:	4b0d      	ldr	r3, [pc, #52]	; (4014a0 <sysclk_init+0x60>)
  40146c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40146e:	2010      	movs	r0, #16
  401470:	4b0c      	ldr	r3, [pc, #48]	; (4014a4 <sysclk_init+0x64>)
  401472:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401474:	4b0c      	ldr	r3, [pc, #48]	; (4014a8 <sysclk_init+0x68>)
  401476:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401478:	4b0c      	ldr	r3, [pc, #48]	; (4014ac <sysclk_init+0x6c>)
  40147a:	4798      	blx	r3
  40147c:	4603      	mov	r3, r0
  40147e:	4618      	mov	r0, r3
  401480:	4b03      	ldr	r3, [pc, #12]	; (401490 <sysclk_init+0x50>)
  401482:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401484:	bf00      	nop
  401486:	370c      	adds	r7, #12
  401488:	46bd      	mov	sp, r7
  40148a:	bd90      	pop	{r4, r7, pc}
  40148c:	07270e00 	.word	0x07270e00
  401490:	004021bd 	.word	0x004021bd
  401494:	004013b5 	.word	0x004013b5
  401498:	004012f1 	.word	0x004012f1
  40149c:	00401345 	.word	0x00401345
  4014a0:	004013ed 	.word	0x004013ed
  4014a4:	00401b8d 	.word	0x00401b8d
  4014a8:	00402021 	.word	0x00402021
  4014ac:	0040142d 	.word	0x0040142d

004014b0 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4014b0:	b480      	push	{r7}
  4014b2:	b085      	sub	sp, #20
  4014b4:	af00      	add	r7, sp, #0
  4014b6:	60f8      	str	r0, [r7, #12]
  4014b8:	60b9      	str	r1, [r7, #8]
  4014ba:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4014bc:	68bb      	ldr	r3, [r7, #8]
  4014be:	2b00      	cmp	r3, #0
  4014c0:	d007      	beq.n	4014d2 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4014c2:	68bb      	ldr	r3, [r7, #8]
  4014c4:	681a      	ldr	r2, [r3, #0]
  4014c6:	68fb      	ldr	r3, [r7, #12]
  4014c8:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4014ca:	68bb      	ldr	r3, [r7, #8]
  4014cc:	685a      	ldr	r2, [r3, #4]
  4014ce:	68fb      	ldr	r3, [r7, #12]
  4014d0:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  4014d2:	687b      	ldr	r3, [r7, #4]
  4014d4:	2b00      	cmp	r3, #0
  4014d6:	d007      	beq.n	4014e8 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  4014d8:	687b      	ldr	r3, [r7, #4]
  4014da:	681a      	ldr	r2, [r3, #0]
  4014dc:	68fb      	ldr	r3, [r7, #12]
  4014de:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4014e0:	687b      	ldr	r3, [r7, #4]
  4014e2:	685a      	ldr	r2, [r3, #4]
  4014e4:	68fb      	ldr	r3, [r7, #12]
  4014e6:	61da      	str	r2, [r3, #28]
	}
}
  4014e8:	bf00      	nop
  4014ea:	3714      	adds	r7, #20
  4014ec:	46bd      	mov	sp, r7
  4014ee:	bc80      	pop	{r7}
  4014f0:	4770      	bx	lr
  4014f2:	bf00      	nop

004014f4 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4014f4:	b480      	push	{r7}
  4014f6:	b085      	sub	sp, #20
  4014f8:	af00      	add	r7, sp, #0
  4014fa:	60f8      	str	r0, [r7, #12]
  4014fc:	60b9      	str	r1, [r7, #8]
  4014fe:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  401500:	68bb      	ldr	r3, [r7, #8]
  401502:	2b00      	cmp	r3, #0
  401504:	d007      	beq.n	401516 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  401506:	68bb      	ldr	r3, [r7, #8]
  401508:	681a      	ldr	r2, [r3, #0]
  40150a:	68fb      	ldr	r3, [r7, #12]
  40150c:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  40150e:	68bb      	ldr	r3, [r7, #8]
  401510:	685a      	ldr	r2, [r3, #4]
  401512:	68fb      	ldr	r3, [r7, #12]
  401514:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  401516:	687b      	ldr	r3, [r7, #4]
  401518:	2b00      	cmp	r3, #0
  40151a:	d007      	beq.n	40152c <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  40151c:	687b      	ldr	r3, [r7, #4]
  40151e:	681a      	ldr	r2, [r3, #0]
  401520:	68fb      	ldr	r3, [r7, #12]
  401522:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  401524:	687b      	ldr	r3, [r7, #4]
  401526:	685a      	ldr	r2, [r3, #4]
  401528:	68fb      	ldr	r3, [r7, #12]
  40152a:	615a      	str	r2, [r3, #20]
	}
}
  40152c:	bf00      	nop
  40152e:	3714      	adds	r7, #20
  401530:	46bd      	mov	sp, r7
  401532:	bc80      	pop	{r7}
  401534:	4770      	bx	lr
  401536:	bf00      	nop

00401538 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  401538:	b480      	push	{r7}
  40153a:	b083      	sub	sp, #12
  40153c:	af00      	add	r7, sp, #0
  40153e:	6078      	str	r0, [r7, #4]
  401540:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  401542:	683a      	ldr	r2, [r7, #0]
  401544:	f240 1301 	movw	r3, #257	; 0x101
  401548:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40154a:	687a      	ldr	r2, [r7, #4]
  40154c:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  40154e:	bf00      	nop
  401550:	370c      	adds	r7, #12
  401552:	46bd      	mov	sp, r7
  401554:	bc80      	pop	{r7}
  401556:	4770      	bx	lr

00401558 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  401558:	b480      	push	{r7}
  40155a:	b083      	sub	sp, #12
  40155c:	af00      	add	r7, sp, #0
  40155e:	6078      	str	r0, [r7, #4]
  401560:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  401562:	683a      	ldr	r2, [r7, #0]
  401564:	f240 2302 	movw	r3, #514	; 0x202
  401568:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40156a:	687a      	ldr	r2, [r7, #4]
  40156c:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  40156e:	bf00      	nop
  401570:	370c      	adds	r7, #12
  401572:	46bd      	mov	sp, r7
  401574:	bc80      	pop	{r7}
  401576:	4770      	bx	lr

00401578 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  401578:	b480      	push	{r7}
  40157a:	b083      	sub	sp, #12
  40157c:	af00      	add	r7, sp, #0
  40157e:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  401580:	687b      	ldr	r3, [r7, #4]
  401582:	685b      	ldr	r3, [r3, #4]
}
  401584:	4618      	mov	r0, r3
  401586:	370c      	adds	r7, #12
  401588:	46bd      	mov	sp, r7
  40158a:	bc80      	pop	{r7}
  40158c:	4770      	bx	lr
  40158e:	bf00      	nop

00401590 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401590:	b480      	push	{r7}
  401592:	b085      	sub	sp, #20
  401594:	af00      	add	r7, sp, #0
  401596:	60f8      	str	r0, [r7, #12]
  401598:	60b9      	str	r1, [r7, #8]
  40159a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40159c:	687b      	ldr	r3, [r7, #4]
  40159e:	2b00      	cmp	r3, #0
  4015a0:	d003      	beq.n	4015aa <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4015a2:	68fb      	ldr	r3, [r7, #12]
  4015a4:	68ba      	ldr	r2, [r7, #8]
  4015a6:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4015a8:	e002      	b.n	4015b0 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4015aa:	68fb      	ldr	r3, [r7, #12]
  4015ac:	68ba      	ldr	r2, [r7, #8]
  4015ae:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  4015b0:	bf00      	nop
  4015b2:	3714      	adds	r7, #20
  4015b4:	46bd      	mov	sp, r7
  4015b6:	bc80      	pop	{r7}
  4015b8:	4770      	bx	lr
  4015ba:	bf00      	nop

004015bc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4015bc:	b480      	push	{r7}
  4015be:	b087      	sub	sp, #28
  4015c0:	af00      	add	r7, sp, #0
  4015c2:	60f8      	str	r0, [r7, #12]
  4015c4:	60b9      	str	r1, [r7, #8]
  4015c6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4015c8:	68fb      	ldr	r3, [r7, #12]
  4015ca:	687a      	ldr	r2, [r7, #4]
  4015cc:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4015ce:	68bb      	ldr	r3, [r7, #8]
  4015d0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4015d4:	d04a      	beq.n	40166c <pio_set_peripheral+0xb0>
  4015d6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4015da:	d808      	bhi.n	4015ee <pio_set_peripheral+0x32>
  4015dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4015e0:	d016      	beq.n	401610 <pio_set_peripheral+0x54>
  4015e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4015e6:	d02c      	beq.n	401642 <pio_set_peripheral+0x86>
  4015e8:	2b00      	cmp	r3, #0
  4015ea:	d069      	beq.n	4016c0 <pio_set_peripheral+0x104>
  4015ec:	e064      	b.n	4016b8 <pio_set_peripheral+0xfc>
  4015ee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4015f2:	d065      	beq.n	4016c0 <pio_set_peripheral+0x104>
  4015f4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4015f8:	d803      	bhi.n	401602 <pio_set_peripheral+0x46>
  4015fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4015fe:	d04a      	beq.n	401696 <pio_set_peripheral+0xda>
  401600:	e05a      	b.n	4016b8 <pio_set_peripheral+0xfc>
  401602:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401606:	d05b      	beq.n	4016c0 <pio_set_peripheral+0x104>
  401608:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40160c:	d058      	beq.n	4016c0 <pio_set_peripheral+0x104>
  40160e:	e053      	b.n	4016b8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401610:	68fb      	ldr	r3, [r7, #12]
  401612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401614:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401616:	68fb      	ldr	r3, [r7, #12]
  401618:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40161a:	687b      	ldr	r3, [r7, #4]
  40161c:	43d9      	mvns	r1, r3
  40161e:	697b      	ldr	r3, [r7, #20]
  401620:	400b      	ands	r3, r1
  401622:	401a      	ands	r2, r3
  401624:	68fb      	ldr	r3, [r7, #12]
  401626:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401628:	68fb      	ldr	r3, [r7, #12]
  40162a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40162c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40162e:	68fb      	ldr	r3, [r7, #12]
  401630:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401632:	687b      	ldr	r3, [r7, #4]
  401634:	43d9      	mvns	r1, r3
  401636:	697b      	ldr	r3, [r7, #20]
  401638:	400b      	ands	r3, r1
  40163a:	401a      	ands	r2, r3
  40163c:	68fb      	ldr	r3, [r7, #12]
  40163e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401640:	e03a      	b.n	4016b8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401642:	68fb      	ldr	r3, [r7, #12]
  401644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401646:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401648:	687a      	ldr	r2, [r7, #4]
  40164a:	697b      	ldr	r3, [r7, #20]
  40164c:	431a      	orrs	r2, r3
  40164e:	68fb      	ldr	r3, [r7, #12]
  401650:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401652:	68fb      	ldr	r3, [r7, #12]
  401654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401656:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401658:	68fb      	ldr	r3, [r7, #12]
  40165a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40165c:	687b      	ldr	r3, [r7, #4]
  40165e:	43d9      	mvns	r1, r3
  401660:	697b      	ldr	r3, [r7, #20]
  401662:	400b      	ands	r3, r1
  401664:	401a      	ands	r2, r3
  401666:	68fb      	ldr	r3, [r7, #12]
  401668:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40166a:	e025      	b.n	4016b8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40166c:	68fb      	ldr	r3, [r7, #12]
  40166e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401670:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401672:	68fb      	ldr	r3, [r7, #12]
  401674:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401676:	687b      	ldr	r3, [r7, #4]
  401678:	43d9      	mvns	r1, r3
  40167a:	697b      	ldr	r3, [r7, #20]
  40167c:	400b      	ands	r3, r1
  40167e:	401a      	ands	r2, r3
  401680:	68fb      	ldr	r3, [r7, #12]
  401682:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401684:	68fb      	ldr	r3, [r7, #12]
  401686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401688:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40168a:	687a      	ldr	r2, [r7, #4]
  40168c:	697b      	ldr	r3, [r7, #20]
  40168e:	431a      	orrs	r2, r3
  401690:	68fb      	ldr	r3, [r7, #12]
  401692:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401694:	e010      	b.n	4016b8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401696:	68fb      	ldr	r3, [r7, #12]
  401698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40169a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40169c:	687a      	ldr	r2, [r7, #4]
  40169e:	697b      	ldr	r3, [r7, #20]
  4016a0:	431a      	orrs	r2, r3
  4016a2:	68fb      	ldr	r3, [r7, #12]
  4016a4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4016a6:	68fb      	ldr	r3, [r7, #12]
  4016a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4016aa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4016ac:	687a      	ldr	r2, [r7, #4]
  4016ae:	697b      	ldr	r3, [r7, #20]
  4016b0:	431a      	orrs	r2, r3
  4016b2:	68fb      	ldr	r3, [r7, #12]
  4016b4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4016b6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4016b8:	68fb      	ldr	r3, [r7, #12]
  4016ba:	687a      	ldr	r2, [r7, #4]
  4016bc:	605a      	str	r2, [r3, #4]
  4016be:	e000      	b.n	4016c2 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  4016c0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  4016c2:	371c      	adds	r7, #28
  4016c4:	46bd      	mov	sp, r7
  4016c6:	bc80      	pop	{r7}
  4016c8:	4770      	bx	lr
  4016ca:	bf00      	nop

004016cc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4016cc:	b580      	push	{r7, lr}
  4016ce:	b084      	sub	sp, #16
  4016d0:	af00      	add	r7, sp, #0
  4016d2:	60f8      	str	r0, [r7, #12]
  4016d4:	60b9      	str	r1, [r7, #8]
  4016d6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4016d8:	68b9      	ldr	r1, [r7, #8]
  4016da:	68f8      	ldr	r0, [r7, #12]
  4016dc:	4b19      	ldr	r3, [pc, #100]	; (401744 <pio_set_input+0x78>)
  4016de:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4016e0:	687b      	ldr	r3, [r7, #4]
  4016e2:	f003 0301 	and.w	r3, r3, #1
  4016e6:	461a      	mov	r2, r3
  4016e8:	68b9      	ldr	r1, [r7, #8]
  4016ea:	68f8      	ldr	r0, [r7, #12]
  4016ec:	4b16      	ldr	r3, [pc, #88]	; (401748 <pio_set_input+0x7c>)
  4016ee:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4016f0:	687b      	ldr	r3, [r7, #4]
  4016f2:	f003 030a 	and.w	r3, r3, #10
  4016f6:	2b00      	cmp	r3, #0
  4016f8:	d003      	beq.n	401702 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4016fa:	68fb      	ldr	r3, [r7, #12]
  4016fc:	68ba      	ldr	r2, [r7, #8]
  4016fe:	621a      	str	r2, [r3, #32]
  401700:	e002      	b.n	401708 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401702:	68fb      	ldr	r3, [r7, #12]
  401704:	68ba      	ldr	r2, [r7, #8]
  401706:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401708:	687b      	ldr	r3, [r7, #4]
  40170a:	f003 0302 	and.w	r3, r3, #2
  40170e:	2b00      	cmp	r3, #0
  401710:	d004      	beq.n	40171c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401712:	68fb      	ldr	r3, [r7, #12]
  401714:	68ba      	ldr	r2, [r7, #8]
  401716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40171a:	e008      	b.n	40172e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40171c:	687b      	ldr	r3, [r7, #4]
  40171e:	f003 0308 	and.w	r3, r3, #8
  401722:	2b00      	cmp	r3, #0
  401724:	d003      	beq.n	40172e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401726:	68fb      	ldr	r3, [r7, #12]
  401728:	68ba      	ldr	r2, [r7, #8]
  40172a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40172e:	68fb      	ldr	r3, [r7, #12]
  401730:	68ba      	ldr	r2, [r7, #8]
  401732:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401734:	68fb      	ldr	r3, [r7, #12]
  401736:	68ba      	ldr	r2, [r7, #8]
  401738:	601a      	str	r2, [r3, #0]
}
  40173a:	bf00      	nop
  40173c:	3710      	adds	r7, #16
  40173e:	46bd      	mov	sp, r7
  401740:	bd80      	pop	{r7, pc}
  401742:	bf00      	nop
  401744:	004017b1 	.word	0x004017b1
  401748:	00401591 	.word	0x00401591

0040174c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40174c:	b580      	push	{r7, lr}
  40174e:	b084      	sub	sp, #16
  401750:	af00      	add	r7, sp, #0
  401752:	60f8      	str	r0, [r7, #12]
  401754:	60b9      	str	r1, [r7, #8]
  401756:	607a      	str	r2, [r7, #4]
  401758:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40175a:	68b9      	ldr	r1, [r7, #8]
  40175c:	68f8      	ldr	r0, [r7, #12]
  40175e:	4b12      	ldr	r3, [pc, #72]	; (4017a8 <pio_set_output+0x5c>)
  401760:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401762:	69ba      	ldr	r2, [r7, #24]
  401764:	68b9      	ldr	r1, [r7, #8]
  401766:	68f8      	ldr	r0, [r7, #12]
  401768:	4b10      	ldr	r3, [pc, #64]	; (4017ac <pio_set_output+0x60>)
  40176a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40176c:	683b      	ldr	r3, [r7, #0]
  40176e:	2b00      	cmp	r3, #0
  401770:	d003      	beq.n	40177a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401772:	68fb      	ldr	r3, [r7, #12]
  401774:	68ba      	ldr	r2, [r7, #8]
  401776:	651a      	str	r2, [r3, #80]	; 0x50
  401778:	e002      	b.n	401780 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40177a:	68fb      	ldr	r3, [r7, #12]
  40177c:	68ba      	ldr	r2, [r7, #8]
  40177e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401780:	687b      	ldr	r3, [r7, #4]
  401782:	2b00      	cmp	r3, #0
  401784:	d003      	beq.n	40178e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401786:	68fb      	ldr	r3, [r7, #12]
  401788:	68ba      	ldr	r2, [r7, #8]
  40178a:	631a      	str	r2, [r3, #48]	; 0x30
  40178c:	e002      	b.n	401794 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40178e:	68fb      	ldr	r3, [r7, #12]
  401790:	68ba      	ldr	r2, [r7, #8]
  401792:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401794:	68fb      	ldr	r3, [r7, #12]
  401796:	68ba      	ldr	r2, [r7, #8]
  401798:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40179a:	68fb      	ldr	r3, [r7, #12]
  40179c:	68ba      	ldr	r2, [r7, #8]
  40179e:	601a      	str	r2, [r3, #0]
}
  4017a0:	bf00      	nop
  4017a2:	3710      	adds	r7, #16
  4017a4:	46bd      	mov	sp, r7
  4017a6:	bd80      	pop	{r7, pc}
  4017a8:	004017b1 	.word	0x004017b1
  4017ac:	00401591 	.word	0x00401591

004017b0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4017b0:	b480      	push	{r7}
  4017b2:	b083      	sub	sp, #12
  4017b4:	af00      	add	r7, sp, #0
  4017b6:	6078      	str	r0, [r7, #4]
  4017b8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4017ba:	687b      	ldr	r3, [r7, #4]
  4017bc:	683a      	ldr	r2, [r7, #0]
  4017be:	645a      	str	r2, [r3, #68]	; 0x44
}
  4017c0:	bf00      	nop
  4017c2:	370c      	adds	r7, #12
  4017c4:	46bd      	mov	sp, r7
  4017c6:	bc80      	pop	{r7}
  4017c8:	4770      	bx	lr
  4017ca:	bf00      	nop

004017cc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4017cc:	b480      	push	{r7}
  4017ce:	b083      	sub	sp, #12
  4017d0:	af00      	add	r7, sp, #0
  4017d2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4017d4:	687b      	ldr	r3, [r7, #4]
  4017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4017d8:	4618      	mov	r0, r3
  4017da:	370c      	adds	r7, #12
  4017dc:	46bd      	mov	sp, r7
  4017de:	bc80      	pop	{r7}
  4017e0:	4770      	bx	lr
  4017e2:	bf00      	nop

004017e4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4017e4:	b480      	push	{r7}
  4017e6:	b083      	sub	sp, #12
  4017e8:	af00      	add	r7, sp, #0
  4017ea:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4017ec:	687b      	ldr	r3, [r7, #4]
  4017ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4017f0:	4618      	mov	r0, r3
  4017f2:	370c      	adds	r7, #12
  4017f4:	46bd      	mov	sp, r7
  4017f6:	bc80      	pop	{r7}
  4017f8:	4770      	bx	lr
  4017fa:	bf00      	nop

004017fc <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
  4017fc:	b580      	push	{r7, lr}
  4017fe:	b084      	sub	sp, #16
  401800:	af00      	add	r7, sp, #0
  401802:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401804:	6878      	ldr	r0, [r7, #4]
  401806:	4b08      	ldr	r3, [pc, #32]	; (401828 <pio_get_pin_value+0x2c>)
  401808:	4798      	blx	r3
  40180a:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  40180c:	68fb      	ldr	r3, [r7, #12]
  40180e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401810:	687b      	ldr	r3, [r7, #4]
  401812:	f003 031f 	and.w	r3, r3, #31
  401816:	fa22 f303 	lsr.w	r3, r2, r3
  40181a:	f003 0301 	and.w	r3, r3, #1
}
  40181e:	4618      	mov	r0, r3
  401820:	3710      	adds	r7, #16
  401822:	46bd      	mov	sp, r7
  401824:	bd80      	pop	{r7, pc}
  401826:	bf00      	nop
  401828:	00401b69 	.word	0x00401b69

0040182c <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  40182c:	b580      	push	{r7, lr}
  40182e:	b084      	sub	sp, #16
  401830:	af00      	add	r7, sp, #0
  401832:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401834:	6878      	ldr	r0, [r7, #4]
  401836:	4b08      	ldr	r3, [pc, #32]	; (401858 <pio_set_pin_high+0x2c>)
  401838:	4798      	blx	r3
  40183a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40183c:	687b      	ldr	r3, [r7, #4]
  40183e:	f003 031f 	and.w	r3, r3, #31
  401842:	2201      	movs	r2, #1
  401844:	fa02 f303 	lsl.w	r3, r2, r3
  401848:	461a      	mov	r2, r3
  40184a:	68fb      	ldr	r3, [r7, #12]
  40184c:	631a      	str	r2, [r3, #48]	; 0x30
}
  40184e:	bf00      	nop
  401850:	3710      	adds	r7, #16
  401852:	46bd      	mov	sp, r7
  401854:	bd80      	pop	{r7, pc}
  401856:	bf00      	nop
  401858:	00401b69 	.word	0x00401b69

0040185c <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  40185c:	b580      	push	{r7, lr}
  40185e:	b084      	sub	sp, #16
  401860:	af00      	add	r7, sp, #0
  401862:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401864:	6878      	ldr	r0, [r7, #4]
  401866:	4b08      	ldr	r3, [pc, #32]	; (401888 <pio_set_pin_low+0x2c>)
  401868:	4798      	blx	r3
  40186a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40186c:	687b      	ldr	r3, [r7, #4]
  40186e:	f003 031f 	and.w	r3, r3, #31
  401872:	2201      	movs	r2, #1
  401874:	fa02 f303 	lsl.w	r3, r2, r3
  401878:	461a      	mov	r2, r3
  40187a:	68fb      	ldr	r3, [r7, #12]
  40187c:	635a      	str	r2, [r3, #52]	; 0x34
}
  40187e:	bf00      	nop
  401880:	3710      	adds	r7, #16
  401882:	46bd      	mov	sp, r7
  401884:	bd80      	pop	{r7, pc}
  401886:	bf00      	nop
  401888:	00401b69 	.word	0x00401b69

0040188c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40188c:	b590      	push	{r4, r7, lr}
  40188e:	b087      	sub	sp, #28
  401890:	af02      	add	r7, sp, #8
  401892:	6078      	str	r0, [r7, #4]
  401894:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401896:	6878      	ldr	r0, [r7, #4]
  401898:	4b63      	ldr	r3, [pc, #396]	; (401a28 <pio_configure_pin+0x19c>)
  40189a:	4798      	blx	r3
  40189c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40189e:	683b      	ldr	r3, [r7, #0]
  4018a0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4018a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4018a8:	d067      	beq.n	40197a <pio_configure_pin+0xee>
  4018aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4018ae:	d809      	bhi.n	4018c4 <pio_configure_pin+0x38>
  4018b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4018b4:	d02b      	beq.n	40190e <pio_configure_pin+0x82>
  4018b6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4018ba:	d043      	beq.n	401944 <pio_configure_pin+0xb8>
  4018bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4018c0:	d00a      	beq.n	4018d8 <pio_configure_pin+0x4c>
  4018c2:	e0a9      	b.n	401a18 <pio_configure_pin+0x18c>
  4018c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4018c8:	d07e      	beq.n	4019c8 <pio_configure_pin+0x13c>
  4018ca:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4018ce:	d07b      	beq.n	4019c8 <pio_configure_pin+0x13c>
  4018d0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4018d4:	d06c      	beq.n	4019b0 <pio_configure_pin+0x124>
  4018d6:	e09f      	b.n	401a18 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4018d8:	687b      	ldr	r3, [r7, #4]
  4018da:	f003 031f 	and.w	r3, r3, #31
  4018de:	2201      	movs	r2, #1
  4018e0:	fa02 f303 	lsl.w	r3, r2, r3
  4018e4:	461a      	mov	r2, r3
  4018e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4018ea:	68f8      	ldr	r0, [r7, #12]
  4018ec:	4b4f      	ldr	r3, [pc, #316]	; (401a2c <pio_configure_pin+0x1a0>)
  4018ee:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4018f0:	687b      	ldr	r3, [r7, #4]
  4018f2:	f003 031f 	and.w	r3, r3, #31
  4018f6:	2201      	movs	r2, #1
  4018f8:	fa02 f303 	lsl.w	r3, r2, r3
  4018fc:	4619      	mov	r1, r3
  4018fe:	683b      	ldr	r3, [r7, #0]
  401900:	f003 0301 	and.w	r3, r3, #1
  401904:	461a      	mov	r2, r3
  401906:	68f8      	ldr	r0, [r7, #12]
  401908:	4b49      	ldr	r3, [pc, #292]	; (401a30 <pio_configure_pin+0x1a4>)
  40190a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40190c:	e086      	b.n	401a1c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40190e:	687b      	ldr	r3, [r7, #4]
  401910:	f003 031f 	and.w	r3, r3, #31
  401914:	2201      	movs	r2, #1
  401916:	fa02 f303 	lsl.w	r3, r2, r3
  40191a:	461a      	mov	r2, r3
  40191c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401920:	68f8      	ldr	r0, [r7, #12]
  401922:	4b42      	ldr	r3, [pc, #264]	; (401a2c <pio_configure_pin+0x1a0>)
  401924:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401926:	687b      	ldr	r3, [r7, #4]
  401928:	f003 031f 	and.w	r3, r3, #31
  40192c:	2201      	movs	r2, #1
  40192e:	fa02 f303 	lsl.w	r3, r2, r3
  401932:	4619      	mov	r1, r3
  401934:	683b      	ldr	r3, [r7, #0]
  401936:	f003 0301 	and.w	r3, r3, #1
  40193a:	461a      	mov	r2, r3
  40193c:	68f8      	ldr	r0, [r7, #12]
  40193e:	4b3c      	ldr	r3, [pc, #240]	; (401a30 <pio_configure_pin+0x1a4>)
  401940:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401942:	e06b      	b.n	401a1c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401944:	687b      	ldr	r3, [r7, #4]
  401946:	f003 031f 	and.w	r3, r3, #31
  40194a:	2201      	movs	r2, #1
  40194c:	fa02 f303 	lsl.w	r3, r2, r3
  401950:	461a      	mov	r2, r3
  401952:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401956:	68f8      	ldr	r0, [r7, #12]
  401958:	4b34      	ldr	r3, [pc, #208]	; (401a2c <pio_configure_pin+0x1a0>)
  40195a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40195c:	687b      	ldr	r3, [r7, #4]
  40195e:	f003 031f 	and.w	r3, r3, #31
  401962:	2201      	movs	r2, #1
  401964:	fa02 f303 	lsl.w	r3, r2, r3
  401968:	4619      	mov	r1, r3
  40196a:	683b      	ldr	r3, [r7, #0]
  40196c:	f003 0301 	and.w	r3, r3, #1
  401970:	461a      	mov	r2, r3
  401972:	68f8      	ldr	r0, [r7, #12]
  401974:	4b2e      	ldr	r3, [pc, #184]	; (401a30 <pio_configure_pin+0x1a4>)
  401976:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401978:	e050      	b.n	401a1c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40197a:	687b      	ldr	r3, [r7, #4]
  40197c:	f003 031f 	and.w	r3, r3, #31
  401980:	2201      	movs	r2, #1
  401982:	fa02 f303 	lsl.w	r3, r2, r3
  401986:	461a      	mov	r2, r3
  401988:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40198c:	68f8      	ldr	r0, [r7, #12]
  40198e:	4b27      	ldr	r3, [pc, #156]	; (401a2c <pio_configure_pin+0x1a0>)
  401990:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401992:	687b      	ldr	r3, [r7, #4]
  401994:	f003 031f 	and.w	r3, r3, #31
  401998:	2201      	movs	r2, #1
  40199a:	fa02 f303 	lsl.w	r3, r2, r3
  40199e:	4619      	mov	r1, r3
  4019a0:	683b      	ldr	r3, [r7, #0]
  4019a2:	f003 0301 	and.w	r3, r3, #1
  4019a6:	461a      	mov	r2, r3
  4019a8:	68f8      	ldr	r0, [r7, #12]
  4019aa:	4b21      	ldr	r3, [pc, #132]	; (401a30 <pio_configure_pin+0x1a4>)
  4019ac:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4019ae:	e035      	b.n	401a1c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4019b0:	687b      	ldr	r3, [r7, #4]
  4019b2:	f003 031f 	and.w	r3, r3, #31
  4019b6:	2201      	movs	r2, #1
  4019b8:	fa02 f303 	lsl.w	r3, r2, r3
  4019bc:	683a      	ldr	r2, [r7, #0]
  4019be:	4619      	mov	r1, r3
  4019c0:	68f8      	ldr	r0, [r7, #12]
  4019c2:	4b1c      	ldr	r3, [pc, #112]	; (401a34 <pio_configure_pin+0x1a8>)
  4019c4:	4798      	blx	r3
		break;
  4019c6:	e029      	b.n	401a1c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4019c8:	687b      	ldr	r3, [r7, #4]
  4019ca:	f003 031f 	and.w	r3, r3, #31
  4019ce:	2201      	movs	r2, #1
  4019d0:	fa02 f303 	lsl.w	r3, r2, r3
  4019d4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4019d6:	683b      	ldr	r3, [r7, #0]
  4019d8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4019dc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4019e0:	bf0c      	ite	eq
  4019e2:	2301      	moveq	r3, #1
  4019e4:	2300      	movne	r3, #0
  4019e6:	b2db      	uxtb	r3, r3
  4019e8:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4019ea:	683b      	ldr	r3, [r7, #0]
  4019ec:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4019f0:	2b00      	cmp	r3, #0
  4019f2:	bf14      	ite	ne
  4019f4:	2301      	movne	r3, #1
  4019f6:	2300      	moveq	r3, #0
  4019f8:	b2db      	uxtb	r3, r3
  4019fa:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4019fc:	683b      	ldr	r3, [r7, #0]
  4019fe:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401a02:	2b00      	cmp	r3, #0
  401a04:	bf14      	ite	ne
  401a06:	2301      	movne	r3, #1
  401a08:	2300      	moveq	r3, #0
  401a0a:	b2db      	uxtb	r3, r3
  401a0c:	9300      	str	r3, [sp, #0]
  401a0e:	4603      	mov	r3, r0
  401a10:	68f8      	ldr	r0, [r7, #12]
  401a12:	4c09      	ldr	r4, [pc, #36]	; (401a38 <pio_configure_pin+0x1ac>)
  401a14:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401a16:	e001      	b.n	401a1c <pio_configure_pin+0x190>

	default:
		return 0;
  401a18:	2300      	movs	r3, #0
  401a1a:	e000      	b.n	401a1e <pio_configure_pin+0x192>
	}

	return 1;
  401a1c:	2301      	movs	r3, #1
}
  401a1e:	4618      	mov	r0, r3
  401a20:	3714      	adds	r7, #20
  401a22:	46bd      	mov	sp, r7
  401a24:	bd90      	pop	{r4, r7, pc}
  401a26:	bf00      	nop
  401a28:	00401b69 	.word	0x00401b69
  401a2c:	004015bd 	.word	0x004015bd
  401a30:	00401591 	.word	0x00401591
  401a34:	004016cd 	.word	0x004016cd
  401a38:	0040174d 	.word	0x0040174d

00401a3c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401a3c:	b590      	push	{r4, r7, lr}
  401a3e:	b087      	sub	sp, #28
  401a40:	af02      	add	r7, sp, #8
  401a42:	60f8      	str	r0, [r7, #12]
  401a44:	60b9      	str	r1, [r7, #8]
  401a46:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401a48:	687b      	ldr	r3, [r7, #4]
  401a4a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401a52:	d043      	beq.n	401adc <pio_configure_pin_group+0xa0>
  401a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401a58:	d809      	bhi.n	401a6e <pio_configure_pin_group+0x32>
  401a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401a5e:	d01f      	beq.n	401aa0 <pio_configure_pin_group+0x64>
  401a60:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401a64:	d02b      	beq.n	401abe <pio_configure_pin_group+0x82>
  401a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401a6a:	d00a      	beq.n	401a82 <pio_configure_pin_group+0x46>
  401a6c:	e06d      	b.n	401b4a <pio_configure_pin_group+0x10e>
  401a6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401a72:	d048      	beq.n	401b06 <pio_configure_pin_group+0xca>
  401a74:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401a78:	d045      	beq.n	401b06 <pio_configure_pin_group+0xca>
  401a7a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401a7e:	d03c      	beq.n	401afa <pio_configure_pin_group+0xbe>
  401a80:	e063      	b.n	401b4a <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401a82:	68ba      	ldr	r2, [r7, #8]
  401a84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401a88:	68f8      	ldr	r0, [r7, #12]
  401a8a:	4b33      	ldr	r3, [pc, #204]	; (401b58 <pio_configure_pin_group+0x11c>)
  401a8c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401a8e:	687b      	ldr	r3, [r7, #4]
  401a90:	f003 0301 	and.w	r3, r3, #1
  401a94:	461a      	mov	r2, r3
  401a96:	68b9      	ldr	r1, [r7, #8]
  401a98:	68f8      	ldr	r0, [r7, #12]
  401a9a:	4b30      	ldr	r3, [pc, #192]	; (401b5c <pio_configure_pin_group+0x120>)
  401a9c:	4798      	blx	r3
		break;
  401a9e:	e056      	b.n	401b4e <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401aa0:	68ba      	ldr	r2, [r7, #8]
  401aa2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401aa6:	68f8      	ldr	r0, [r7, #12]
  401aa8:	4b2b      	ldr	r3, [pc, #172]	; (401b58 <pio_configure_pin_group+0x11c>)
  401aaa:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401aac:	687b      	ldr	r3, [r7, #4]
  401aae:	f003 0301 	and.w	r3, r3, #1
  401ab2:	461a      	mov	r2, r3
  401ab4:	68b9      	ldr	r1, [r7, #8]
  401ab6:	68f8      	ldr	r0, [r7, #12]
  401ab8:	4b28      	ldr	r3, [pc, #160]	; (401b5c <pio_configure_pin_group+0x120>)
  401aba:	4798      	blx	r3
		break;
  401abc:	e047      	b.n	401b4e <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401abe:	68ba      	ldr	r2, [r7, #8]
  401ac0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401ac4:	68f8      	ldr	r0, [r7, #12]
  401ac6:	4b24      	ldr	r3, [pc, #144]	; (401b58 <pio_configure_pin_group+0x11c>)
  401ac8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401aca:	687b      	ldr	r3, [r7, #4]
  401acc:	f003 0301 	and.w	r3, r3, #1
  401ad0:	461a      	mov	r2, r3
  401ad2:	68b9      	ldr	r1, [r7, #8]
  401ad4:	68f8      	ldr	r0, [r7, #12]
  401ad6:	4b21      	ldr	r3, [pc, #132]	; (401b5c <pio_configure_pin_group+0x120>)
  401ad8:	4798      	blx	r3
		break;
  401ada:	e038      	b.n	401b4e <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401adc:	68ba      	ldr	r2, [r7, #8]
  401ade:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401ae2:	68f8      	ldr	r0, [r7, #12]
  401ae4:	4b1c      	ldr	r3, [pc, #112]	; (401b58 <pio_configure_pin_group+0x11c>)
  401ae6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401ae8:	687b      	ldr	r3, [r7, #4]
  401aea:	f003 0301 	and.w	r3, r3, #1
  401aee:	461a      	mov	r2, r3
  401af0:	68b9      	ldr	r1, [r7, #8]
  401af2:	68f8      	ldr	r0, [r7, #12]
  401af4:	4b19      	ldr	r3, [pc, #100]	; (401b5c <pio_configure_pin_group+0x120>)
  401af6:	4798      	blx	r3
		break;
  401af8:	e029      	b.n	401b4e <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401afa:	687a      	ldr	r2, [r7, #4]
  401afc:	68b9      	ldr	r1, [r7, #8]
  401afe:	68f8      	ldr	r0, [r7, #12]
  401b00:	4b17      	ldr	r3, [pc, #92]	; (401b60 <pio_configure_pin_group+0x124>)
  401b02:	4798      	blx	r3
		break;
  401b04:	e023      	b.n	401b4e <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401b06:	687b      	ldr	r3, [r7, #4]
  401b08:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401b0c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401b10:	bf0c      	ite	eq
  401b12:	2301      	moveq	r3, #1
  401b14:	2300      	movne	r3, #0
  401b16:	b2db      	uxtb	r3, r3
  401b18:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401b1a:	687b      	ldr	r3, [r7, #4]
  401b1c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401b20:	2b00      	cmp	r3, #0
  401b22:	bf14      	ite	ne
  401b24:	2301      	movne	r3, #1
  401b26:	2300      	moveq	r3, #0
  401b28:	b2db      	uxtb	r3, r3
  401b2a:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401b2c:	687b      	ldr	r3, [r7, #4]
  401b2e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401b32:	2b00      	cmp	r3, #0
  401b34:	bf14      	ite	ne
  401b36:	2301      	movne	r3, #1
  401b38:	2300      	moveq	r3, #0
  401b3a:	b2db      	uxtb	r3, r3
  401b3c:	9300      	str	r3, [sp, #0]
  401b3e:	460b      	mov	r3, r1
  401b40:	68b9      	ldr	r1, [r7, #8]
  401b42:	68f8      	ldr	r0, [r7, #12]
  401b44:	4c07      	ldr	r4, [pc, #28]	; (401b64 <pio_configure_pin_group+0x128>)
  401b46:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401b48:	e001      	b.n	401b4e <pio_configure_pin_group+0x112>

	default:
		return 0;
  401b4a:	2300      	movs	r3, #0
  401b4c:	e000      	b.n	401b50 <pio_configure_pin_group+0x114>
	}

	return 1;
  401b4e:	2301      	movs	r3, #1
}
  401b50:	4618      	mov	r0, r3
  401b52:	3714      	adds	r7, #20
  401b54:	46bd      	mov	sp, r7
  401b56:	bd90      	pop	{r4, r7, pc}
  401b58:	004015bd 	.word	0x004015bd
  401b5c:	00401591 	.word	0x00401591
  401b60:	004016cd 	.word	0x004016cd
  401b64:	0040174d 	.word	0x0040174d

00401b68 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401b68:	b480      	push	{r7}
  401b6a:	b085      	sub	sp, #20
  401b6c:	af00      	add	r7, sp, #0
  401b6e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401b70:	687b      	ldr	r3, [r7, #4]
  401b72:	095b      	lsrs	r3, r3, #5
  401b74:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401b78:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401b7c:	025b      	lsls	r3, r3, #9
  401b7e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401b80:	68fb      	ldr	r3, [r7, #12]
}
  401b82:	4618      	mov	r0, r3
  401b84:	3714      	adds	r7, #20
  401b86:	46bd      	mov	sp, r7
  401b88:	bc80      	pop	{r7}
  401b8a:	4770      	bx	lr

00401b8c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401b8c:	b480      	push	{r7}
  401b8e:	b085      	sub	sp, #20
  401b90:	af00      	add	r7, sp, #0
  401b92:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401b94:	491c      	ldr	r1, [pc, #112]	; (401c08 <pmc_switch_mck_to_pllack+0x7c>)
  401b96:	4b1c      	ldr	r3, [pc, #112]	; (401c08 <pmc_switch_mck_to_pllack+0x7c>)
  401b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401b9e:	687b      	ldr	r3, [r7, #4]
  401ba0:	4313      	orrs	r3, r2
  401ba2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ba4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401ba8:	60fb      	str	r3, [r7, #12]
  401baa:	e007      	b.n	401bbc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401bac:	68fb      	ldr	r3, [r7, #12]
  401bae:	2b00      	cmp	r3, #0
  401bb0:	d101      	bne.n	401bb6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401bb2:	2301      	movs	r3, #1
  401bb4:	e023      	b.n	401bfe <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401bb6:	68fb      	ldr	r3, [r7, #12]
  401bb8:	3b01      	subs	r3, #1
  401bba:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401bbc:	4b12      	ldr	r3, [pc, #72]	; (401c08 <pmc_switch_mck_to_pllack+0x7c>)
  401bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401bc0:	f003 0308 	and.w	r3, r3, #8
  401bc4:	2b00      	cmp	r3, #0
  401bc6:	d0f1      	beq.n	401bac <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401bc8:	4a0f      	ldr	r2, [pc, #60]	; (401c08 <pmc_switch_mck_to_pllack+0x7c>)
  401bca:	4b0f      	ldr	r3, [pc, #60]	; (401c08 <pmc_switch_mck_to_pllack+0x7c>)
  401bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bce:	f023 0303 	bic.w	r3, r3, #3
  401bd2:	f043 0302 	orr.w	r3, r3, #2
  401bd6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401bdc:	60fb      	str	r3, [r7, #12]
  401bde:	e007      	b.n	401bf0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401be0:	68fb      	ldr	r3, [r7, #12]
  401be2:	2b00      	cmp	r3, #0
  401be4:	d101      	bne.n	401bea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401be6:	2301      	movs	r3, #1
  401be8:	e009      	b.n	401bfe <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401bea:	68fb      	ldr	r3, [r7, #12]
  401bec:	3b01      	subs	r3, #1
  401bee:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401bf0:	4b05      	ldr	r3, [pc, #20]	; (401c08 <pmc_switch_mck_to_pllack+0x7c>)
  401bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401bf4:	f003 0308 	and.w	r3, r3, #8
  401bf8:	2b00      	cmp	r3, #0
  401bfa:	d0f1      	beq.n	401be0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401bfc:	2300      	movs	r3, #0
}
  401bfe:	4618      	mov	r0, r3
  401c00:	3714      	adds	r7, #20
  401c02:	46bd      	mov	sp, r7
  401c04:	bc80      	pop	{r7}
  401c06:	4770      	bx	lr
  401c08:	400e0400 	.word	0x400e0400

00401c0c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401c0c:	b480      	push	{r7}
  401c0e:	b083      	sub	sp, #12
  401c10:	af00      	add	r7, sp, #0
  401c12:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401c14:	687b      	ldr	r3, [r7, #4]
  401c16:	2b01      	cmp	r3, #1
  401c18:	d107      	bne.n	401c2a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401c1a:	4a08      	ldr	r2, [pc, #32]	; (401c3c <pmc_switch_sclk_to_32kxtal+0x30>)
  401c1c:	4b07      	ldr	r3, [pc, #28]	; (401c3c <pmc_switch_sclk_to_32kxtal+0x30>)
  401c1e:	689b      	ldr	r3, [r3, #8]
  401c20:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401c28:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401c2a:	4b04      	ldr	r3, [pc, #16]	; (401c3c <pmc_switch_sclk_to_32kxtal+0x30>)
  401c2c:	4a04      	ldr	r2, [pc, #16]	; (401c40 <pmc_switch_sclk_to_32kxtal+0x34>)
  401c2e:	601a      	str	r2, [r3, #0]
}
  401c30:	bf00      	nop
  401c32:	370c      	adds	r7, #12
  401c34:	46bd      	mov	sp, r7
  401c36:	bc80      	pop	{r7}
  401c38:	4770      	bx	lr
  401c3a:	bf00      	nop
  401c3c:	400e1410 	.word	0x400e1410
  401c40:	a5000008 	.word	0xa5000008

00401c44 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401c44:	b480      	push	{r7}
  401c46:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401c48:	4b09      	ldr	r3, [pc, #36]	; (401c70 <pmc_osc_is_ready_32kxtal+0x2c>)
  401c4a:	695b      	ldr	r3, [r3, #20]
  401c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401c50:	2b00      	cmp	r3, #0
  401c52:	d007      	beq.n	401c64 <pmc_osc_is_ready_32kxtal+0x20>
  401c54:	4b07      	ldr	r3, [pc, #28]	; (401c74 <pmc_osc_is_ready_32kxtal+0x30>)
  401c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401c5c:	2b00      	cmp	r3, #0
  401c5e:	d001      	beq.n	401c64 <pmc_osc_is_ready_32kxtal+0x20>
  401c60:	2301      	movs	r3, #1
  401c62:	e000      	b.n	401c66 <pmc_osc_is_ready_32kxtal+0x22>
  401c64:	2300      	movs	r3, #0
}
  401c66:	4618      	mov	r0, r3
  401c68:	46bd      	mov	sp, r7
  401c6a:	bc80      	pop	{r7}
  401c6c:	4770      	bx	lr
  401c6e:	bf00      	nop
  401c70:	400e1410 	.word	0x400e1410
  401c74:	400e0400 	.word	0x400e0400

00401c78 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401c78:	b480      	push	{r7}
  401c7a:	b083      	sub	sp, #12
  401c7c:	af00      	add	r7, sp, #0
  401c7e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401c80:	4a18      	ldr	r2, [pc, #96]	; (401ce4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401c82:	4b18      	ldr	r3, [pc, #96]	; (401ce4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401c84:	6a1b      	ldr	r3, [r3, #32]
  401c86:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401c8a:	f043 0308 	orr.w	r3, r3, #8
  401c8e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401c90:	bf00      	nop
  401c92:	4b14      	ldr	r3, [pc, #80]	; (401ce4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401c9a:	2b00      	cmp	r3, #0
  401c9c:	d0f9      	beq.n	401c92 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401c9e:	4911      	ldr	r1, [pc, #68]	; (401ce4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401ca0:	4b10      	ldr	r3, [pc, #64]	; (401ce4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401ca2:	6a1b      	ldr	r3, [r3, #32]
  401ca4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401cac:	687a      	ldr	r2, [r7, #4]
  401cae:	4313      	orrs	r3, r2
  401cb0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401cb4:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401cb6:	bf00      	nop
  401cb8:	4b0a      	ldr	r3, [pc, #40]	; (401ce4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401cc0:	2b00      	cmp	r3, #0
  401cc2:	d0f9      	beq.n	401cb8 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401cc4:	4a07      	ldr	r2, [pc, #28]	; (401ce4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401cc6:	4b07      	ldr	r3, [pc, #28]	; (401ce4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401cc8:	6a1b      	ldr	r3, [r3, #32]
  401cca:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401cd2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401cd6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401cd8:	bf00      	nop
  401cda:	370c      	adds	r7, #12
  401cdc:	46bd      	mov	sp, r7
  401cde:	bc80      	pop	{r7}
  401ce0:	4770      	bx	lr
  401ce2:	bf00      	nop
  401ce4:	400e0400 	.word	0x400e0400

00401ce8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401ce8:	b480      	push	{r7}
  401cea:	b083      	sub	sp, #12
  401cec:	af00      	add	r7, sp, #0
  401cee:	6078      	str	r0, [r7, #4]
  401cf0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401cf2:	687b      	ldr	r3, [r7, #4]
  401cf4:	2b00      	cmp	r3, #0
  401cf6:	d008      	beq.n	401d0a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401cf8:	4916      	ldr	r1, [pc, #88]	; (401d54 <pmc_switch_mainck_to_xtal+0x6c>)
  401cfa:	4b16      	ldr	r3, [pc, #88]	; (401d54 <pmc_switch_mainck_to_xtal+0x6c>)
  401cfc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401cfe:	4a16      	ldr	r2, [pc, #88]	; (401d58 <pmc_switch_mainck_to_xtal+0x70>)
  401d00:	401a      	ands	r2, r3
  401d02:	4b16      	ldr	r3, [pc, #88]	; (401d5c <pmc_switch_mainck_to_xtal+0x74>)
  401d04:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401d06:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401d08:	e01e      	b.n	401d48 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401d0a:	4912      	ldr	r1, [pc, #72]	; (401d54 <pmc_switch_mainck_to_xtal+0x6c>)
  401d0c:	4b11      	ldr	r3, [pc, #68]	; (401d54 <pmc_switch_mainck_to_xtal+0x6c>)
  401d0e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401d10:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401d14:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401d18:	683a      	ldr	r2, [r7, #0]
  401d1a:	0212      	lsls	r2, r2, #8
  401d1c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401d1e:	4313      	orrs	r3, r2
  401d20:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401d24:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401d28:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401d2a:	bf00      	nop
  401d2c:	4b09      	ldr	r3, [pc, #36]	; (401d54 <pmc_switch_mainck_to_xtal+0x6c>)
  401d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401d30:	f003 0301 	and.w	r3, r3, #1
  401d34:	2b00      	cmp	r3, #0
  401d36:	d0f9      	beq.n	401d2c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401d38:	4a06      	ldr	r2, [pc, #24]	; (401d54 <pmc_switch_mainck_to_xtal+0x6c>)
  401d3a:	4b06      	ldr	r3, [pc, #24]	; (401d54 <pmc_switch_mainck_to_xtal+0x6c>)
  401d3c:	6a1b      	ldr	r3, [r3, #32]
  401d3e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401d46:	6213      	str	r3, [r2, #32]
	}
}
  401d48:	bf00      	nop
  401d4a:	370c      	adds	r7, #12
  401d4c:	46bd      	mov	sp, r7
  401d4e:	bc80      	pop	{r7}
  401d50:	4770      	bx	lr
  401d52:	bf00      	nop
  401d54:	400e0400 	.word	0x400e0400
  401d58:	fec8fffc 	.word	0xfec8fffc
  401d5c:	01370002 	.word	0x01370002

00401d60 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401d60:	b480      	push	{r7}
  401d62:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401d64:	4b03      	ldr	r3, [pc, #12]	; (401d74 <pmc_osc_is_ready_mainck+0x14>)
  401d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401d6c:	4618      	mov	r0, r3
  401d6e:	46bd      	mov	sp, r7
  401d70:	bc80      	pop	{r7}
  401d72:	4770      	bx	lr
  401d74:	400e0400 	.word	0x400e0400

00401d78 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401d78:	b480      	push	{r7}
  401d7a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401d7c:	4b03      	ldr	r3, [pc, #12]	; (401d8c <pmc_disable_pllack+0x14>)
  401d7e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401d82:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401d84:	bf00      	nop
  401d86:	46bd      	mov	sp, r7
  401d88:	bc80      	pop	{r7}
  401d8a:	4770      	bx	lr
  401d8c:	400e0400 	.word	0x400e0400

00401d90 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401d90:	b480      	push	{r7}
  401d92:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401d94:	4b03      	ldr	r3, [pc, #12]	; (401da4 <pmc_is_locked_pllack+0x14>)
  401d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401d98:	f003 0302 	and.w	r3, r3, #2
}
  401d9c:	4618      	mov	r0, r3
  401d9e:	46bd      	mov	sp, r7
  401da0:	bc80      	pop	{r7}
  401da2:	4770      	bx	lr
  401da4:	400e0400 	.word	0x400e0400

00401da8 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401da8:	b480      	push	{r7}
  401daa:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401dac:	4b03      	ldr	r3, [pc, #12]	; (401dbc <pmc_disable_pllbck+0x14>)
  401dae:	2200      	movs	r2, #0
  401db0:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401db2:	bf00      	nop
  401db4:	46bd      	mov	sp, r7
  401db6:	bc80      	pop	{r7}
  401db8:	4770      	bx	lr
  401dba:	bf00      	nop
  401dbc:	400e0400 	.word	0x400e0400

00401dc0 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401dc0:	b480      	push	{r7}
  401dc2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401dc4:	4b03      	ldr	r3, [pc, #12]	; (401dd4 <pmc_is_locked_pllbck+0x14>)
  401dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401dc8:	f003 0304 	and.w	r3, r3, #4
}
  401dcc:	4618      	mov	r0, r3
  401dce:	46bd      	mov	sp, r7
  401dd0:	bc80      	pop	{r7}
  401dd2:	4770      	bx	lr
  401dd4:	400e0400 	.word	0x400e0400

00401dd8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401dd8:	b480      	push	{r7}
  401dda:	b083      	sub	sp, #12
  401ddc:	af00      	add	r7, sp, #0
  401dde:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401de0:	687b      	ldr	r3, [r7, #4]
  401de2:	2b22      	cmp	r3, #34	; 0x22
  401de4:	d901      	bls.n	401dea <pmc_enable_periph_clk+0x12>
		return 1;
  401de6:	2301      	movs	r3, #1
  401de8:	e02f      	b.n	401e4a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401dea:	687b      	ldr	r3, [r7, #4]
  401dec:	2b1f      	cmp	r3, #31
  401dee:	d813      	bhi.n	401e18 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401df0:	4b18      	ldr	r3, [pc, #96]	; (401e54 <pmc_enable_periph_clk+0x7c>)
  401df2:	699a      	ldr	r2, [r3, #24]
  401df4:	2101      	movs	r1, #1
  401df6:	687b      	ldr	r3, [r7, #4]
  401df8:	fa01 f303 	lsl.w	r3, r1, r3
  401dfc:	401a      	ands	r2, r3
  401dfe:	2101      	movs	r1, #1
  401e00:	687b      	ldr	r3, [r7, #4]
  401e02:	fa01 f303 	lsl.w	r3, r1, r3
  401e06:	429a      	cmp	r2, r3
  401e08:	d01e      	beq.n	401e48 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401e0a:	4a12      	ldr	r2, [pc, #72]	; (401e54 <pmc_enable_periph_clk+0x7c>)
  401e0c:	2101      	movs	r1, #1
  401e0e:	687b      	ldr	r3, [r7, #4]
  401e10:	fa01 f303 	lsl.w	r3, r1, r3
  401e14:	6113      	str	r3, [r2, #16]
  401e16:	e017      	b.n	401e48 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401e18:	687b      	ldr	r3, [r7, #4]
  401e1a:	3b20      	subs	r3, #32
  401e1c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401e1e:	4b0d      	ldr	r3, [pc, #52]	; (401e54 <pmc_enable_periph_clk+0x7c>)
  401e20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401e24:	2101      	movs	r1, #1
  401e26:	687b      	ldr	r3, [r7, #4]
  401e28:	fa01 f303 	lsl.w	r3, r1, r3
  401e2c:	401a      	ands	r2, r3
  401e2e:	2101      	movs	r1, #1
  401e30:	687b      	ldr	r3, [r7, #4]
  401e32:	fa01 f303 	lsl.w	r3, r1, r3
  401e36:	429a      	cmp	r2, r3
  401e38:	d006      	beq.n	401e48 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401e3a:	4a06      	ldr	r2, [pc, #24]	; (401e54 <pmc_enable_periph_clk+0x7c>)
  401e3c:	2101      	movs	r1, #1
  401e3e:	687b      	ldr	r3, [r7, #4]
  401e40:	fa01 f303 	lsl.w	r3, r1, r3
  401e44:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401e48:	2300      	movs	r3, #0
}
  401e4a:	4618      	mov	r0, r3
  401e4c:	370c      	adds	r7, #12
  401e4e:	46bd      	mov	sp, r7
  401e50:	bc80      	pop	{r7}
  401e52:	4770      	bx	lr
  401e54:	400e0400 	.word	0x400e0400

00401e58 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401e58:	b580      	push	{r7, lr}
  401e5a:	b082      	sub	sp, #8
  401e5c:	af00      	add	r7, sp, #0
  401e5e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401e60:	6878      	ldr	r0, [r7, #4]
  401e62:	4b03      	ldr	r3, [pc, #12]	; (401e70 <sysclk_enable_peripheral_clock+0x18>)
  401e64:	4798      	blx	r3
}
  401e66:	bf00      	nop
  401e68:	3708      	adds	r7, #8
  401e6a:	46bd      	mov	sp, r7
  401e6c:	bd80      	pop	{r7, pc}
  401e6e:	bf00      	nop
  401e70:	00401dd9 	.word	0x00401dd9

00401e74 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  401e74:	b580      	push	{r7, lr}
  401e76:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  401e78:	200b      	movs	r0, #11
  401e7a:	4b05      	ldr	r3, [pc, #20]	; (401e90 <ioport_init+0x1c>)
  401e7c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  401e7e:	200c      	movs	r0, #12
  401e80:	4b03      	ldr	r3, [pc, #12]	; (401e90 <ioport_init+0x1c>)
  401e82:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  401e84:	200d      	movs	r0, #13
  401e86:	4b02      	ldr	r3, [pc, #8]	; (401e90 <ioport_init+0x1c>)
  401e88:	4798      	blx	r3
	arch_ioport_init();
}
  401e8a:	bf00      	nop
  401e8c:	bd80      	pop	{r7, pc}
  401e8e:	bf00      	nop
  401e90:	00401e59 	.word	0x00401e59

00401e94 <board_init>:
#include "gpio.h"
#include "ioport.h"


void board_init(void)
{
  401e94:	b580      	push	{r7, lr}
  401e96:	af00      	add	r7, sp, #0
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	 
	 /* Disable the watchdog */
	 WDT->WDT_MR = WDT_MR_WDDIS;
  401e98:	4b28      	ldr	r3, [pc, #160]	; (401f3c <board_init+0xa8>)
  401e9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401e9e:	605a      	str	r2, [r3, #4]

	 /* Init IO Port service to enable configuring pins */
	 ioport_init();
  401ea0:	4b27      	ldr	r3, [pc, #156]	; (401f40 <board_init+0xac>)
  401ea2:	4798      	blx	r3
		#define RS485_USART_IRQn	USART0_IRQn
	 #endif
	 #if defined(CONF_UART0_PINS)
		gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
	 #else
		gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  401ea4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401ea8:	f04f 71b0 	mov.w	r1, #23068672	; 0x1600000
  401eac:	4825      	ldr	r0, [pc, #148]	; (401f44 <board_init+0xb0>)
  401eae:	4b26      	ldr	r3, [pc, #152]	; (401f48 <board_init+0xb4>)
  401eb0:	4798      	blx	r3
	 #endif

	 //Configure TWI0 Pins
	 gpio_configure_group(PINS_TWI0_PIO, PINS_TWI0, PINS_TWI0_FLAGS);
  401eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401eb6:	2118      	movs	r1, #24
  401eb8:	4822      	ldr	r0, [pc, #136]	; (401f44 <board_init+0xb0>)
  401eba:	4b23      	ldr	r3, [pc, #140]	; (401f48 <board_init+0xb4>)
  401ebc:	4798      	blx	r3

	 //Configure Mux Sel Pins
	 gpio_configure_pin(PIN_MUXSEL0_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401ebe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401ec2:	2005      	movs	r0, #5
  401ec4:	4b21      	ldr	r3, [pc, #132]	; (401f4c <board_init+0xb8>)
  401ec6:	4798      	blx	r3
	 gpio_configure_pin(PIN_MUXSEL1_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401ec8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401ecc:	2006      	movs	r0, #6
  401ece:	4b1f      	ldr	r3, [pc, #124]	; (401f4c <board_init+0xb8>)
  401ed0:	4798      	blx	r3
	 gpio_configure_pin(PIN_MUXSEL2_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401ed2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401ed6:	2024      	movs	r0, #36	; 0x24
  401ed8:	4b1c      	ldr	r3, [pc, #112]	; (401f4c <board_init+0xb8>)
  401eda:	4798      	blx	r3

	 //Configure Mux Sel Pins
	 gpio_configure_pin(PIN_AMUXSEL0_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401edc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401ee0:	2020      	movs	r0, #32
  401ee2:	4b1a      	ldr	r3, [pc, #104]	; (401f4c <board_init+0xb8>)
  401ee4:	4798      	blx	r3
	 gpio_configure_pin(PIN_AMUXSEL1_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401ee6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401eea:	2021      	movs	r0, #33	; 0x21
  401eec:	4b17      	ldr	r3, [pc, #92]	; (401f4c <board_init+0xb8>)
  401eee:	4798      	blx	r3
	 gpio_configure_pin(PIN_AMUXSEL2_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401ef0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401ef4:	2022      	movs	r0, #34	; 0x22
  401ef6:	4b15      	ldr	r3, [pc, #84]	; (401f4c <board_init+0xb8>)
  401ef8:	4798      	blx	r3

	 //Configure MUX Output Pins
	 gpio_configure_pin(PIN_MUXOUT0_IDX, (PIO_INPUT | PIO_DEFAULT));
  401efa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401efe:	2019      	movs	r0, #25
  401f00:	4b12      	ldr	r3, [pc, #72]	; (401f4c <board_init+0xb8>)
  401f02:	4798      	blx	r3
	 gpio_configure_pin(PIN_MUXOUT1_IDX, (PIO_INPUT | PIO_DEFAULT));
  401f04:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401f08:	201a      	movs	r0, #26
  401f0a:	4b10      	ldr	r3, [pc, #64]	; (401f4c <board_init+0xb8>)
  401f0c:	4798      	blx	r3
	 gpio_configure_pin(PIN_MUXOUT2_IDX, (PIO_INPUT | PIO_DEFAULT));
  401f0e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401f12:	200c      	movs	r0, #12
  401f14:	4b0d      	ldr	r3, [pc, #52]	; (401f4c <board_init+0xb8>)
  401f16:	4798      	blx	r3
	 gpio_configure_pin(PIN_MUXOUT3_IDX, (PIO_INPUT | PIO_DEFAULT));
  401f18:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401f1c:	200b      	movs	r0, #11
  401f1e:	4b0b      	ldr	r3, [pc, #44]	; (401f4c <board_init+0xb8>)
  401f20:	4798      	blx	r3

	 //Configure Debug Switch Pin
	 gpio_configure_pin(PIN_DEBUGSW_IDX, (PIO_INPUT | PIO_DEFAULT));
  401f22:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401f26:	2023      	movs	r0, #35	; 0x23
  401f28:	4b08      	ldr	r3, [pc, #32]	; (401f4c <board_init+0xb8>)
  401f2a:	4798      	blx	r3
	 
	 //Configure Debug LED Pin
	 gpio_configure_pin(PIN_DEBUGLED_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  401f2c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401f30:	2025      	movs	r0, #37	; 0x25
  401f32:	4b06      	ldr	r3, [pc, #24]	; (401f4c <board_init+0xb8>)
  401f34:	4798      	blx	r3
}
  401f36:	bf00      	nop
  401f38:	bd80      	pop	{r7, pc}
  401f3a:	bf00      	nop
  401f3c:	400e1450 	.word	0x400e1450
  401f40:	00401e75 	.word	0x00401e75
  401f44:	400e0e00 	.word	0x400e0e00
  401f48:	00401a3d 	.word	0x00401a3d
  401f4c:	0040188d 	.word	0x0040188d

00401f50 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401f50:	b580      	push	{r7, lr}
  401f52:	b084      	sub	sp, #16
  401f54:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401f56:	4b27      	ldr	r3, [pc, #156]	; (401ff4 <Reset_Handler+0xa4>)
  401f58:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401f5a:	4b27      	ldr	r3, [pc, #156]	; (401ff8 <Reset_Handler+0xa8>)
  401f5c:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401f5e:	68fa      	ldr	r2, [r7, #12]
  401f60:	68bb      	ldr	r3, [r7, #8]
  401f62:	429a      	cmp	r2, r3
  401f64:	d90d      	bls.n	401f82 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401f66:	e007      	b.n	401f78 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401f68:	68bb      	ldr	r3, [r7, #8]
  401f6a:	1d1a      	adds	r2, r3, #4
  401f6c:	60ba      	str	r2, [r7, #8]
  401f6e:	68fa      	ldr	r2, [r7, #12]
  401f70:	1d11      	adds	r1, r2, #4
  401f72:	60f9      	str	r1, [r7, #12]
  401f74:	6812      	ldr	r2, [r2, #0]
  401f76:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401f78:	68bb      	ldr	r3, [r7, #8]
  401f7a:	4a20      	ldr	r2, [pc, #128]	; (401ffc <Reset_Handler+0xac>)
  401f7c:	4293      	cmp	r3, r2
  401f7e:	d3f3      	bcc.n	401f68 <Reset_Handler+0x18>
  401f80:	e020      	b.n	401fc4 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401f82:	68fa      	ldr	r2, [r7, #12]
  401f84:	68bb      	ldr	r3, [r7, #8]
  401f86:	429a      	cmp	r2, r3
  401f88:	d21c      	bcs.n	401fc4 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401f8a:	4a1c      	ldr	r2, [pc, #112]	; (401ffc <Reset_Handler+0xac>)
  401f8c:	4b1a      	ldr	r3, [pc, #104]	; (401ff8 <Reset_Handler+0xa8>)
  401f8e:	1ad3      	subs	r3, r2, r3
  401f90:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401f92:	68fa      	ldr	r2, [r7, #12]
  401f94:	687b      	ldr	r3, [r7, #4]
  401f96:	4413      	add	r3, r2
  401f98:	3b04      	subs	r3, #4
  401f9a:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401f9c:	68ba      	ldr	r2, [r7, #8]
  401f9e:	687b      	ldr	r3, [r7, #4]
  401fa0:	4413      	add	r3, r2
  401fa2:	3b04      	subs	r3, #4
  401fa4:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401fa6:	e00a      	b.n	401fbe <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401fa8:	68bb      	ldr	r3, [r7, #8]
  401faa:	1f1a      	subs	r2, r3, #4
  401fac:	60ba      	str	r2, [r7, #8]
  401fae:	68fa      	ldr	r2, [r7, #12]
  401fb0:	1f11      	subs	r1, r2, #4
  401fb2:	60f9      	str	r1, [r7, #12]
  401fb4:	6812      	ldr	r2, [r2, #0]
  401fb6:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401fb8:	687b      	ldr	r3, [r7, #4]
  401fba:	3b04      	subs	r3, #4
  401fbc:	607b      	str	r3, [r7, #4]
  401fbe:	687b      	ldr	r3, [r7, #4]
  401fc0:	2b00      	cmp	r3, #0
  401fc2:	d1f1      	bne.n	401fa8 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401fc4:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401fc6:	4b0e      	ldr	r3, [pc, #56]	; (402000 <Reset_Handler+0xb0>)
  401fc8:	60bb      	str	r3, [r7, #8]
  401fca:	e004      	b.n	401fd6 <Reset_Handler+0x86>
		*pDest++ = 0;
  401fcc:	68bb      	ldr	r3, [r7, #8]
  401fce:	1d1a      	adds	r2, r3, #4
  401fd0:	60ba      	str	r2, [r7, #8]
  401fd2:	2200      	movs	r2, #0
  401fd4:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401fd6:	68bb      	ldr	r3, [r7, #8]
  401fd8:	4a0a      	ldr	r2, [pc, #40]	; (402004 <Reset_Handler+0xb4>)
  401fda:	4293      	cmp	r3, r2
  401fdc:	d3f6      	bcc.n	401fcc <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401fde:	4b0a      	ldr	r3, [pc, #40]	; (402008 <Reset_Handler+0xb8>)
  401fe0:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  401fe2:	4a0a      	ldr	r2, [pc, #40]	; (40200c <Reset_Handler+0xbc>)
  401fe4:	68fb      	ldr	r3, [r7, #12]
  401fe6:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401fe8:	4b09      	ldr	r3, [pc, #36]	; (402010 <Reset_Handler+0xc0>)
  401fea:	4798      	blx	r3

	/* Branch to main function */
	main();
  401fec:	4b09      	ldr	r3, [pc, #36]	; (402014 <Reset_Handler+0xc4>)
  401fee:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401ff0:	e7fe      	b.n	401ff0 <Reset_Handler+0xa0>
  401ff2:	bf00      	nop
  401ff4:	0040333c 	.word	0x0040333c
  401ff8:	20000000 	.word	0x20000000
  401ffc:	20000438 	.word	0x20000438
  402000:	20000438 	.word	0x20000438
  402004:	2000052c 	.word	0x2000052c
  402008:	00400000 	.word	0x00400000
  40200c:	e000ed00 	.word	0xe000ed00
  402010:	004031b5 	.word	0x004031b5
  402014:	00402351 	.word	0x00402351

00402018 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402018:	b480      	push	{r7}
  40201a:	af00      	add	r7, sp, #0
	while (1) {
	}
  40201c:	e7fe      	b.n	40201c <Dummy_Handler+0x4>
  40201e:	bf00      	nop

00402020 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402020:	b480      	push	{r7}
  402022:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402024:	4b5d      	ldr	r3, [pc, #372]	; (40219c <SystemCoreClockUpdate+0x17c>)
  402026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402028:	f003 0303 	and.w	r3, r3, #3
  40202c:	2b03      	cmp	r3, #3
  40202e:	f200 8096 	bhi.w	40215e <SystemCoreClockUpdate+0x13e>
  402032:	a201      	add	r2, pc, #4	; (adr r2, 402038 <SystemCoreClockUpdate+0x18>)
  402034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402038:	00402049 	.word	0x00402049
  40203c:	00402069 	.word	0x00402069
  402040:	004020b3 	.word	0x004020b3
  402044:	004020b3 	.word	0x004020b3
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402048:	4b55      	ldr	r3, [pc, #340]	; (4021a0 <SystemCoreClockUpdate+0x180>)
  40204a:	695b      	ldr	r3, [r3, #20]
  40204c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402050:	2b00      	cmp	r3, #0
  402052:	d004      	beq.n	40205e <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402054:	4b53      	ldr	r3, [pc, #332]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  402056:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40205a:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  40205c:	e080      	b.n	402160 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40205e:	4b51      	ldr	r3, [pc, #324]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  402060:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402064:	601a      	str	r2, [r3, #0]
			}
		break;
  402066:	e07b      	b.n	402160 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402068:	4b4c      	ldr	r3, [pc, #304]	; (40219c <SystemCoreClockUpdate+0x17c>)
  40206a:	6a1b      	ldr	r3, [r3, #32]
  40206c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402070:	2b00      	cmp	r3, #0
  402072:	d003      	beq.n	40207c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402074:	4b4b      	ldr	r3, [pc, #300]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  402076:	4a4c      	ldr	r2, [pc, #304]	; (4021a8 <SystemCoreClockUpdate+0x188>)
  402078:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  40207a:	e071      	b.n	402160 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40207c:	4b49      	ldr	r3, [pc, #292]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  40207e:	4a4b      	ldr	r2, [pc, #300]	; (4021ac <SystemCoreClockUpdate+0x18c>)
  402080:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402082:	4b46      	ldr	r3, [pc, #280]	; (40219c <SystemCoreClockUpdate+0x17c>)
  402084:	6a1b      	ldr	r3, [r3, #32]
  402086:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40208a:	2b10      	cmp	r3, #16
  40208c:	d008      	beq.n	4020a0 <SystemCoreClockUpdate+0x80>
  40208e:	2b20      	cmp	r3, #32
  402090:	d00a      	beq.n	4020a8 <SystemCoreClockUpdate+0x88>
  402092:	2b00      	cmp	r3, #0
  402094:	d000      	beq.n	402098 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  402096:	e00b      	b.n	4020b0 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402098:	4b42      	ldr	r3, [pc, #264]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  40209a:	4a44      	ldr	r2, [pc, #272]	; (4021ac <SystemCoreClockUpdate+0x18c>)
  40209c:	601a      	str	r2, [r3, #0]
			break;
  40209e:	e007      	b.n	4020b0 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4020a0:	4b40      	ldr	r3, [pc, #256]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  4020a2:	4a43      	ldr	r2, [pc, #268]	; (4021b0 <SystemCoreClockUpdate+0x190>)
  4020a4:	601a      	str	r2, [r3, #0]
			break;
  4020a6:	e003      	b.n	4020b0 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4020a8:	4b3e      	ldr	r3, [pc, #248]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  4020aa:	4a3f      	ldr	r2, [pc, #252]	; (4021a8 <SystemCoreClockUpdate+0x188>)
  4020ac:	601a      	str	r2, [r3, #0]
			break;
  4020ae:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  4020b0:	e056      	b.n	402160 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4020b2:	4b3a      	ldr	r3, [pc, #232]	; (40219c <SystemCoreClockUpdate+0x17c>)
  4020b4:	6a1b      	ldr	r3, [r3, #32]
  4020b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4020ba:	2b00      	cmp	r3, #0
  4020bc:	d003      	beq.n	4020c6 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4020be:	4b39      	ldr	r3, [pc, #228]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  4020c0:	4a39      	ldr	r2, [pc, #228]	; (4021a8 <SystemCoreClockUpdate+0x188>)
  4020c2:	601a      	str	r2, [r3, #0]
  4020c4:	e019      	b.n	4020fa <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020c6:	4b37      	ldr	r3, [pc, #220]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  4020c8:	4a38      	ldr	r2, [pc, #224]	; (4021ac <SystemCoreClockUpdate+0x18c>)
  4020ca:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4020cc:	4b33      	ldr	r3, [pc, #204]	; (40219c <SystemCoreClockUpdate+0x17c>)
  4020ce:	6a1b      	ldr	r3, [r3, #32]
  4020d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020d4:	2b10      	cmp	r3, #16
  4020d6:	d008      	beq.n	4020ea <SystemCoreClockUpdate+0xca>
  4020d8:	2b20      	cmp	r3, #32
  4020da:	d00a      	beq.n	4020f2 <SystemCoreClockUpdate+0xd2>
  4020dc:	2b00      	cmp	r3, #0
  4020de:	d000      	beq.n	4020e2 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4020e0:	e00b      	b.n	4020fa <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020e2:	4b30      	ldr	r3, [pc, #192]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  4020e4:	4a31      	ldr	r2, [pc, #196]	; (4021ac <SystemCoreClockUpdate+0x18c>)
  4020e6:	601a      	str	r2, [r3, #0]
					break;
  4020e8:	e007      	b.n	4020fa <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4020ea:	4b2e      	ldr	r3, [pc, #184]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  4020ec:	4a30      	ldr	r2, [pc, #192]	; (4021b0 <SystemCoreClockUpdate+0x190>)
  4020ee:	601a      	str	r2, [r3, #0]
					break;
  4020f0:	e003      	b.n	4020fa <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4020f2:	4b2c      	ldr	r3, [pc, #176]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  4020f4:	4a2c      	ldr	r2, [pc, #176]	; (4021a8 <SystemCoreClockUpdate+0x188>)
  4020f6:	601a      	str	r2, [r3, #0]
					break;
  4020f8:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4020fa:	4b28      	ldr	r3, [pc, #160]	; (40219c <SystemCoreClockUpdate+0x17c>)
  4020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020fe:	f003 0303 	and.w	r3, r3, #3
  402102:	2b02      	cmp	r3, #2
  402104:	d115      	bne.n	402132 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402106:	4b25      	ldr	r3, [pc, #148]	; (40219c <SystemCoreClockUpdate+0x17c>)
  402108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40210a:	4b2a      	ldr	r3, [pc, #168]	; (4021b4 <SystemCoreClockUpdate+0x194>)
  40210c:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40210e:	0c1b      	lsrs	r3, r3, #16
  402110:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402112:	4a24      	ldr	r2, [pc, #144]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  402114:	6812      	ldr	r2, [r2, #0]
  402116:	fb02 f303 	mul.w	r3, r2, r3
  40211a:	4a22      	ldr	r2, [pc, #136]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  40211c:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40211e:	4b1f      	ldr	r3, [pc, #124]	; (40219c <SystemCoreClockUpdate+0x17c>)
  402120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402122:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402124:	4a1f      	ldr	r2, [pc, #124]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  402126:	6812      	ldr	r2, [r2, #0]
  402128:	fbb2 f3f3 	udiv	r3, r2, r3
  40212c:	4a1d      	ldr	r2, [pc, #116]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  40212e:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402130:	e016      	b.n	402160 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402132:	4b1a      	ldr	r3, [pc, #104]	; (40219c <SystemCoreClockUpdate+0x17c>)
  402134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402136:	4b1f      	ldr	r3, [pc, #124]	; (4021b4 <SystemCoreClockUpdate+0x194>)
  402138:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40213a:	0c1b      	lsrs	r3, r3, #16
  40213c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40213e:	4a19      	ldr	r2, [pc, #100]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  402140:	6812      	ldr	r2, [r2, #0]
  402142:	fb02 f303 	mul.w	r3, r2, r3
  402146:	4a17      	ldr	r2, [pc, #92]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  402148:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40214a:	4b14      	ldr	r3, [pc, #80]	; (40219c <SystemCoreClockUpdate+0x17c>)
  40214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40214e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402150:	4a14      	ldr	r2, [pc, #80]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  402152:	6812      	ldr	r2, [r2, #0]
  402154:	fbb2 f3f3 	udiv	r3, r2, r3
  402158:	4a12      	ldr	r2, [pc, #72]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  40215a:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40215c:	e000      	b.n	402160 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40215e:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402160:	4b0e      	ldr	r3, [pc, #56]	; (40219c <SystemCoreClockUpdate+0x17c>)
  402162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402164:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402168:	2b70      	cmp	r3, #112	; 0x70
  40216a:	d108      	bne.n	40217e <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  40216c:	4b0d      	ldr	r3, [pc, #52]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  40216e:	681b      	ldr	r3, [r3, #0]
  402170:	4a11      	ldr	r2, [pc, #68]	; (4021b8 <SystemCoreClockUpdate+0x198>)
  402172:	fba2 2303 	umull	r2, r3, r2, r3
  402176:	085b      	lsrs	r3, r3, #1
  402178:	4a0a      	ldr	r2, [pc, #40]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  40217a:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  40217c:	e00a      	b.n	402194 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40217e:	4b07      	ldr	r3, [pc, #28]	; (40219c <SystemCoreClockUpdate+0x17c>)
  402180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402182:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402186:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402188:	4a06      	ldr	r2, [pc, #24]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  40218a:	6812      	ldr	r2, [r2, #0]
  40218c:	fa22 f303 	lsr.w	r3, r2, r3
  402190:	4a04      	ldr	r2, [pc, #16]	; (4021a4 <SystemCoreClockUpdate+0x184>)
  402192:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402194:	bf00      	nop
  402196:	46bd      	mov	sp, r7
  402198:	bc80      	pop	{r7}
  40219a:	4770      	bx	lr
  40219c:	400e0400 	.word	0x400e0400
  4021a0:	400e1410 	.word	0x400e1410
  4021a4:	2000000c 	.word	0x2000000c
  4021a8:	00b71b00 	.word	0x00b71b00
  4021ac:	003d0900 	.word	0x003d0900
  4021b0:	007a1200 	.word	0x007a1200
  4021b4:	07ff0000 	.word	0x07ff0000
  4021b8:	aaaaaaab 	.word	0xaaaaaaab

004021bc <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4021bc:	b480      	push	{r7}
  4021be:	b083      	sub	sp, #12
  4021c0:	af00      	add	r7, sp, #0
  4021c2:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4021c4:	687b      	ldr	r3, [r7, #4]
  4021c6:	4a22      	ldr	r2, [pc, #136]	; (402250 <system_init_flash+0x94>)
  4021c8:	4293      	cmp	r3, r2
  4021ca:	d808      	bhi.n	4021de <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4021cc:	4b21      	ldr	r3, [pc, #132]	; (402254 <system_init_flash+0x98>)
  4021ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4021d2:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4021d4:	4b20      	ldr	r3, [pc, #128]	; (402258 <system_init_flash+0x9c>)
  4021d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4021da:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4021dc:	e033      	b.n	402246 <system_init_flash+0x8a>
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4021de:	687b      	ldr	r3, [r7, #4]
  4021e0:	4a1e      	ldr	r2, [pc, #120]	; (40225c <system_init_flash+0xa0>)
  4021e2:	4293      	cmp	r3, r2
  4021e4:	d806      	bhi.n	4021f4 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4021e6:	4b1b      	ldr	r3, [pc, #108]	; (402254 <system_init_flash+0x98>)
  4021e8:	4a1d      	ldr	r2, [pc, #116]	; (402260 <system_init_flash+0xa4>)
  4021ea:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4021ec:	4b1a      	ldr	r3, [pc, #104]	; (402258 <system_init_flash+0x9c>)
  4021ee:	4a1c      	ldr	r2, [pc, #112]	; (402260 <system_init_flash+0xa4>)
  4021f0:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4021f2:	e028      	b.n	402246 <system_init_flash+0x8a>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4021f4:	687b      	ldr	r3, [r7, #4]
  4021f6:	4a1b      	ldr	r2, [pc, #108]	; (402264 <system_init_flash+0xa8>)
  4021f8:	4293      	cmp	r3, r2
  4021fa:	d806      	bhi.n	40220a <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4021fc:	4b15      	ldr	r3, [pc, #84]	; (402254 <system_init_flash+0x98>)
  4021fe:	4a1a      	ldr	r2, [pc, #104]	; (402268 <system_init_flash+0xac>)
  402200:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402202:	4b15      	ldr	r3, [pc, #84]	; (402258 <system_init_flash+0x9c>)
  402204:	4a18      	ldr	r2, [pc, #96]	; (402268 <system_init_flash+0xac>)
  402206:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402208:	e01d      	b.n	402246 <system_init_flash+0x8a>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40220a:	687b      	ldr	r3, [r7, #4]
  40220c:	4a17      	ldr	r2, [pc, #92]	; (40226c <system_init_flash+0xb0>)
  40220e:	4293      	cmp	r3, r2
  402210:	d806      	bhi.n	402220 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402212:	4b10      	ldr	r3, [pc, #64]	; (402254 <system_init_flash+0x98>)
  402214:	4a16      	ldr	r2, [pc, #88]	; (402270 <system_init_flash+0xb4>)
  402216:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402218:	4b0f      	ldr	r3, [pc, #60]	; (402258 <system_init_flash+0x9c>)
  40221a:	4a15      	ldr	r2, [pc, #84]	; (402270 <system_init_flash+0xb4>)
  40221c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40221e:	e012      	b.n	402246 <system_init_flash+0x8a>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402220:	687b      	ldr	r3, [r7, #4]
  402222:	4a14      	ldr	r2, [pc, #80]	; (402274 <system_init_flash+0xb8>)
  402224:	4293      	cmp	r3, r2
  402226:	d808      	bhi.n	40223a <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402228:	4b0a      	ldr	r3, [pc, #40]	; (402254 <system_init_flash+0x98>)
  40222a:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40222e:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402230:	4b09      	ldr	r3, [pc, #36]	; (402258 <system_init_flash+0x9c>)
  402232:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402236:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402238:	e005      	b.n	402246 <system_init_flash+0x8a>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40223a:	4b06      	ldr	r3, [pc, #24]	; (402254 <system_init_flash+0x98>)
  40223c:	4a0e      	ldr	r2, [pc, #56]	; (402278 <system_init_flash+0xbc>)
  40223e:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402240:	4b05      	ldr	r3, [pc, #20]	; (402258 <system_init_flash+0x9c>)
  402242:	4a0d      	ldr	r2, [pc, #52]	; (402278 <system_init_flash+0xbc>)
  402244:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402246:	bf00      	nop
  402248:	370c      	adds	r7, #12
  40224a:	46bd      	mov	sp, r7
  40224c:	bc80      	pop	{r7}
  40224e:	4770      	bx	lr
  402250:	01312cff 	.word	0x01312cff
  402254:	400e0a00 	.word	0x400e0a00
  402258:	400e0c00 	.word	0x400e0c00
  40225c:	026259ff 	.word	0x026259ff
  402260:	04000100 	.word	0x04000100
  402264:	039386ff 	.word	0x039386ff
  402268:	04000200 	.word	0x04000200
  40226c:	04c4b3ff 	.word	0x04c4b3ff
  402270:	04000300 	.word	0x04000300
  402274:	05f5e0ff 	.word	0x05f5e0ff
  402278:	04000500 	.word	0x04000500

0040227c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40227c:	b480      	push	{r7}
  40227e:	b083      	sub	sp, #12
  402280:	af00      	add	r7, sp, #0
  402282:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402284:	687b      	ldr	r3, [r7, #4]
  402286:	2b07      	cmp	r3, #7
  402288:	d825      	bhi.n	4022d6 <osc_get_rate+0x5a>
  40228a:	a201      	add	r2, pc, #4	; (adr r2, 402290 <osc_get_rate+0x14>)
  40228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402290:	004022b1 	.word	0x004022b1
  402294:	004022b7 	.word	0x004022b7
  402298:	004022bd 	.word	0x004022bd
  40229c:	004022c3 	.word	0x004022c3
  4022a0:	004022c7 	.word	0x004022c7
  4022a4:	004022cb 	.word	0x004022cb
  4022a8:	004022cf 	.word	0x004022cf
  4022ac:	004022d3 	.word	0x004022d3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4022b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4022b4:	e010      	b.n	4022d8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4022b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022ba:	e00d      	b.n	4022d8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4022bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022c0:	e00a      	b.n	4022d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4022c2:	4b08      	ldr	r3, [pc, #32]	; (4022e4 <osc_get_rate+0x68>)
  4022c4:	e008      	b.n	4022d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4022c6:	4b08      	ldr	r3, [pc, #32]	; (4022e8 <osc_get_rate+0x6c>)
  4022c8:	e006      	b.n	4022d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4022ca:	4b08      	ldr	r3, [pc, #32]	; (4022ec <osc_get_rate+0x70>)
  4022cc:	e004      	b.n	4022d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4022ce:	4b07      	ldr	r3, [pc, #28]	; (4022ec <osc_get_rate+0x70>)
  4022d0:	e002      	b.n	4022d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4022d2:	4b06      	ldr	r3, [pc, #24]	; (4022ec <osc_get_rate+0x70>)
  4022d4:	e000      	b.n	4022d8 <osc_get_rate+0x5c>
	}

	return 0;
  4022d6:	2300      	movs	r3, #0
}
  4022d8:	4618      	mov	r0, r3
  4022da:	370c      	adds	r7, #12
  4022dc:	46bd      	mov	sp, r7
  4022de:	bc80      	pop	{r7}
  4022e0:	4770      	bx	lr
  4022e2:	bf00      	nop
  4022e4:	003d0900 	.word	0x003d0900
  4022e8:	007a1200 	.word	0x007a1200
  4022ec:	00b71b00 	.word	0x00b71b00

004022f0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4022f0:	b580      	push	{r7, lr}
  4022f2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4022f4:	2006      	movs	r0, #6
  4022f6:	4b04      	ldr	r3, [pc, #16]	; (402308 <sysclk_get_main_hz+0x18>)
  4022f8:	4798      	blx	r3
  4022fa:	4602      	mov	r2, r0
  4022fc:	4613      	mov	r3, r2
  4022fe:	009b      	lsls	r3, r3, #2
  402300:	4413      	add	r3, r2
  402302:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402304:	4618      	mov	r0, r3
  402306:	bd80      	pop	{r7, pc}
  402308:	0040227d 	.word	0x0040227d

0040230c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40230c:	b580      	push	{r7, lr}
  40230e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402310:	4b02      	ldr	r3, [pc, #8]	; (40231c <sysclk_get_cpu_hz+0x10>)
  402312:	4798      	blx	r3
  402314:	4603      	mov	r3, r0
  402316:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402318:	4618      	mov	r0, r3
  40231a:	bd80      	pop	{r7, pc}
  40231c:	004022f1 	.word	0x004022f1

00402320 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402320:	b580      	push	{r7, lr}
  402322:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402324:	4b02      	ldr	r3, [pc, #8]	; (402330 <sysclk_get_peripheral_hz+0x10>)
  402326:	4798      	blx	r3
  402328:	4603      	mov	r3, r0
  40232a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40232c:	4618      	mov	r0, r3
  40232e:	bd80      	pop	{r7, pc}
  402330:	004022f1 	.word	0x004022f1

00402334 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402334:	b580      	push	{r7, lr}
  402336:	b082      	sub	sp, #8
  402338:	af00      	add	r7, sp, #0
  40233a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40233c:	6878      	ldr	r0, [r7, #4]
  40233e:	4b03      	ldr	r3, [pc, #12]	; (40234c <sysclk_enable_peripheral_clock+0x18>)
  402340:	4798      	blx	r3
}
  402342:	bf00      	nop
  402344:	3708      	adds	r7, #8
  402346:	46bd      	mov	sp, r7
  402348:	bd80      	pop	{r7, pc}
  40234a:	bf00      	nop
  40234c:	00401dd9 	.word	0x00401dd9

00402350 <main>:
void SendRespPkt(uint8_t *pkt, uint8_t len);
void ReadAnalogIn(void);
void ReadDigitalIn(void);

int main (void)
{
  402350:	b590      	push	{r4, r7, lr}
  402352:	b08f      	sub	sp, #60	; 0x3c
  402354:	af02      	add	r7, sp, #8
	/* RS485 Tx buffer */
	uint8_t respBuff[RS485_BUFFER_SIZE], respLen = 0;
  402356:	2300      	movs	r3, #0
  402358:	71fb      	strb	r3, [r7, #7]
	uint8_t commState = 0, recvdBytes = 0, prevRecvdBytes;
  40235a:	2300      	movs	r3, #0
  40235c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  402360:	2300      	movs	r3, #0
  402362:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	/* Init Mbus writeFunc() ptr */
	writeFunc = WriteMbusRegs;
  402366:	4b38      	ldr	r3, [pc, #224]	; (402448 <main+0xf8>)
  402368:	4a38      	ldr	r2, [pc, #224]	; (40244c <main+0xfc>)
  40236a:	601a      	str	r2, [r3, #0]

	anaState = anaRead0;
  40236c:	4b38      	ldr	r3, [pc, #224]	; (402450 <main+0x100>)
  40236e:	2200      	movs	r2, #0
  402370:	701a      	strb	r2, [r3, #0]
	
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  402372:	4b38      	ldr	r3, [pc, #224]	; (402454 <main+0x104>)
  402374:	4798      	blx	r3
	/* Initialize all peripheral pins */
	board_init();	
  402376:	4b38      	ldr	r3, [pc, #224]	; (402458 <main+0x108>)
  402378:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());
	
	InitPeripherals();
  40237a:	4b38      	ldr	r3, [pc, #224]	; (40245c <main+0x10c>)
  40237c:	4798      	blx	r3
	
	//LED Toggle
	//gpio_toggle_pin(PIO_PC23_IDX);
	
	/* Start Receiving Data */
	usart_disable_tx(RS485_USART);
  40237e:	4838      	ldr	r0, [pc, #224]	; (402460 <main+0x110>)
  402380:	4b38      	ldr	r3, [pc, #224]	; (402464 <main+0x114>)
  402382:	4798      	blx	r3
	usart_enable_rx(RS485_USART);
  402384:	4836      	ldr	r0, [pc, #216]	; (402460 <main+0x110>)
  402386:	4b38      	ldr	r3, [pc, #224]	; (402468 <main+0x118>)
  402388:	4798      	blx	r3
	Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  40238a:	4b38      	ldr	r3, [pc, #224]	; (40246c <main+0x11c>)
  40238c:	2123      	movs	r1, #35	; 0x23
  40238e:	4618      	mov	r0, r3
  402390:	4b37      	ldr	r3, [pc, #220]	; (402470 <main+0x120>)
  402392:	4798      	blx	r3
	
	while(1)	
	{
		recvdBytes = Rs485PdcGetRxBytes();
  402394:	4b37      	ldr	r3, [pc, #220]	; (402474 <main+0x124>)
  402396:	4798      	blx	r3
  402398:	4603      	mov	r3, r0
  40239a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		/* Check if data received on 485 */
		switch(commState)
  40239e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4023a2:	2b00      	cmp	r3, #0
  4023a4:	d002      	beq.n	4023ac <main+0x5c>
  4023a6:	2b01      	cmp	r3, #1
  4023a8:	d00c      	beq.n	4023c4 <main+0x74>
  4023aa:	e047      	b.n	40243c <main+0xec>
        {
            case 0:
                if(recvdBytes!=0)
  4023ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
  4023b0:	2b00      	cmp	r3, #0
  4023b2:	d042      	beq.n	40243a <main+0xea>
                {
                    commState = 1;
  4023b4:	2301      	movs	r3, #1
  4023b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    prevRecvdBytes = recvdBytes;
  4023ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
  4023be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                }
                break;
  4023c2:	e03a      	b.n	40243a <main+0xea>
            case 1:
                if(prevRecvdBytes != recvdBytes)
  4023c4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
  4023c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
  4023cc:	429a      	cmp	r2, r3
  4023ce:	d004      	beq.n	4023da <main+0x8a>
                {
                    prevRecvdBytes = recvdBytes;
  4023d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
  4023d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
                    Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);

                    commState = 0;
                }
                break;
  4023d8:	e030      	b.n	40243c <main+0xec>
                    prevRecvdBytes = recvdBytes;
                }
                else
                {
                    /* 1 Modbus Pkt received. Process it. */
					usart_disable_rx(RS485_USART);
  4023da:	4821      	ldr	r0, [pc, #132]	; (402460 <main+0x110>)
  4023dc:	4b26      	ldr	r3, [pc, #152]	; (402478 <main+0x128>)
  4023de:	4798      	blx	r3
                    pdc_disable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  4023e0:	4b26      	ldr	r3, [pc, #152]	; (40247c <main+0x12c>)
  4023e2:	681b      	ldr	r3, [r3, #0]
  4023e4:	2101      	movs	r1, #1
  4023e6:	4618      	mov	r0, r3
  4023e8:	4b25      	ldr	r3, [pc, #148]	; (402480 <main+0x130>)
  4023ea:	4798      	blx	r3

					/* Parse Received MBUS Pkt, update actual variables */
					ParseMbusPkt(MBUS_SLA, rs485RxBuffer, recvdBytes, respBuff, &respLen);    
  4023ec:	f107 0108 	add.w	r1, r7, #8
  4023f0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
  4023f4:	1dfb      	adds	r3, r7, #7
  4023f6:	9300      	str	r3, [sp, #0]
  4023f8:	460b      	mov	r3, r1
  4023fa:	491c      	ldr	r1, [pc, #112]	; (40246c <main+0x11c>)
  4023fc:	2001      	movs	r0, #1
  4023fe:	4c21      	ldr	r4, [pc, #132]	; (402484 <main+0x134>)
  402400:	47a0      	blx	r4
                        
                    /* Generate MBus Resp */
                    if(respLen)
  402402:	79fb      	ldrb	r3, [r7, #7]
  402404:	2b00      	cmp	r3, #0
  402406:	d006      	beq.n	402416 <main+0xc6>
                    {
						SendRespPkt(respBuff, respLen);
  402408:	79fa      	ldrb	r2, [r7, #7]
  40240a:	f107 0308 	add.w	r3, r7, #8
  40240e:	4611      	mov	r1, r2
  402410:	4618      	mov	r0, r3
  402412:	4b1d      	ldr	r3, [pc, #116]	; (402488 <main+0x138>)
  402414:	4798      	blx	r3
                    }
                        
					usart_enable_rx(RS485_USART);
  402416:	4812      	ldr	r0, [pc, #72]	; (402460 <main+0x110>)
  402418:	4b13      	ldr	r3, [pc, #76]	; (402468 <main+0x118>)
  40241a:	4798      	blx	r3
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  40241c:	4b17      	ldr	r3, [pc, #92]	; (40247c <main+0x12c>)
  40241e:	681b      	ldr	r3, [r3, #0]
  402420:	2101      	movs	r1, #1
  402422:	4618      	mov	r0, r3
  402424:	4b19      	ldr	r3, [pc, #100]	; (40248c <main+0x13c>)
  402426:	4798      	blx	r3
                    Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  402428:	4b10      	ldr	r3, [pc, #64]	; (40246c <main+0x11c>)
  40242a:	2123      	movs	r1, #35	; 0x23
  40242c:	4618      	mov	r0, r3
  40242e:	4b10      	ldr	r3, [pc, #64]	; (402470 <main+0x120>)
  402430:	4798      	blx	r3

                    commState = 0;
  402432:	2300      	movs	r3, #0
  402434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
                break;
  402438:	e000      	b.n	40243c <main+0xec>
                if(recvdBytes!=0)
                {
                    commState = 1;
                    prevRecvdBytes = recvdBytes;
                }
                break;
  40243a:	bf00      	nop
                }
                break;
        }

		/* Update digital input regs */
		ReadDigitalIn();
  40243c:	4b14      	ldr	r3, [pc, #80]	; (402490 <main+0x140>)
  40243e:	4798      	blx	r3
		/* Update analog input regs */
		ReadAnalogIn();
  402440:	4b14      	ldr	r3, [pc, #80]	; (402494 <main+0x144>)
  402442:	4798      	blx	r3
	}
  402444:	e7a6      	b.n	402394 <main+0x44>
  402446:	bf00      	nop
  402448:	200004e8 	.word	0x200004e8
  40244c:	0040250d 	.word	0x0040250d
  402450:	20000529 	.word	0x20000529
  402454:	00401441 	.word	0x00401441
  402458:	00401e95 	.word	0x00401e95
  40245c:	00402499 	.word	0x00402499
  402460:	40028000 	.word	0x40028000
  402464:	004006c9 	.word	0x004006c9
  402468:	004006f9 	.word	0x004006f9
  40246c:	200004fc 	.word	0x200004fc
  402470:	00400fad 	.word	0x00400fad
  402474:	00400fe9 	.word	0x00400fe9
  402478:	00400711 	.word	0x00400711
  40247c:	200004ec 	.word	0x200004ec
  402480:	00401559 	.word	0x00401559
  402484:	00400831 	.word	0x00400831
  402488:	00402545 	.word	0x00402545
  40248c:	00401539 	.word	0x00401539
  402490:	004027c9 	.word	0x004027c9
  402494:	00402595 	.word	0x00402595

00402498 <InitPeripherals>:
}

void InitPeripherals(void)
{
  402498:	b580      	push	{r7, lr}
  40249a:	af00      	add	r7, sp, #0
	/* Init RS485 port with PDC support */
	InitRs485Pdc();
  40249c:	4b04      	ldr	r3, [pc, #16]	; (4024b0 <InitPeripherals+0x18>)
  40249e:	4798      	blx	r3
	
	/* Init TWI */
	InitTWI();
  4024a0:	4b04      	ldr	r3, [pc, #16]	; (4024b4 <InitPeripherals+0x1c>)
  4024a2:	4798      	blx	r3
	/* Init I/O Expander */

	/* Read Config from EEPROM */

	/* Set AMUX sel pin to low */
	gpio_set_pin_low(PIN_AMUXSEL2_IDX);
  4024a4:	2022      	movs	r0, #34	; 0x22
  4024a6:	4b04      	ldr	r3, [pc, #16]	; (4024b8 <InitPeripherals+0x20>)
  4024a8:	4798      	blx	r3
}
  4024aa:	bf00      	nop
  4024ac:	bd80      	pop	{r7, pc}
  4024ae:	bf00      	nop
  4024b0:	00400e95 	.word	0x00400e95
  4024b4:	004024bd 	.word	0x004024bd
  4024b8:	0040185d 	.word	0x0040185d

004024bc <InitTWI>:

void InitTWI(void)
{
  4024bc:	b580      	push	{r7, lr}
  4024be:	b084      	sub	sp, #16
  4024c0:	af00      	add	r7, sp, #0
	twi_options_t twiSettings = {
		sysclk_get_peripheral_hz(),
  4024c2:	4b0c      	ldr	r3, [pc, #48]	; (4024f4 <InitTWI+0x38>)
  4024c4:	4798      	blx	r3
  4024c6:	4603      	mov	r3, r0
	gpio_set_pin_low(PIN_AMUXSEL2_IDX);
}

void InitTWI(void)
{
	twi_options_t twiSettings = {
  4024c8:	607b      	str	r3, [r7, #4]
  4024ca:	4b0b      	ldr	r3, [pc, #44]	; (4024f8 <InitTWI+0x3c>)
  4024cc:	60bb      	str	r3, [r7, #8]
  4024ce:	2300      	movs	r3, #0
  4024d0:	733b      	strb	r3, [r7, #12]
  4024d2:	2300      	movs	r3, #0
  4024d4:	737b      	strb	r3, [r7, #13]
		400000,
		0,
		0
	};
	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_TWI_ID);
  4024d6:	2013      	movs	r0, #19
  4024d8:	4b08      	ldr	r3, [pc, #32]	; (4024fc <InitTWI+0x40>)
  4024da:	4798      	blx	r3

	/* Enable TWI master mode */
	twi_enable_master_mode(BOARD_TWI);
  4024dc:	4808      	ldr	r0, [pc, #32]	; (402500 <InitTWI+0x44>)
  4024de:	4b09      	ldr	r3, [pc, #36]	; (402504 <InitTWI+0x48>)
  4024e0:	4798      	blx	r3

	/* Initialize TWI peripheral */
	twi_master_init(BOARD_TWI, &twiSettings);
  4024e2:	1d3b      	adds	r3, r7, #4
  4024e4:	4619      	mov	r1, r3
  4024e6:	4806      	ldr	r0, [pc, #24]	; (402500 <InitTWI+0x44>)
  4024e8:	4b07      	ldr	r3, [pc, #28]	; (402508 <InitTWI+0x4c>)
  4024ea:	4798      	blx	r3
}
  4024ec:	bf00      	nop
  4024ee:	3710      	adds	r7, #16
  4024f0:	46bd      	mov	sp, r7
  4024f2:	bd80      	pop	{r7, pc}
  4024f4:	00402321 	.word	0x00402321
  4024f8:	00061a80 	.word	0x00061a80
  4024fc:	00402335 	.word	0x00402335
  402500:	40018000 	.word	0x40018000
  402504:	00400129 	.word	0x00400129
  402508:	0040014d 	.word	0x0040014d

0040250c <WriteMbusRegs>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
  40250c:	b480      	push	{r7}
  40250e:	b083      	sub	sp, #12
  402510:	af00      	add	r7, sp, #0
  402512:	6078      	str	r0, [r7, #4]
  402514:	460b      	mov	r3, r1
  402516:	70fb      	strb	r3, [r7, #3]
  402518:	4613      	mov	r3, r2
  40251a:	70bb      	strb	r3, [r7, #2]
	uint16_t *ptr;
	
	while(len)
  40251c:	e00a      	b.n	402534 <WriteMbusRegs+0x28>
	{
		switch(regAddr)
  40251e:	78fb      	ldrb	r3, [r7, #3]
  402520:	2b0a      	cmp	r3, #10
  402522:	d000      	beq.n	402526 <WriteMbusRegs+0x1a>
		{
			case MBUS_REG_DO1:
				//Write digital output on pins
				break;
			default:
				break;
  402524:	e000      	b.n	402528 <WriteMbusRegs+0x1c>
	{
		switch(regAddr)
		{
			case MBUS_REG_DO1:
				//Write digital output on pins
				break;
  402526:	bf00      	nop
			default:
				break;
		}
		regAddr++;
  402528:	78fb      	ldrb	r3, [r7, #3]
  40252a:	3301      	adds	r3, #1
  40252c:	70fb      	strb	r3, [r7, #3]
		len--;
  40252e:	78bb      	ldrb	r3, [r7, #2]
  402530:	3b01      	subs	r3, #1
  402532:	70bb      	strb	r3, [r7, #2]

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
	uint16_t *ptr;
	
	while(len)
  402534:	78bb      	ldrb	r3, [r7, #2]
  402536:	2b00      	cmp	r3, #0
  402538:	d1f1      	bne.n	40251e <WriteMbusRegs+0x12>
				break;
		}
		regAddr++;
		len--;
	}
}
  40253a:	bf00      	nop
  40253c:	370c      	adds	r7, #12
  40253e:	46bd      	mov	sp, r7
  402540:	bc80      	pop	{r7}
  402542:	4770      	bx	lr

00402544 <SendRespPkt>:

void SendRespPkt(uint8_t *pkt, uint8_t len)
{
  402544:	b580      	push	{r7, lr}
  402546:	b082      	sub	sp, #8
  402548:	af00      	add	r7, sp, #0
  40254a:	6078      	str	r0, [r7, #4]
  40254c:	460b      	mov	r3, r1
  40254e:	70fb      	strb	r3, [r7, #3]
	usart_enable_tx(RS485_USART);
  402550:	480b      	ldr	r0, [pc, #44]	; (402580 <SendRespPkt+0x3c>)
  402552:	4b0c      	ldr	r3, [pc, #48]	; (402584 <SendRespPkt+0x40>)
  402554:	4798      	blx	r3
	/* 3.5 Char Wait Time */
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);
  402556:	687b      	ldr	r3, [r7, #4]
  402558:	78fa      	ldrb	r2, [r7, #3]
  40255a:	b292      	uxth	r2, r2
  40255c:	4611      	mov	r1, r2
  40255e:	4618      	mov	r0, r3
  402560:	4b09      	ldr	r3, [pc, #36]	; (402588 <SendRespPkt+0x44>)
  402562:	4798      	blx	r3

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus());
  402564:	bf00      	nop
  402566:	4b09      	ldr	r3, [pc, #36]	; (40258c <SendRespPkt+0x48>)
  402568:	4798      	blx	r3
  40256a:	4603      	mov	r3, r0
  40256c:	2b00      	cmp	r3, #0
  40256e:	d0fa      	beq.n	402566 <SendRespPkt+0x22>

	/* 3.5 Char Wait Time */

	usart_disable_tx(RS485_USART);
  402570:	4803      	ldr	r0, [pc, #12]	; (402580 <SendRespPkt+0x3c>)
  402572:	4b07      	ldr	r3, [pc, #28]	; (402590 <SendRespPkt+0x4c>)
  402574:	4798      	blx	r3
}
  402576:	bf00      	nop
  402578:	3708      	adds	r7, #8
  40257a:	46bd      	mov	sp, r7
  40257c:	bd80      	pop	{r7, pc}
  40257e:	bf00      	nop
  402580:	40028000 	.word	0x40028000
  402584:	004006b1 	.word	0x004006b1
  402588:	00400f71 	.word	0x00400f71
  40258c:	00401021 	.word	0x00401021
  402590:	004006c9 	.word	0x004006c9

00402594 <ReadAnalogIn>:

void ReadAnalogIn(void)
{
  402594:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
  402598:	b082      	sub	sp, #8
  40259a:	af00      	add	r7, sp, #0
	/* Read 0-10V, 4-20mA */
	float anaV = 0;
  40259c:	f04f 0300 	mov.w	r3, #0
  4025a0:	607b      	str	r3, [r7, #4]
	uint16_t anaVal = 0;
  4025a2:	2300      	movs	r3, #0
  4025a4:	807b      	strh	r3, [r7, #2]

	static uint8_t recvdData[3];
	
	switch(anaState)
  4025a6:	4b7d      	ldr	r3, [pc, #500]	; (40279c <ReadAnalogIn+0x208>)
  4025a8:	781b      	ldrb	r3, [r3, #0]
  4025aa:	2b04      	cmp	r3, #4
  4025ac:	f200 80f0 	bhi.w	402790 <ReadAnalogIn+0x1fc>
  4025b0:	a201      	add	r2, pc, #4	; (adr r2, 4025b8 <ReadAnalogIn+0x24>)
  4025b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4025b6:	bf00      	nop
  4025b8:	004025cd 	.word	0x004025cd
  4025bc:	00402637 	.word	0x00402637
  4025c0:	004026a1 	.word	0x004026a1
  4025c4:	0040270b 	.word	0x0040270b
  4025c8:	00402775 	.word	0x00402775
	{
		case anaRead0:
			/* Store recvd data */
			anaVal = (((uint16_t)recvdData[0])<<8)|(recvdData[1]);
  4025cc:	4b74      	ldr	r3, [pc, #464]	; (4027a0 <ReadAnalogIn+0x20c>)
  4025ce:	781b      	ldrb	r3, [r3, #0]
  4025d0:	021b      	lsls	r3, r3, #8
  4025d2:	b21a      	sxth	r2, r3
  4025d4:	4b72      	ldr	r3, [pc, #456]	; (4027a0 <ReadAnalogIn+0x20c>)
  4025d6:	785b      	ldrb	r3, [r3, #1]
  4025d8:	b21b      	sxth	r3, r3
  4025da:	4313      	orrs	r3, r2
  4025dc:	b21b      	sxth	r3, r3
  4025de:	807b      	strh	r3, [r7, #2]
			/* Set Mux Select lines to channel 0 */
			gpio_set_pin_low(PIN_AMUXSEL0_IDX);
  4025e0:	2020      	movs	r0, #32
  4025e2:	4b70      	ldr	r3, [pc, #448]	; (4027a4 <ReadAnalogIn+0x210>)
  4025e4:	4798      	blx	r3
			gpio_set_pin_low(PIN_AMUXSEL1_IDX);
  4025e6:	2021      	movs	r0, #33	; 0x21
  4025e8:	4b6e      	ldr	r3, [pc, #440]	; (4027a4 <ReadAnalogIn+0x210>)
  4025ea:	4798      	blx	r3
			delay_ms(1);
  4025ec:	4b6e      	ldr	r3, [pc, #440]	; (4027a8 <ReadAnalogIn+0x214>)
  4025ee:	4798      	blx	r3
  4025f0:	4603      	mov	r3, r0
  4025f2:	f04f 0400 	mov.w	r4, #0
  4025f6:	f243 61af 	movw	r1, #13999	; 0x36af
  4025fa:	f04f 0200 	mov.w	r2, #0
  4025fe:	eb13 0b01 	adds.w	fp, r3, r1
  402602:	eb44 0c02 	adc.w	ip, r4, r2
  402606:	4658      	mov	r0, fp
  402608:	4661      	mov	r1, ip
  40260a:	4c68      	ldr	r4, [pc, #416]	; (4027ac <ReadAnalogIn+0x218>)
  40260c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402610:	f04f 0300 	mov.w	r3, #0
  402614:	47a0      	blx	r4
  402616:	4603      	mov	r3, r0
  402618:	460c      	mov	r4, r1
  40261a:	4618      	mov	r0, r3
  40261c:	4b64      	ldr	r3, [pc, #400]	; (4027b0 <ReadAnalogIn+0x21c>)
  40261e:	4798      	blx	r3
			anaNextState = anaRead1;
  402620:	4b64      	ldr	r3, [pc, #400]	; (4027b4 <ReadAnalogIn+0x220>)
  402622:	2201      	movs	r2, #1
  402624:	701a      	strb	r2, [r3, #0]
			anaState = anaBusy;
  402626:	4b5d      	ldr	r3, [pc, #372]	; (40279c <ReadAnalogIn+0x208>)
  402628:	2204      	movs	r2, #4
  40262a:	701a      	strb	r2, [r3, #0]
			/* Initiate ADC reading */
			WriteMCP3425(BOARD_TWI,(1<<MCP_BIT_CONF_RDY)|(1<<MCP_BIT_CONF_S1));
  40262c:	2188      	movs	r1, #136	; 0x88
  40262e:	4862      	ldr	r0, [pc, #392]	; (4027b8 <ReadAnalogIn+0x224>)
  402630:	4b62      	ldr	r3, [pc, #392]	; (4027bc <ReadAnalogIn+0x228>)
  402632:	4798      	blx	r3
			break;
  402634:	e0ac      	b.n	402790 <ReadAnalogIn+0x1fc>
		case anaRead1:
			/* Store recvd data */
			anaVal = (((uint16_t)recvdData[0])<<8)|(recvdData[1]);
  402636:	4b5a      	ldr	r3, [pc, #360]	; (4027a0 <ReadAnalogIn+0x20c>)
  402638:	781b      	ldrb	r3, [r3, #0]
  40263a:	021b      	lsls	r3, r3, #8
  40263c:	b21a      	sxth	r2, r3
  40263e:	4b58      	ldr	r3, [pc, #352]	; (4027a0 <ReadAnalogIn+0x20c>)
  402640:	785b      	ldrb	r3, [r3, #1]
  402642:	b21b      	sxth	r3, r3
  402644:	4313      	orrs	r3, r2
  402646:	b21b      	sxth	r3, r3
  402648:	807b      	strh	r3, [r7, #2]
			/* Set Mux Select lines to channel 1 */
			gpio_set_pin_high(PIN_AMUXSEL0_IDX);
  40264a:	2020      	movs	r0, #32
  40264c:	4b5c      	ldr	r3, [pc, #368]	; (4027c0 <ReadAnalogIn+0x22c>)
  40264e:	4798      	blx	r3
			gpio_set_pin_low(PIN_AMUXSEL1_IDX);
  402650:	2021      	movs	r0, #33	; 0x21
  402652:	4b54      	ldr	r3, [pc, #336]	; (4027a4 <ReadAnalogIn+0x210>)
  402654:	4798      	blx	r3
			delay_ms(1);
  402656:	4b54      	ldr	r3, [pc, #336]	; (4027a8 <ReadAnalogIn+0x214>)
  402658:	4798      	blx	r3
  40265a:	4603      	mov	r3, r0
  40265c:	f04f 0400 	mov.w	r4, #0
  402660:	f243 61af 	movw	r1, #13999	; 0x36af
  402664:	f04f 0200 	mov.w	r2, #0
  402668:	eb13 0b01 	adds.w	fp, r3, r1
  40266c:	eb44 0c02 	adc.w	ip, r4, r2
  402670:	4658      	mov	r0, fp
  402672:	4661      	mov	r1, ip
  402674:	4c4d      	ldr	r4, [pc, #308]	; (4027ac <ReadAnalogIn+0x218>)
  402676:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40267a:	f04f 0300 	mov.w	r3, #0
  40267e:	47a0      	blx	r4
  402680:	4603      	mov	r3, r0
  402682:	460c      	mov	r4, r1
  402684:	4618      	mov	r0, r3
  402686:	4b4a      	ldr	r3, [pc, #296]	; (4027b0 <ReadAnalogIn+0x21c>)
  402688:	4798      	blx	r3
			anaNextState = anaRead2;
  40268a:	4b4a      	ldr	r3, [pc, #296]	; (4027b4 <ReadAnalogIn+0x220>)
  40268c:	2202      	movs	r2, #2
  40268e:	701a      	strb	r2, [r3, #0]
			anaState = anaBusy;
  402690:	4b42      	ldr	r3, [pc, #264]	; (40279c <ReadAnalogIn+0x208>)
  402692:	2204      	movs	r2, #4
  402694:	701a      	strb	r2, [r3, #0]
			/* Initiate ADC reading */
			WriteMCP3425(BOARD_TWI,(1<<MCP_BIT_CONF_RDY)|(1<<MCP_BIT_CONF_S1));
  402696:	2188      	movs	r1, #136	; 0x88
  402698:	4847      	ldr	r0, [pc, #284]	; (4027b8 <ReadAnalogIn+0x224>)
  40269a:	4b48      	ldr	r3, [pc, #288]	; (4027bc <ReadAnalogIn+0x228>)
  40269c:	4798      	blx	r3
			break;
  40269e:	e077      	b.n	402790 <ReadAnalogIn+0x1fc>
		case anaRead2:
			/* Store recvd data */
			anaVal = (((uint16_t)recvdData[0])<<8)|(recvdData[1]);
  4026a0:	4b3f      	ldr	r3, [pc, #252]	; (4027a0 <ReadAnalogIn+0x20c>)
  4026a2:	781b      	ldrb	r3, [r3, #0]
  4026a4:	021b      	lsls	r3, r3, #8
  4026a6:	b21a      	sxth	r2, r3
  4026a8:	4b3d      	ldr	r3, [pc, #244]	; (4027a0 <ReadAnalogIn+0x20c>)
  4026aa:	785b      	ldrb	r3, [r3, #1]
  4026ac:	b21b      	sxth	r3, r3
  4026ae:	4313      	orrs	r3, r2
  4026b0:	b21b      	sxth	r3, r3
  4026b2:	807b      	strh	r3, [r7, #2]
			/* Set Mux Select lines to channel 2 */
			gpio_set_pin_low(PIN_AMUXSEL0_IDX);
  4026b4:	2020      	movs	r0, #32
  4026b6:	4b3b      	ldr	r3, [pc, #236]	; (4027a4 <ReadAnalogIn+0x210>)
  4026b8:	4798      	blx	r3
			gpio_set_pin_high(PIN_AMUXSEL1_IDX);
  4026ba:	2021      	movs	r0, #33	; 0x21
  4026bc:	4b40      	ldr	r3, [pc, #256]	; (4027c0 <ReadAnalogIn+0x22c>)
  4026be:	4798      	blx	r3
			delay_ms(1);
  4026c0:	4b39      	ldr	r3, [pc, #228]	; (4027a8 <ReadAnalogIn+0x214>)
  4026c2:	4798      	blx	r3
  4026c4:	4603      	mov	r3, r0
  4026c6:	f04f 0400 	mov.w	r4, #0
  4026ca:	f243 61af 	movw	r1, #13999	; 0x36af
  4026ce:	f04f 0200 	mov.w	r2, #0
  4026d2:	eb13 0b01 	adds.w	fp, r3, r1
  4026d6:	eb44 0c02 	adc.w	ip, r4, r2
  4026da:	4658      	mov	r0, fp
  4026dc:	4661      	mov	r1, ip
  4026de:	4c33      	ldr	r4, [pc, #204]	; (4027ac <ReadAnalogIn+0x218>)
  4026e0:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4026e4:	f04f 0300 	mov.w	r3, #0
  4026e8:	47a0      	blx	r4
  4026ea:	4603      	mov	r3, r0
  4026ec:	460c      	mov	r4, r1
  4026ee:	4618      	mov	r0, r3
  4026f0:	4b2f      	ldr	r3, [pc, #188]	; (4027b0 <ReadAnalogIn+0x21c>)
  4026f2:	4798      	blx	r3
			anaNextState = anaRead3;
  4026f4:	4b2f      	ldr	r3, [pc, #188]	; (4027b4 <ReadAnalogIn+0x220>)
  4026f6:	2203      	movs	r2, #3
  4026f8:	701a      	strb	r2, [r3, #0]
			anaState = anaBusy;
  4026fa:	4b28      	ldr	r3, [pc, #160]	; (40279c <ReadAnalogIn+0x208>)
  4026fc:	2204      	movs	r2, #4
  4026fe:	701a      	strb	r2, [r3, #0]
			/* Initiate ADC reading */
			WriteMCP3425(BOARD_TWI,(1<<MCP_BIT_CONF_RDY)|(1<<MCP_BIT_CONF_S1));
  402700:	2188      	movs	r1, #136	; 0x88
  402702:	482d      	ldr	r0, [pc, #180]	; (4027b8 <ReadAnalogIn+0x224>)
  402704:	4b2d      	ldr	r3, [pc, #180]	; (4027bc <ReadAnalogIn+0x228>)
  402706:	4798      	blx	r3
			break;
  402708:	e042      	b.n	402790 <ReadAnalogIn+0x1fc>
		case anaRead3:
			/* Store recvd data */
			anaVal = (((uint16_t)recvdData[0])<<8)|(recvdData[1]);
  40270a:	4b25      	ldr	r3, [pc, #148]	; (4027a0 <ReadAnalogIn+0x20c>)
  40270c:	781b      	ldrb	r3, [r3, #0]
  40270e:	021b      	lsls	r3, r3, #8
  402710:	b21a      	sxth	r2, r3
  402712:	4b23      	ldr	r3, [pc, #140]	; (4027a0 <ReadAnalogIn+0x20c>)
  402714:	785b      	ldrb	r3, [r3, #1]
  402716:	b21b      	sxth	r3, r3
  402718:	4313      	orrs	r3, r2
  40271a:	b21b      	sxth	r3, r3
  40271c:	807b      	strh	r3, [r7, #2]
			/* Set Mux Select lines to channel 3 */
			gpio_set_pin_high(PIN_AMUXSEL0_IDX);
  40271e:	2020      	movs	r0, #32
  402720:	4b27      	ldr	r3, [pc, #156]	; (4027c0 <ReadAnalogIn+0x22c>)
  402722:	4798      	blx	r3
			gpio_set_pin_high(PIN_AMUXSEL1_IDX);
  402724:	2021      	movs	r0, #33	; 0x21
  402726:	4b26      	ldr	r3, [pc, #152]	; (4027c0 <ReadAnalogIn+0x22c>)
  402728:	4798      	blx	r3
			delay_ms(1);
  40272a:	4b1f      	ldr	r3, [pc, #124]	; (4027a8 <ReadAnalogIn+0x214>)
  40272c:	4798      	blx	r3
  40272e:	4603      	mov	r3, r0
  402730:	f04f 0400 	mov.w	r4, #0
  402734:	f243 61af 	movw	r1, #13999	; 0x36af
  402738:	f04f 0200 	mov.w	r2, #0
  40273c:	eb13 0b01 	adds.w	fp, r3, r1
  402740:	eb44 0c02 	adc.w	ip, r4, r2
  402744:	4658      	mov	r0, fp
  402746:	4661      	mov	r1, ip
  402748:	4c18      	ldr	r4, [pc, #96]	; (4027ac <ReadAnalogIn+0x218>)
  40274a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40274e:	f04f 0300 	mov.w	r3, #0
  402752:	47a0      	blx	r4
  402754:	4603      	mov	r3, r0
  402756:	460c      	mov	r4, r1
  402758:	4618      	mov	r0, r3
  40275a:	4b15      	ldr	r3, [pc, #84]	; (4027b0 <ReadAnalogIn+0x21c>)
  40275c:	4798      	blx	r3
			anaNextState = anaRead0;
  40275e:	4b15      	ldr	r3, [pc, #84]	; (4027b4 <ReadAnalogIn+0x220>)
  402760:	2200      	movs	r2, #0
  402762:	701a      	strb	r2, [r3, #0]
			anaState = anaBusy;
  402764:	4b0d      	ldr	r3, [pc, #52]	; (40279c <ReadAnalogIn+0x208>)
  402766:	2204      	movs	r2, #4
  402768:	701a      	strb	r2, [r3, #0]
			/* Initiate ADC reading */
			WriteMCP3425(BOARD_TWI,(1<<MCP_BIT_CONF_RDY)|(1<<MCP_BIT_CONF_S1));
  40276a:	2188      	movs	r1, #136	; 0x88
  40276c:	4812      	ldr	r0, [pc, #72]	; (4027b8 <ReadAnalogIn+0x224>)
  40276e:	4b13      	ldr	r3, [pc, #76]	; (4027bc <ReadAnalogIn+0x228>)
  402770:	4798      	blx	r3
			break;
  402772:	e00d      	b.n	402790 <ReadAnalogIn+0x1fc>
		case anaBusy:
			ReadMCP3425(BOARD_TWI, recvdData);
  402774:	490a      	ldr	r1, [pc, #40]	; (4027a0 <ReadAnalogIn+0x20c>)
  402776:	4810      	ldr	r0, [pc, #64]	; (4027b8 <ReadAnalogIn+0x224>)
  402778:	4b12      	ldr	r3, [pc, #72]	; (4027c4 <ReadAnalogIn+0x230>)
  40277a:	4798      	blx	r3
			if (!BIT_IS_SET(recvdData[2],MCP_BIT_CONF_RDY))
  40277c:	4b08      	ldr	r3, [pc, #32]	; (4027a0 <ReadAnalogIn+0x20c>)
  40277e:	789b      	ldrb	r3, [r3, #2]
  402780:	b25b      	sxtb	r3, r3
  402782:	2b00      	cmp	r3, #0
  402784:	db03      	blt.n	40278e <ReadAnalogIn+0x1fa>
			{
				anaState = anaNextState;
  402786:	4b0b      	ldr	r3, [pc, #44]	; (4027b4 <ReadAnalogIn+0x220>)
  402788:	781a      	ldrb	r2, [r3, #0]
  40278a:	4b04      	ldr	r3, [pc, #16]	; (40279c <ReadAnalogIn+0x208>)
  40278c:	701a      	strb	r2, [r3, #0]
			}
			break;
  40278e:	bf00      	nop
	}
}
  402790:	bf00      	nop
  402792:	3708      	adds	r7, #8
  402794:	46bd      	mov	sp, r7
  402796:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
  40279a:	bf00      	nop
  40279c:	20000529 	.word	0x20000529
  4027a0:	200004e4 	.word	0x200004e4
  4027a4:	0040185d 	.word	0x0040185d
  4027a8:	0040230d 	.word	0x0040230d
  4027ac:	00402e9d 	.word	0x00402e9d
  4027b0:	20000001 	.word	0x20000001
  4027b4:	20000528 	.word	0x20000528
  4027b8:	40018000 	.word	0x40018000
  4027bc:	00400d6d 	.word	0x00400d6d
  4027c0:	0040182d 	.word	0x0040182d
  4027c4:	00400da1 	.word	0x00400da1

004027c8 <ReadDigitalIn>:

void ReadDigitalIn(void)
{
  4027c8:	b580      	push	{r7, lr}
  4027ca:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	switch(i)
  4027cc:	4b96      	ldr	r3, [pc, #600]	; (402a28 <ReadDigitalIn+0x260>)
  4027ce:	781b      	ldrb	r3, [r3, #0]
  4027d0:	2b07      	cmp	r3, #7
  4027d2:	f200 8349 	bhi.w	402e68 <ReadDigitalIn+0x6a0>
  4027d6:	a201      	add	r2, pc, #4	; (adr r2, 4027dc <ReadDigitalIn+0x14>)
  4027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4027dc:	004027fd 	.word	0x004027fd
  4027e0:	004028c5 	.word	0x004028c5
  4027e4:	0040298d 	.word	0x0040298d
  4027e8:	00402a6b 	.word	0x00402a6b
  4027ec:	00402b33 	.word	0x00402b33
  4027f0:	00402bfb 	.word	0x00402bfb
  4027f4:	00402cd7 	.word	0x00402cd7
  4027f8:	00402d9f 	.word	0x00402d9f
	{
		case 0:
			if(gpio_pin_is_high(PIN_MUXOUT0_IDX))
  4027fc:	2019      	movs	r0, #25
  4027fe:	4b8b      	ldr	r3, [pc, #556]	; (402a2c <ReadDigitalIn+0x264>)
  402800:	4798      	blx	r3
  402802:	4603      	mov	r3, r0
  402804:	2b00      	cmp	r3, #0
  402806:	d007      	beq.n	402818 <ReadDigitalIn+0x50>
				SBI(mBusRegs[MBUS_REG_DI0],0);
  402808:	4b89      	ldr	r3, [pc, #548]	; (402a30 <ReadDigitalIn+0x268>)
  40280a:	881b      	ldrh	r3, [r3, #0]
  40280c:	f043 0301 	orr.w	r3, r3, #1
  402810:	b29a      	uxth	r2, r3
  402812:	4b87      	ldr	r3, [pc, #540]	; (402a30 <ReadDigitalIn+0x268>)
  402814:	801a      	strh	r2, [r3, #0]
  402816:	e006      	b.n	402826 <ReadDigitalIn+0x5e>
			else
				CBI(mBusRegs[MBUS_REG_DI0],0);
  402818:	4b85      	ldr	r3, [pc, #532]	; (402a30 <ReadDigitalIn+0x268>)
  40281a:	881b      	ldrh	r3, [r3, #0]
  40281c:	f023 0301 	bic.w	r3, r3, #1
  402820:	b29a      	uxth	r2, r3
  402822:	4b83      	ldr	r3, [pc, #524]	; (402a30 <ReadDigitalIn+0x268>)
  402824:	801a      	strh	r2, [r3, #0]

			if(gpio_pin_is_high(PIN_MUXOUT1_IDX))
  402826:	201a      	movs	r0, #26
  402828:	4b80      	ldr	r3, [pc, #512]	; (402a2c <ReadDigitalIn+0x264>)
  40282a:	4798      	blx	r3
  40282c:	4603      	mov	r3, r0
  40282e:	2b00      	cmp	r3, #0
  402830:	d007      	beq.n	402842 <ReadDigitalIn+0x7a>
				SBI(mBusRegs[MBUS_REG_DI0],8);
  402832:	4b7f      	ldr	r3, [pc, #508]	; (402a30 <ReadDigitalIn+0x268>)
  402834:	881b      	ldrh	r3, [r3, #0]
  402836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40283a:	b29a      	uxth	r2, r3
  40283c:	4b7c      	ldr	r3, [pc, #496]	; (402a30 <ReadDigitalIn+0x268>)
  40283e:	801a      	strh	r2, [r3, #0]
  402840:	e006      	b.n	402850 <ReadDigitalIn+0x88>
			else
				CBI(mBusRegs[MBUS_REG_DI0],8);
  402842:	4b7b      	ldr	r3, [pc, #492]	; (402a30 <ReadDigitalIn+0x268>)
  402844:	881b      	ldrh	r3, [r3, #0]
  402846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40284a:	b29a      	uxth	r2, r3
  40284c:	4b78      	ldr	r3, [pc, #480]	; (402a30 <ReadDigitalIn+0x268>)
  40284e:	801a      	strh	r2, [r3, #0]
			
			if(gpio_pin_is_high(PIN_MUXOUT2_IDX))
  402850:	200c      	movs	r0, #12
  402852:	4b76      	ldr	r3, [pc, #472]	; (402a2c <ReadDigitalIn+0x264>)
  402854:	4798      	blx	r3
  402856:	4603      	mov	r3, r0
  402858:	2b00      	cmp	r3, #0
  40285a:	d007      	beq.n	40286c <ReadDigitalIn+0xa4>
				SBI(mBusRegs[MBUS_REG_DI1],0);
  40285c:	4b74      	ldr	r3, [pc, #464]	; (402a30 <ReadDigitalIn+0x268>)
  40285e:	885b      	ldrh	r3, [r3, #2]
  402860:	f043 0301 	orr.w	r3, r3, #1
  402864:	b29a      	uxth	r2, r3
  402866:	4b72      	ldr	r3, [pc, #456]	; (402a30 <ReadDigitalIn+0x268>)
  402868:	805a      	strh	r2, [r3, #2]
  40286a:	e006      	b.n	40287a <ReadDigitalIn+0xb2>
			else
				CBI(mBusRegs[MBUS_REG_DI1],0);
  40286c:	4b70      	ldr	r3, [pc, #448]	; (402a30 <ReadDigitalIn+0x268>)
  40286e:	885b      	ldrh	r3, [r3, #2]
  402870:	f023 0301 	bic.w	r3, r3, #1
  402874:	b29a      	uxth	r2, r3
  402876:	4b6e      	ldr	r3, [pc, #440]	; (402a30 <ReadDigitalIn+0x268>)
  402878:	805a      	strh	r2, [r3, #2]

			if(gpio_pin_is_high(PIN_MUXOUT3_IDX))
  40287a:	200b      	movs	r0, #11
  40287c:	4b6b      	ldr	r3, [pc, #428]	; (402a2c <ReadDigitalIn+0x264>)
  40287e:	4798      	blx	r3
  402880:	4603      	mov	r3, r0
  402882:	2b00      	cmp	r3, #0
  402884:	d007      	beq.n	402896 <ReadDigitalIn+0xce>
				SBI(mBusRegs[MBUS_REG_DI1],8);
  402886:	4b6a      	ldr	r3, [pc, #424]	; (402a30 <ReadDigitalIn+0x268>)
  402888:	885b      	ldrh	r3, [r3, #2]
  40288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40288e:	b29a      	uxth	r2, r3
  402890:	4b67      	ldr	r3, [pc, #412]	; (402a30 <ReadDigitalIn+0x268>)
  402892:	805a      	strh	r2, [r3, #2]
  402894:	e006      	b.n	4028a4 <ReadDigitalIn+0xdc>
			else
				CBI(mBusRegs[MBUS_REG_DI1],8);
  402896:	4b66      	ldr	r3, [pc, #408]	; (402a30 <ReadDigitalIn+0x268>)
  402898:	885b      	ldrh	r3, [r3, #2]
  40289a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40289e:	b29a      	uxth	r2, r3
  4028a0:	4b63      	ldr	r3, [pc, #396]	; (402a30 <ReadDigitalIn+0x268>)
  4028a2:	805a      	strh	r2, [r3, #2]

			gpio_set_pin_high(PIN_MUXSEL0_IDX);
  4028a4:	2005      	movs	r0, #5
  4028a6:	4b63      	ldr	r3, [pc, #396]	; (402a34 <ReadDigitalIn+0x26c>)
  4028a8:	4798      	blx	r3
			gpio_set_pin_low(PIN_MUXSEL1_IDX);
  4028aa:	2006      	movs	r0, #6
  4028ac:	4b62      	ldr	r3, [pc, #392]	; (402a38 <ReadDigitalIn+0x270>)
  4028ae:	4798      	blx	r3
			gpio_set_pin_low(PIN_MUXSEL2_IDX);
  4028b0:	2024      	movs	r0, #36	; 0x24
  4028b2:	4b61      	ldr	r3, [pc, #388]	; (402a38 <ReadDigitalIn+0x270>)
  4028b4:	4798      	blx	r3
			i++;
  4028b6:	4b5c      	ldr	r3, [pc, #368]	; (402a28 <ReadDigitalIn+0x260>)
  4028b8:	781b      	ldrb	r3, [r3, #0]
  4028ba:	3301      	adds	r3, #1
  4028bc:	b2da      	uxtb	r2, r3
  4028be:	4b5a      	ldr	r3, [pc, #360]	; (402a28 <ReadDigitalIn+0x260>)
  4028c0:	701a      	strb	r2, [r3, #0]
			break;
  4028c2:	e2de      	b.n	402e82 <ReadDigitalIn+0x6ba>
		case 1:
			if(gpio_pin_is_high(PIN_MUXOUT0_IDX))
  4028c4:	2019      	movs	r0, #25
  4028c6:	4b59      	ldr	r3, [pc, #356]	; (402a2c <ReadDigitalIn+0x264>)
  4028c8:	4798      	blx	r3
  4028ca:	4603      	mov	r3, r0
  4028cc:	2b00      	cmp	r3, #0
  4028ce:	d007      	beq.n	4028e0 <ReadDigitalIn+0x118>
				SBI(mBusRegs[MBUS_REG_DI0],1);
  4028d0:	4b57      	ldr	r3, [pc, #348]	; (402a30 <ReadDigitalIn+0x268>)
  4028d2:	881b      	ldrh	r3, [r3, #0]
  4028d4:	f043 0302 	orr.w	r3, r3, #2
  4028d8:	b29a      	uxth	r2, r3
  4028da:	4b55      	ldr	r3, [pc, #340]	; (402a30 <ReadDigitalIn+0x268>)
  4028dc:	801a      	strh	r2, [r3, #0]
  4028de:	e006      	b.n	4028ee <ReadDigitalIn+0x126>
			else
				CBI(mBusRegs[MBUS_REG_DI0],1);
  4028e0:	4b53      	ldr	r3, [pc, #332]	; (402a30 <ReadDigitalIn+0x268>)
  4028e2:	881b      	ldrh	r3, [r3, #0]
  4028e4:	f023 0302 	bic.w	r3, r3, #2
  4028e8:	b29a      	uxth	r2, r3
  4028ea:	4b51      	ldr	r3, [pc, #324]	; (402a30 <ReadDigitalIn+0x268>)
  4028ec:	801a      	strh	r2, [r3, #0]

			if(gpio_pin_is_high(PIN_MUXOUT1_IDX))
  4028ee:	201a      	movs	r0, #26
  4028f0:	4b4e      	ldr	r3, [pc, #312]	; (402a2c <ReadDigitalIn+0x264>)
  4028f2:	4798      	blx	r3
  4028f4:	4603      	mov	r3, r0
  4028f6:	2b00      	cmp	r3, #0
  4028f8:	d007      	beq.n	40290a <ReadDigitalIn+0x142>
				SBI(mBusRegs[MBUS_REG_DI0],9);
  4028fa:	4b4d      	ldr	r3, [pc, #308]	; (402a30 <ReadDigitalIn+0x268>)
  4028fc:	881b      	ldrh	r3, [r3, #0]
  4028fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402902:	b29a      	uxth	r2, r3
  402904:	4b4a      	ldr	r3, [pc, #296]	; (402a30 <ReadDigitalIn+0x268>)
  402906:	801a      	strh	r2, [r3, #0]
  402908:	e006      	b.n	402918 <ReadDigitalIn+0x150>
			else
				CBI(mBusRegs[MBUS_REG_DI0],9);
  40290a:	4b49      	ldr	r3, [pc, #292]	; (402a30 <ReadDigitalIn+0x268>)
  40290c:	881b      	ldrh	r3, [r3, #0]
  40290e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  402912:	b29a      	uxth	r2, r3
  402914:	4b46      	ldr	r3, [pc, #280]	; (402a30 <ReadDigitalIn+0x268>)
  402916:	801a      	strh	r2, [r3, #0]
			
			if(gpio_pin_is_high(PIN_MUXOUT2_IDX))
  402918:	200c      	movs	r0, #12
  40291a:	4b44      	ldr	r3, [pc, #272]	; (402a2c <ReadDigitalIn+0x264>)
  40291c:	4798      	blx	r3
  40291e:	4603      	mov	r3, r0
  402920:	2b00      	cmp	r3, #0
  402922:	d007      	beq.n	402934 <ReadDigitalIn+0x16c>
				SBI(mBusRegs[MBUS_REG_DI1],1);
  402924:	4b42      	ldr	r3, [pc, #264]	; (402a30 <ReadDigitalIn+0x268>)
  402926:	885b      	ldrh	r3, [r3, #2]
  402928:	f043 0302 	orr.w	r3, r3, #2
  40292c:	b29a      	uxth	r2, r3
  40292e:	4b40      	ldr	r3, [pc, #256]	; (402a30 <ReadDigitalIn+0x268>)
  402930:	805a      	strh	r2, [r3, #2]
  402932:	e006      	b.n	402942 <ReadDigitalIn+0x17a>
			else
				CBI(mBusRegs[MBUS_REG_DI1],1);
  402934:	4b3e      	ldr	r3, [pc, #248]	; (402a30 <ReadDigitalIn+0x268>)
  402936:	885b      	ldrh	r3, [r3, #2]
  402938:	f023 0302 	bic.w	r3, r3, #2
  40293c:	b29a      	uxth	r2, r3
  40293e:	4b3c      	ldr	r3, [pc, #240]	; (402a30 <ReadDigitalIn+0x268>)
  402940:	805a      	strh	r2, [r3, #2]

			if(gpio_pin_is_high(PIN_MUXOUT3_IDX))
  402942:	200b      	movs	r0, #11
  402944:	4b39      	ldr	r3, [pc, #228]	; (402a2c <ReadDigitalIn+0x264>)
  402946:	4798      	blx	r3
  402948:	4603      	mov	r3, r0
  40294a:	2b00      	cmp	r3, #0
  40294c:	d007      	beq.n	40295e <ReadDigitalIn+0x196>
				SBI(mBusRegs[MBUS_REG_DI1],9);
  40294e:	4b38      	ldr	r3, [pc, #224]	; (402a30 <ReadDigitalIn+0x268>)
  402950:	885b      	ldrh	r3, [r3, #2]
  402952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  402956:	b29a      	uxth	r2, r3
  402958:	4b35      	ldr	r3, [pc, #212]	; (402a30 <ReadDigitalIn+0x268>)
  40295a:	805a      	strh	r2, [r3, #2]
  40295c:	e006      	b.n	40296c <ReadDigitalIn+0x1a4>
			else
				CBI(mBusRegs[MBUS_REG_DI1],9);
  40295e:	4b34      	ldr	r3, [pc, #208]	; (402a30 <ReadDigitalIn+0x268>)
  402960:	885b      	ldrh	r3, [r3, #2]
  402962:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  402966:	b29a      	uxth	r2, r3
  402968:	4b31      	ldr	r3, [pc, #196]	; (402a30 <ReadDigitalIn+0x268>)
  40296a:	805a      	strh	r2, [r3, #2]

			gpio_set_pin_low(PIN_MUXSEL0_IDX);
  40296c:	2005      	movs	r0, #5
  40296e:	4b32      	ldr	r3, [pc, #200]	; (402a38 <ReadDigitalIn+0x270>)
  402970:	4798      	blx	r3
			gpio_set_pin_high(PIN_MUXSEL1_IDX);
  402972:	2006      	movs	r0, #6
  402974:	4b2f      	ldr	r3, [pc, #188]	; (402a34 <ReadDigitalIn+0x26c>)
  402976:	4798      	blx	r3
			gpio_set_pin_low(PIN_MUXSEL2_IDX);
  402978:	2024      	movs	r0, #36	; 0x24
  40297a:	4b2f      	ldr	r3, [pc, #188]	; (402a38 <ReadDigitalIn+0x270>)
  40297c:	4798      	blx	r3
			i++;
  40297e:	4b2a      	ldr	r3, [pc, #168]	; (402a28 <ReadDigitalIn+0x260>)
  402980:	781b      	ldrb	r3, [r3, #0]
  402982:	3301      	adds	r3, #1
  402984:	b2da      	uxtb	r2, r3
  402986:	4b28      	ldr	r3, [pc, #160]	; (402a28 <ReadDigitalIn+0x260>)
  402988:	701a      	strb	r2, [r3, #0]
			break;
  40298a:	e27a      	b.n	402e82 <ReadDigitalIn+0x6ba>
		case 2:
			if(gpio_pin_is_high(PIN_MUXOUT0_IDX))
  40298c:	2019      	movs	r0, #25
  40298e:	4b27      	ldr	r3, [pc, #156]	; (402a2c <ReadDigitalIn+0x264>)
  402990:	4798      	blx	r3
  402992:	4603      	mov	r3, r0
  402994:	2b00      	cmp	r3, #0
  402996:	d007      	beq.n	4029a8 <ReadDigitalIn+0x1e0>
				SBI(mBusRegs[MBUS_REG_DI0],2);
  402998:	4b25      	ldr	r3, [pc, #148]	; (402a30 <ReadDigitalIn+0x268>)
  40299a:	881b      	ldrh	r3, [r3, #0]
  40299c:	f043 0304 	orr.w	r3, r3, #4
  4029a0:	b29a      	uxth	r2, r3
  4029a2:	4b23      	ldr	r3, [pc, #140]	; (402a30 <ReadDigitalIn+0x268>)
  4029a4:	801a      	strh	r2, [r3, #0]
  4029a6:	e006      	b.n	4029b6 <ReadDigitalIn+0x1ee>
			else
				CBI(mBusRegs[MBUS_REG_DI0],2);
  4029a8:	4b21      	ldr	r3, [pc, #132]	; (402a30 <ReadDigitalIn+0x268>)
  4029aa:	881b      	ldrh	r3, [r3, #0]
  4029ac:	f023 0304 	bic.w	r3, r3, #4
  4029b0:	b29a      	uxth	r2, r3
  4029b2:	4b1f      	ldr	r3, [pc, #124]	; (402a30 <ReadDigitalIn+0x268>)
  4029b4:	801a      	strh	r2, [r3, #0]

			if(gpio_pin_is_high(PIN_MUXOUT1_IDX))
  4029b6:	201a      	movs	r0, #26
  4029b8:	4b1c      	ldr	r3, [pc, #112]	; (402a2c <ReadDigitalIn+0x264>)
  4029ba:	4798      	blx	r3
  4029bc:	4603      	mov	r3, r0
  4029be:	2b00      	cmp	r3, #0
  4029c0:	d007      	beq.n	4029d2 <ReadDigitalIn+0x20a>
				SBI(mBusRegs[MBUS_REG_DI0],10);
  4029c2:	4b1b      	ldr	r3, [pc, #108]	; (402a30 <ReadDigitalIn+0x268>)
  4029c4:	881b      	ldrh	r3, [r3, #0]
  4029c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4029ca:	b29a      	uxth	r2, r3
  4029cc:	4b18      	ldr	r3, [pc, #96]	; (402a30 <ReadDigitalIn+0x268>)
  4029ce:	801a      	strh	r2, [r3, #0]
  4029d0:	e006      	b.n	4029e0 <ReadDigitalIn+0x218>
			else
				CBI(mBusRegs[MBUS_REG_DI0],10);
  4029d2:	4b17      	ldr	r3, [pc, #92]	; (402a30 <ReadDigitalIn+0x268>)
  4029d4:	881b      	ldrh	r3, [r3, #0]
  4029d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4029da:	b29a      	uxth	r2, r3
  4029dc:	4b14      	ldr	r3, [pc, #80]	; (402a30 <ReadDigitalIn+0x268>)
  4029de:	801a      	strh	r2, [r3, #0]
			
			if(gpio_pin_is_high(PIN_MUXOUT2_IDX))
  4029e0:	200c      	movs	r0, #12
  4029e2:	4b12      	ldr	r3, [pc, #72]	; (402a2c <ReadDigitalIn+0x264>)
  4029e4:	4798      	blx	r3
  4029e6:	4603      	mov	r3, r0
  4029e8:	2b00      	cmp	r3, #0
  4029ea:	d007      	beq.n	4029fc <ReadDigitalIn+0x234>
				SBI(mBusRegs[MBUS_REG_DI1],2);
  4029ec:	4b10      	ldr	r3, [pc, #64]	; (402a30 <ReadDigitalIn+0x268>)
  4029ee:	885b      	ldrh	r3, [r3, #2]
  4029f0:	f043 0304 	orr.w	r3, r3, #4
  4029f4:	b29a      	uxth	r2, r3
  4029f6:	4b0e      	ldr	r3, [pc, #56]	; (402a30 <ReadDigitalIn+0x268>)
  4029f8:	805a      	strh	r2, [r3, #2]
  4029fa:	e006      	b.n	402a0a <ReadDigitalIn+0x242>
			else
				CBI(mBusRegs[MBUS_REG_DI1],2);
  4029fc:	4b0c      	ldr	r3, [pc, #48]	; (402a30 <ReadDigitalIn+0x268>)
  4029fe:	885b      	ldrh	r3, [r3, #2]
  402a00:	f023 0304 	bic.w	r3, r3, #4
  402a04:	b29a      	uxth	r2, r3
  402a06:	4b0a      	ldr	r3, [pc, #40]	; (402a30 <ReadDigitalIn+0x268>)
  402a08:	805a      	strh	r2, [r3, #2]

			if(gpio_pin_is_high(PIN_MUXOUT3_IDX))
  402a0a:	200b      	movs	r0, #11
  402a0c:	4b07      	ldr	r3, [pc, #28]	; (402a2c <ReadDigitalIn+0x264>)
  402a0e:	4798      	blx	r3
  402a10:	4603      	mov	r3, r0
  402a12:	2b00      	cmp	r3, #0
  402a14:	d012      	beq.n	402a3c <ReadDigitalIn+0x274>
				SBI(mBusRegs[MBUS_REG_DI1],10);
  402a16:	4b06      	ldr	r3, [pc, #24]	; (402a30 <ReadDigitalIn+0x268>)
  402a18:	885b      	ldrh	r3, [r3, #2]
  402a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  402a1e:	b29a      	uxth	r2, r3
  402a20:	4b03      	ldr	r3, [pc, #12]	; (402a30 <ReadDigitalIn+0x268>)
  402a22:	805a      	strh	r2, [r3, #2]
  402a24:	e011      	b.n	402a4a <ReadDigitalIn+0x282>
  402a26:	bf00      	nop
  402a28:	200004e7 	.word	0x200004e7
  402a2c:	004017fd 	.word	0x004017fd
  402a30:	20000458 	.word	0x20000458
  402a34:	0040182d 	.word	0x0040182d
  402a38:	0040185d 	.word	0x0040185d
			else
				CBI(mBusRegs[MBUS_REG_DI1],10);
  402a3c:	4b95      	ldr	r3, [pc, #596]	; (402c94 <ReadDigitalIn+0x4cc>)
  402a3e:	885b      	ldrh	r3, [r3, #2]
  402a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402a44:	b29a      	uxth	r2, r3
  402a46:	4b93      	ldr	r3, [pc, #588]	; (402c94 <ReadDigitalIn+0x4cc>)
  402a48:	805a      	strh	r2, [r3, #2]

			gpio_set_pin_high(PIN_MUXSEL0_IDX);
  402a4a:	2005      	movs	r0, #5
  402a4c:	4b92      	ldr	r3, [pc, #584]	; (402c98 <ReadDigitalIn+0x4d0>)
  402a4e:	4798      	blx	r3
			gpio_set_pin_high(PIN_MUXSEL1_IDX);
  402a50:	2006      	movs	r0, #6
  402a52:	4b91      	ldr	r3, [pc, #580]	; (402c98 <ReadDigitalIn+0x4d0>)
  402a54:	4798      	blx	r3
			gpio_set_pin_low(PIN_MUXSEL2_IDX);
  402a56:	2024      	movs	r0, #36	; 0x24
  402a58:	4b90      	ldr	r3, [pc, #576]	; (402c9c <ReadDigitalIn+0x4d4>)
  402a5a:	4798      	blx	r3
			i++;
  402a5c:	4b90      	ldr	r3, [pc, #576]	; (402ca0 <ReadDigitalIn+0x4d8>)
  402a5e:	781b      	ldrb	r3, [r3, #0]
  402a60:	3301      	adds	r3, #1
  402a62:	b2da      	uxtb	r2, r3
  402a64:	4b8e      	ldr	r3, [pc, #568]	; (402ca0 <ReadDigitalIn+0x4d8>)
  402a66:	701a      	strb	r2, [r3, #0]
			break;
  402a68:	e20b      	b.n	402e82 <ReadDigitalIn+0x6ba>
		case 3:
			if(gpio_pin_is_high(PIN_MUXOUT0_IDX))
  402a6a:	2019      	movs	r0, #25
  402a6c:	4b8d      	ldr	r3, [pc, #564]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402a6e:	4798      	blx	r3
  402a70:	4603      	mov	r3, r0
  402a72:	2b00      	cmp	r3, #0
  402a74:	d007      	beq.n	402a86 <ReadDigitalIn+0x2be>
				SBI(mBusRegs[MBUS_REG_DI0],3);
  402a76:	4b87      	ldr	r3, [pc, #540]	; (402c94 <ReadDigitalIn+0x4cc>)
  402a78:	881b      	ldrh	r3, [r3, #0]
  402a7a:	f043 0308 	orr.w	r3, r3, #8
  402a7e:	b29a      	uxth	r2, r3
  402a80:	4b84      	ldr	r3, [pc, #528]	; (402c94 <ReadDigitalIn+0x4cc>)
  402a82:	801a      	strh	r2, [r3, #0]
  402a84:	e006      	b.n	402a94 <ReadDigitalIn+0x2cc>
			else
				CBI(mBusRegs[MBUS_REG_DI0],3);
  402a86:	4b83      	ldr	r3, [pc, #524]	; (402c94 <ReadDigitalIn+0x4cc>)
  402a88:	881b      	ldrh	r3, [r3, #0]
  402a8a:	f023 0308 	bic.w	r3, r3, #8
  402a8e:	b29a      	uxth	r2, r3
  402a90:	4b80      	ldr	r3, [pc, #512]	; (402c94 <ReadDigitalIn+0x4cc>)
  402a92:	801a      	strh	r2, [r3, #0]

			if(gpio_pin_is_high(PIN_MUXOUT1_IDX))
  402a94:	201a      	movs	r0, #26
  402a96:	4b83      	ldr	r3, [pc, #524]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402a98:	4798      	blx	r3
  402a9a:	4603      	mov	r3, r0
  402a9c:	2b00      	cmp	r3, #0
  402a9e:	d007      	beq.n	402ab0 <ReadDigitalIn+0x2e8>
				SBI(mBusRegs[MBUS_REG_DI0],11);
  402aa0:	4b7c      	ldr	r3, [pc, #496]	; (402c94 <ReadDigitalIn+0x4cc>)
  402aa2:	881b      	ldrh	r3, [r3, #0]
  402aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402aa8:	b29a      	uxth	r2, r3
  402aaa:	4b7a      	ldr	r3, [pc, #488]	; (402c94 <ReadDigitalIn+0x4cc>)
  402aac:	801a      	strh	r2, [r3, #0]
  402aae:	e006      	b.n	402abe <ReadDigitalIn+0x2f6>
			else
				CBI(mBusRegs[MBUS_REG_DI0],11);
  402ab0:	4b78      	ldr	r3, [pc, #480]	; (402c94 <ReadDigitalIn+0x4cc>)
  402ab2:	881b      	ldrh	r3, [r3, #0]
  402ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402ab8:	b29a      	uxth	r2, r3
  402aba:	4b76      	ldr	r3, [pc, #472]	; (402c94 <ReadDigitalIn+0x4cc>)
  402abc:	801a      	strh	r2, [r3, #0]
			
			if(gpio_pin_is_high(PIN_MUXOUT2_IDX))
  402abe:	200c      	movs	r0, #12
  402ac0:	4b78      	ldr	r3, [pc, #480]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402ac2:	4798      	blx	r3
  402ac4:	4603      	mov	r3, r0
  402ac6:	2b00      	cmp	r3, #0
  402ac8:	d007      	beq.n	402ada <ReadDigitalIn+0x312>
				SBI(mBusRegs[MBUS_REG_DI1],3);
  402aca:	4b72      	ldr	r3, [pc, #456]	; (402c94 <ReadDigitalIn+0x4cc>)
  402acc:	885b      	ldrh	r3, [r3, #2]
  402ace:	f043 0308 	orr.w	r3, r3, #8
  402ad2:	b29a      	uxth	r2, r3
  402ad4:	4b6f      	ldr	r3, [pc, #444]	; (402c94 <ReadDigitalIn+0x4cc>)
  402ad6:	805a      	strh	r2, [r3, #2]
  402ad8:	e006      	b.n	402ae8 <ReadDigitalIn+0x320>
			else
				CBI(mBusRegs[MBUS_REG_DI1],3);
  402ada:	4b6e      	ldr	r3, [pc, #440]	; (402c94 <ReadDigitalIn+0x4cc>)
  402adc:	885b      	ldrh	r3, [r3, #2]
  402ade:	f023 0308 	bic.w	r3, r3, #8
  402ae2:	b29a      	uxth	r2, r3
  402ae4:	4b6b      	ldr	r3, [pc, #428]	; (402c94 <ReadDigitalIn+0x4cc>)
  402ae6:	805a      	strh	r2, [r3, #2]

			if(gpio_pin_is_high(PIN_MUXOUT3_IDX))
  402ae8:	200b      	movs	r0, #11
  402aea:	4b6e      	ldr	r3, [pc, #440]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402aec:	4798      	blx	r3
  402aee:	4603      	mov	r3, r0
  402af0:	2b00      	cmp	r3, #0
  402af2:	d007      	beq.n	402b04 <ReadDigitalIn+0x33c>
				SBI(mBusRegs[MBUS_REG_DI1],11);
  402af4:	4b67      	ldr	r3, [pc, #412]	; (402c94 <ReadDigitalIn+0x4cc>)
  402af6:	885b      	ldrh	r3, [r3, #2]
  402af8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402afc:	b29a      	uxth	r2, r3
  402afe:	4b65      	ldr	r3, [pc, #404]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b00:	805a      	strh	r2, [r3, #2]
  402b02:	e006      	b.n	402b12 <ReadDigitalIn+0x34a>
			else
				CBI(mBusRegs[MBUS_REG_DI1],11);
  402b04:	4b63      	ldr	r3, [pc, #396]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b06:	885b      	ldrh	r3, [r3, #2]
  402b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402b0c:	b29a      	uxth	r2, r3
  402b0e:	4b61      	ldr	r3, [pc, #388]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b10:	805a      	strh	r2, [r3, #2]

			gpio_set_pin_low(PIN_MUXSEL0_IDX);
  402b12:	2005      	movs	r0, #5
  402b14:	4b61      	ldr	r3, [pc, #388]	; (402c9c <ReadDigitalIn+0x4d4>)
  402b16:	4798      	blx	r3
			gpio_set_pin_low(PIN_MUXSEL1_IDX);
  402b18:	2006      	movs	r0, #6
  402b1a:	4b60      	ldr	r3, [pc, #384]	; (402c9c <ReadDigitalIn+0x4d4>)
  402b1c:	4798      	blx	r3
			gpio_set_pin_high(PIN_MUXSEL2_IDX);
  402b1e:	2024      	movs	r0, #36	; 0x24
  402b20:	4b5d      	ldr	r3, [pc, #372]	; (402c98 <ReadDigitalIn+0x4d0>)
  402b22:	4798      	blx	r3
			i++;
  402b24:	4b5e      	ldr	r3, [pc, #376]	; (402ca0 <ReadDigitalIn+0x4d8>)
  402b26:	781b      	ldrb	r3, [r3, #0]
  402b28:	3301      	adds	r3, #1
  402b2a:	b2da      	uxtb	r2, r3
  402b2c:	4b5c      	ldr	r3, [pc, #368]	; (402ca0 <ReadDigitalIn+0x4d8>)
  402b2e:	701a      	strb	r2, [r3, #0]
			break;
  402b30:	e1a7      	b.n	402e82 <ReadDigitalIn+0x6ba>
		case 4:
			if(gpio_pin_is_high(PIN_MUXOUT0_IDX))
  402b32:	2019      	movs	r0, #25
  402b34:	4b5b      	ldr	r3, [pc, #364]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402b36:	4798      	blx	r3
  402b38:	4603      	mov	r3, r0
  402b3a:	2b00      	cmp	r3, #0
  402b3c:	d007      	beq.n	402b4e <ReadDigitalIn+0x386>
				SBI(mBusRegs[MBUS_REG_DI0],4);
  402b3e:	4b55      	ldr	r3, [pc, #340]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b40:	881b      	ldrh	r3, [r3, #0]
  402b42:	f043 0310 	orr.w	r3, r3, #16
  402b46:	b29a      	uxth	r2, r3
  402b48:	4b52      	ldr	r3, [pc, #328]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b4a:	801a      	strh	r2, [r3, #0]
  402b4c:	e006      	b.n	402b5c <ReadDigitalIn+0x394>
			else
				CBI(mBusRegs[MBUS_REG_DI0],4);
  402b4e:	4b51      	ldr	r3, [pc, #324]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b50:	881b      	ldrh	r3, [r3, #0]
  402b52:	f023 0310 	bic.w	r3, r3, #16
  402b56:	b29a      	uxth	r2, r3
  402b58:	4b4e      	ldr	r3, [pc, #312]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b5a:	801a      	strh	r2, [r3, #0]

			if(gpio_pin_is_high(PIN_MUXOUT1_IDX))
  402b5c:	201a      	movs	r0, #26
  402b5e:	4b51      	ldr	r3, [pc, #324]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402b60:	4798      	blx	r3
  402b62:	4603      	mov	r3, r0
  402b64:	2b00      	cmp	r3, #0
  402b66:	d007      	beq.n	402b78 <ReadDigitalIn+0x3b0>
				SBI(mBusRegs[MBUS_REG_DI0],12);
  402b68:	4b4a      	ldr	r3, [pc, #296]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b6a:	881b      	ldrh	r3, [r3, #0]
  402b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402b70:	b29a      	uxth	r2, r3
  402b72:	4b48      	ldr	r3, [pc, #288]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b74:	801a      	strh	r2, [r3, #0]
  402b76:	e006      	b.n	402b86 <ReadDigitalIn+0x3be>
			else
				CBI(mBusRegs[MBUS_REG_DI0],12);
  402b78:	4b46      	ldr	r3, [pc, #280]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b7a:	881b      	ldrh	r3, [r3, #0]
  402b7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402b80:	b29a      	uxth	r2, r3
  402b82:	4b44      	ldr	r3, [pc, #272]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b84:	801a      	strh	r2, [r3, #0]
			
			if(gpio_pin_is_high(PIN_MUXOUT2_IDX))
  402b86:	200c      	movs	r0, #12
  402b88:	4b46      	ldr	r3, [pc, #280]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402b8a:	4798      	blx	r3
  402b8c:	4603      	mov	r3, r0
  402b8e:	2b00      	cmp	r3, #0
  402b90:	d007      	beq.n	402ba2 <ReadDigitalIn+0x3da>
				SBI(mBusRegs[MBUS_REG_DI1],4);
  402b92:	4b40      	ldr	r3, [pc, #256]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b94:	885b      	ldrh	r3, [r3, #2]
  402b96:	f043 0310 	orr.w	r3, r3, #16
  402b9a:	b29a      	uxth	r2, r3
  402b9c:	4b3d      	ldr	r3, [pc, #244]	; (402c94 <ReadDigitalIn+0x4cc>)
  402b9e:	805a      	strh	r2, [r3, #2]
  402ba0:	e006      	b.n	402bb0 <ReadDigitalIn+0x3e8>
			else
				CBI(mBusRegs[MBUS_REG_DI1],4);
  402ba2:	4b3c      	ldr	r3, [pc, #240]	; (402c94 <ReadDigitalIn+0x4cc>)
  402ba4:	885b      	ldrh	r3, [r3, #2]
  402ba6:	f023 0310 	bic.w	r3, r3, #16
  402baa:	b29a      	uxth	r2, r3
  402bac:	4b39      	ldr	r3, [pc, #228]	; (402c94 <ReadDigitalIn+0x4cc>)
  402bae:	805a      	strh	r2, [r3, #2]

			if(gpio_pin_is_high(PIN_MUXOUT3_IDX))
  402bb0:	200b      	movs	r0, #11
  402bb2:	4b3c      	ldr	r3, [pc, #240]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402bb4:	4798      	blx	r3
  402bb6:	4603      	mov	r3, r0
  402bb8:	2b00      	cmp	r3, #0
  402bba:	d007      	beq.n	402bcc <ReadDigitalIn+0x404>
				SBI(mBusRegs[MBUS_REG_DI1],12);
  402bbc:	4b35      	ldr	r3, [pc, #212]	; (402c94 <ReadDigitalIn+0x4cc>)
  402bbe:	885b      	ldrh	r3, [r3, #2]
  402bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402bc4:	b29a      	uxth	r2, r3
  402bc6:	4b33      	ldr	r3, [pc, #204]	; (402c94 <ReadDigitalIn+0x4cc>)
  402bc8:	805a      	strh	r2, [r3, #2]
  402bca:	e006      	b.n	402bda <ReadDigitalIn+0x412>
			else
				CBI(mBusRegs[MBUS_REG_DI1],12);
  402bcc:	4b31      	ldr	r3, [pc, #196]	; (402c94 <ReadDigitalIn+0x4cc>)
  402bce:	885b      	ldrh	r3, [r3, #2]
  402bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402bd4:	b29a      	uxth	r2, r3
  402bd6:	4b2f      	ldr	r3, [pc, #188]	; (402c94 <ReadDigitalIn+0x4cc>)
  402bd8:	805a      	strh	r2, [r3, #2]
			
			gpio_set_pin_high(PIN_MUXSEL0_IDX);
  402bda:	2005      	movs	r0, #5
  402bdc:	4b2e      	ldr	r3, [pc, #184]	; (402c98 <ReadDigitalIn+0x4d0>)
  402bde:	4798      	blx	r3
			gpio_set_pin_low(PIN_MUXSEL1_IDX);
  402be0:	2006      	movs	r0, #6
  402be2:	4b2e      	ldr	r3, [pc, #184]	; (402c9c <ReadDigitalIn+0x4d4>)
  402be4:	4798      	blx	r3
			gpio_set_pin_high(PIN_MUXSEL2_IDX);
  402be6:	2024      	movs	r0, #36	; 0x24
  402be8:	4b2b      	ldr	r3, [pc, #172]	; (402c98 <ReadDigitalIn+0x4d0>)
  402bea:	4798      	blx	r3
			i++;
  402bec:	4b2c      	ldr	r3, [pc, #176]	; (402ca0 <ReadDigitalIn+0x4d8>)
  402bee:	781b      	ldrb	r3, [r3, #0]
  402bf0:	3301      	adds	r3, #1
  402bf2:	b2da      	uxtb	r2, r3
  402bf4:	4b2a      	ldr	r3, [pc, #168]	; (402ca0 <ReadDigitalIn+0x4d8>)
  402bf6:	701a      	strb	r2, [r3, #0]
			break;
  402bf8:	e143      	b.n	402e82 <ReadDigitalIn+0x6ba>
		case 5:
			if(gpio_pin_is_high(PIN_MUXOUT0_IDX))
  402bfa:	2019      	movs	r0, #25
  402bfc:	4b29      	ldr	r3, [pc, #164]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402bfe:	4798      	blx	r3
  402c00:	4603      	mov	r3, r0
  402c02:	2b00      	cmp	r3, #0
  402c04:	d007      	beq.n	402c16 <ReadDigitalIn+0x44e>
				SBI(mBusRegs[MBUS_REG_DI0],5);
  402c06:	4b23      	ldr	r3, [pc, #140]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c08:	881b      	ldrh	r3, [r3, #0]
  402c0a:	f043 0320 	orr.w	r3, r3, #32
  402c0e:	b29a      	uxth	r2, r3
  402c10:	4b20      	ldr	r3, [pc, #128]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c12:	801a      	strh	r2, [r3, #0]
  402c14:	e006      	b.n	402c24 <ReadDigitalIn+0x45c>
			else
				CBI(mBusRegs[MBUS_REG_DI0],5);
  402c16:	4b1f      	ldr	r3, [pc, #124]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c18:	881b      	ldrh	r3, [r3, #0]
  402c1a:	f023 0320 	bic.w	r3, r3, #32
  402c1e:	b29a      	uxth	r2, r3
  402c20:	4b1c      	ldr	r3, [pc, #112]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c22:	801a      	strh	r2, [r3, #0]

			if(gpio_pin_is_high(PIN_MUXOUT1_IDX))
  402c24:	201a      	movs	r0, #26
  402c26:	4b1f      	ldr	r3, [pc, #124]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402c28:	4798      	blx	r3
  402c2a:	4603      	mov	r3, r0
  402c2c:	2b00      	cmp	r3, #0
  402c2e:	d007      	beq.n	402c40 <ReadDigitalIn+0x478>
				SBI(mBusRegs[MBUS_REG_DI0],13);
  402c30:	4b18      	ldr	r3, [pc, #96]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c32:	881b      	ldrh	r3, [r3, #0]
  402c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402c38:	b29a      	uxth	r2, r3
  402c3a:	4b16      	ldr	r3, [pc, #88]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c3c:	801a      	strh	r2, [r3, #0]
  402c3e:	e006      	b.n	402c4e <ReadDigitalIn+0x486>
			else
				CBI(mBusRegs[MBUS_REG_DI0],13);
  402c40:	4b14      	ldr	r3, [pc, #80]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c42:	881b      	ldrh	r3, [r3, #0]
  402c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402c48:	b29a      	uxth	r2, r3
  402c4a:	4b12      	ldr	r3, [pc, #72]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c4c:	801a      	strh	r2, [r3, #0]
			
			if(gpio_pin_is_high(PIN_MUXOUT2_IDX))
  402c4e:	200c      	movs	r0, #12
  402c50:	4b14      	ldr	r3, [pc, #80]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402c52:	4798      	blx	r3
  402c54:	4603      	mov	r3, r0
  402c56:	2b00      	cmp	r3, #0
  402c58:	d007      	beq.n	402c6a <ReadDigitalIn+0x4a2>
				SBI(mBusRegs[MBUS_REG_DI1],5);
  402c5a:	4b0e      	ldr	r3, [pc, #56]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c5c:	885b      	ldrh	r3, [r3, #2]
  402c5e:	f043 0320 	orr.w	r3, r3, #32
  402c62:	b29a      	uxth	r2, r3
  402c64:	4b0b      	ldr	r3, [pc, #44]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c66:	805a      	strh	r2, [r3, #2]
  402c68:	e006      	b.n	402c78 <ReadDigitalIn+0x4b0>
			else
				CBI(mBusRegs[MBUS_REG_DI1],5);
  402c6a:	4b0a      	ldr	r3, [pc, #40]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c6c:	885b      	ldrh	r3, [r3, #2]
  402c6e:	f023 0320 	bic.w	r3, r3, #32
  402c72:	b29a      	uxth	r2, r3
  402c74:	4b07      	ldr	r3, [pc, #28]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c76:	805a      	strh	r2, [r3, #2]

			if(gpio_pin_is_high(PIN_MUXOUT3_IDX))
  402c78:	200b      	movs	r0, #11
  402c7a:	4b0a      	ldr	r3, [pc, #40]	; (402ca4 <ReadDigitalIn+0x4dc>)
  402c7c:	4798      	blx	r3
  402c7e:	4603      	mov	r3, r0
  402c80:	2b00      	cmp	r3, #0
  402c82:	d011      	beq.n	402ca8 <ReadDigitalIn+0x4e0>
				SBI(mBusRegs[MBUS_REG_DI1],13);
  402c84:	4b03      	ldr	r3, [pc, #12]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c86:	885b      	ldrh	r3, [r3, #2]
  402c88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402c8c:	b29a      	uxth	r2, r3
  402c8e:	4b01      	ldr	r3, [pc, #4]	; (402c94 <ReadDigitalIn+0x4cc>)
  402c90:	805a      	strh	r2, [r3, #2]
  402c92:	e010      	b.n	402cb6 <ReadDigitalIn+0x4ee>
  402c94:	20000458 	.word	0x20000458
  402c98:	0040182d 	.word	0x0040182d
  402c9c:	0040185d 	.word	0x0040185d
  402ca0:	200004e7 	.word	0x200004e7
  402ca4:	004017fd 	.word	0x004017fd
			else
				CBI(mBusRegs[MBUS_REG_DI1],13);
  402ca8:	4b77      	ldr	r3, [pc, #476]	; (402e88 <ReadDigitalIn+0x6c0>)
  402caa:	885b      	ldrh	r3, [r3, #2]
  402cac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402cb0:	b29a      	uxth	r2, r3
  402cb2:	4b75      	ldr	r3, [pc, #468]	; (402e88 <ReadDigitalIn+0x6c0>)
  402cb4:	805a      	strh	r2, [r3, #2]
			
			gpio_set_pin_low(PIN_MUXSEL0_IDX);
  402cb6:	2005      	movs	r0, #5
  402cb8:	4b74      	ldr	r3, [pc, #464]	; (402e8c <ReadDigitalIn+0x6c4>)
  402cba:	4798      	blx	r3
			gpio_set_pin_high(PIN_MUXSEL1_IDX);
  402cbc:	2006      	movs	r0, #6
  402cbe:	4b74      	ldr	r3, [pc, #464]	; (402e90 <ReadDigitalIn+0x6c8>)
  402cc0:	4798      	blx	r3
			gpio_set_pin_high(PIN_MUXSEL2_IDX);
  402cc2:	2024      	movs	r0, #36	; 0x24
  402cc4:	4b72      	ldr	r3, [pc, #456]	; (402e90 <ReadDigitalIn+0x6c8>)
  402cc6:	4798      	blx	r3
			i++;
  402cc8:	4b72      	ldr	r3, [pc, #456]	; (402e94 <ReadDigitalIn+0x6cc>)
  402cca:	781b      	ldrb	r3, [r3, #0]
  402ccc:	3301      	adds	r3, #1
  402cce:	b2da      	uxtb	r2, r3
  402cd0:	4b70      	ldr	r3, [pc, #448]	; (402e94 <ReadDigitalIn+0x6cc>)
  402cd2:	701a      	strb	r2, [r3, #0]
			break;
  402cd4:	e0d5      	b.n	402e82 <ReadDigitalIn+0x6ba>
		case 6:
			if(gpio_pin_is_high(PIN_MUXOUT0_IDX))
  402cd6:	2019      	movs	r0, #25
  402cd8:	4b6f      	ldr	r3, [pc, #444]	; (402e98 <ReadDigitalIn+0x6d0>)
  402cda:	4798      	blx	r3
  402cdc:	4603      	mov	r3, r0
  402cde:	2b00      	cmp	r3, #0
  402ce0:	d007      	beq.n	402cf2 <ReadDigitalIn+0x52a>
				SBI(mBusRegs[MBUS_REG_DI0],6);
  402ce2:	4b69      	ldr	r3, [pc, #420]	; (402e88 <ReadDigitalIn+0x6c0>)
  402ce4:	881b      	ldrh	r3, [r3, #0]
  402ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402cea:	b29a      	uxth	r2, r3
  402cec:	4b66      	ldr	r3, [pc, #408]	; (402e88 <ReadDigitalIn+0x6c0>)
  402cee:	801a      	strh	r2, [r3, #0]
  402cf0:	e006      	b.n	402d00 <ReadDigitalIn+0x538>
			else
				CBI(mBusRegs[MBUS_REG_DI0],6);
  402cf2:	4b65      	ldr	r3, [pc, #404]	; (402e88 <ReadDigitalIn+0x6c0>)
  402cf4:	881b      	ldrh	r3, [r3, #0]
  402cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  402cfa:	b29a      	uxth	r2, r3
  402cfc:	4b62      	ldr	r3, [pc, #392]	; (402e88 <ReadDigitalIn+0x6c0>)
  402cfe:	801a      	strh	r2, [r3, #0]

			if(gpio_pin_is_high(PIN_MUXOUT1_IDX))
  402d00:	201a      	movs	r0, #26
  402d02:	4b65      	ldr	r3, [pc, #404]	; (402e98 <ReadDigitalIn+0x6d0>)
  402d04:	4798      	blx	r3
  402d06:	4603      	mov	r3, r0
  402d08:	2b00      	cmp	r3, #0
  402d0a:	d007      	beq.n	402d1c <ReadDigitalIn+0x554>
				SBI(mBusRegs[MBUS_REG_DI0],14);
  402d0c:	4b5e      	ldr	r3, [pc, #376]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d0e:	881b      	ldrh	r3, [r3, #0]
  402d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  402d14:	b29a      	uxth	r2, r3
  402d16:	4b5c      	ldr	r3, [pc, #368]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d18:	801a      	strh	r2, [r3, #0]
  402d1a:	e006      	b.n	402d2a <ReadDigitalIn+0x562>
			else
				CBI(mBusRegs[MBUS_REG_DI0],14);
  402d1c:	4b5a      	ldr	r3, [pc, #360]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d1e:	881b      	ldrh	r3, [r3, #0]
  402d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  402d24:	b29a      	uxth	r2, r3
  402d26:	4b58      	ldr	r3, [pc, #352]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d28:	801a      	strh	r2, [r3, #0]
			
			if(gpio_pin_is_high(PIN_MUXOUT2_IDX))
  402d2a:	200c      	movs	r0, #12
  402d2c:	4b5a      	ldr	r3, [pc, #360]	; (402e98 <ReadDigitalIn+0x6d0>)
  402d2e:	4798      	blx	r3
  402d30:	4603      	mov	r3, r0
  402d32:	2b00      	cmp	r3, #0
  402d34:	d007      	beq.n	402d46 <ReadDigitalIn+0x57e>
				SBI(mBusRegs[MBUS_REG_DI1],6);
  402d36:	4b54      	ldr	r3, [pc, #336]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d38:	885b      	ldrh	r3, [r3, #2]
  402d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402d3e:	b29a      	uxth	r2, r3
  402d40:	4b51      	ldr	r3, [pc, #324]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d42:	805a      	strh	r2, [r3, #2]
  402d44:	e006      	b.n	402d54 <ReadDigitalIn+0x58c>
			else
				CBI(mBusRegs[MBUS_REG_DI1],6);
  402d46:	4b50      	ldr	r3, [pc, #320]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d48:	885b      	ldrh	r3, [r3, #2]
  402d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  402d4e:	b29a      	uxth	r2, r3
  402d50:	4b4d      	ldr	r3, [pc, #308]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d52:	805a      	strh	r2, [r3, #2]

			if(gpio_pin_is_high(PIN_MUXOUT3_IDX))
  402d54:	200b      	movs	r0, #11
  402d56:	4b50      	ldr	r3, [pc, #320]	; (402e98 <ReadDigitalIn+0x6d0>)
  402d58:	4798      	blx	r3
  402d5a:	4603      	mov	r3, r0
  402d5c:	2b00      	cmp	r3, #0
  402d5e:	d007      	beq.n	402d70 <ReadDigitalIn+0x5a8>
				SBI(mBusRegs[MBUS_REG_DI1],14);
  402d60:	4b49      	ldr	r3, [pc, #292]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d62:	885b      	ldrh	r3, [r3, #2]
  402d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  402d68:	b29a      	uxth	r2, r3
  402d6a:	4b47      	ldr	r3, [pc, #284]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d6c:	805a      	strh	r2, [r3, #2]
  402d6e:	e006      	b.n	402d7e <ReadDigitalIn+0x5b6>
			else
				CBI(mBusRegs[MBUS_REG_DI1],14);
  402d70:	4b45      	ldr	r3, [pc, #276]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d72:	885b      	ldrh	r3, [r3, #2]
  402d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  402d78:	b29a      	uxth	r2, r3
  402d7a:	4b43      	ldr	r3, [pc, #268]	; (402e88 <ReadDigitalIn+0x6c0>)
  402d7c:	805a      	strh	r2, [r3, #2]

			gpio_set_pin_high(PIN_MUXSEL0_IDX);
  402d7e:	2005      	movs	r0, #5
  402d80:	4b43      	ldr	r3, [pc, #268]	; (402e90 <ReadDigitalIn+0x6c8>)
  402d82:	4798      	blx	r3
			gpio_set_pin_high(PIN_MUXSEL1_IDX);
  402d84:	2006      	movs	r0, #6
  402d86:	4b42      	ldr	r3, [pc, #264]	; (402e90 <ReadDigitalIn+0x6c8>)
  402d88:	4798      	blx	r3
			gpio_set_pin_high(PIN_MUXSEL2_IDX);
  402d8a:	2024      	movs	r0, #36	; 0x24
  402d8c:	4b40      	ldr	r3, [pc, #256]	; (402e90 <ReadDigitalIn+0x6c8>)
  402d8e:	4798      	blx	r3
			i++;
  402d90:	4b40      	ldr	r3, [pc, #256]	; (402e94 <ReadDigitalIn+0x6cc>)
  402d92:	781b      	ldrb	r3, [r3, #0]
  402d94:	3301      	adds	r3, #1
  402d96:	b2da      	uxtb	r2, r3
  402d98:	4b3e      	ldr	r3, [pc, #248]	; (402e94 <ReadDigitalIn+0x6cc>)
  402d9a:	701a      	strb	r2, [r3, #0]
			break;
  402d9c:	e071      	b.n	402e82 <ReadDigitalIn+0x6ba>
		case 7:
			if(gpio_pin_is_high(PIN_MUXOUT0_IDX))
  402d9e:	2019      	movs	r0, #25
  402da0:	4b3d      	ldr	r3, [pc, #244]	; (402e98 <ReadDigitalIn+0x6d0>)
  402da2:	4798      	blx	r3
  402da4:	4603      	mov	r3, r0
  402da6:	2b00      	cmp	r3, #0
  402da8:	d007      	beq.n	402dba <ReadDigitalIn+0x5f2>
				SBI(mBusRegs[MBUS_REG_DI0],7);
  402daa:	4b37      	ldr	r3, [pc, #220]	; (402e88 <ReadDigitalIn+0x6c0>)
  402dac:	881b      	ldrh	r3, [r3, #0]
  402dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402db2:	b29a      	uxth	r2, r3
  402db4:	4b34      	ldr	r3, [pc, #208]	; (402e88 <ReadDigitalIn+0x6c0>)
  402db6:	801a      	strh	r2, [r3, #0]
  402db8:	e006      	b.n	402dc8 <ReadDigitalIn+0x600>
			else
				CBI(mBusRegs[MBUS_REG_DI0],7);
  402dba:	4b33      	ldr	r3, [pc, #204]	; (402e88 <ReadDigitalIn+0x6c0>)
  402dbc:	881b      	ldrh	r3, [r3, #0]
  402dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402dc2:	b29a      	uxth	r2, r3
  402dc4:	4b30      	ldr	r3, [pc, #192]	; (402e88 <ReadDigitalIn+0x6c0>)
  402dc6:	801a      	strh	r2, [r3, #0]

			if(gpio_pin_is_high(PIN_MUXOUT1_IDX))
  402dc8:	201a      	movs	r0, #26
  402dca:	4b33      	ldr	r3, [pc, #204]	; (402e98 <ReadDigitalIn+0x6d0>)
  402dcc:	4798      	blx	r3
  402dce:	4603      	mov	r3, r0
  402dd0:	2b00      	cmp	r3, #0
  402dd2:	d009      	beq.n	402de8 <ReadDigitalIn+0x620>
				SBI(mBusRegs[MBUS_REG_DI0],15);
  402dd4:	4b2c      	ldr	r3, [pc, #176]	; (402e88 <ReadDigitalIn+0x6c0>)
  402dd6:	881b      	ldrh	r3, [r3, #0]
  402dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
  402ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
  402de0:	b29a      	uxth	r2, r3
  402de2:	4b29      	ldr	r3, [pc, #164]	; (402e88 <ReadDigitalIn+0x6c0>)
  402de4:	801a      	strh	r2, [r3, #0]
  402de6:	e006      	b.n	402df6 <ReadDigitalIn+0x62e>
			else
				CBI(mBusRegs[MBUS_REG_DI0],15);
  402de8:	4b27      	ldr	r3, [pc, #156]	; (402e88 <ReadDigitalIn+0x6c0>)
  402dea:	881b      	ldrh	r3, [r3, #0]
  402dec:	f3c3 030e 	ubfx	r3, r3, #0, #15
  402df0:	b29a      	uxth	r2, r3
  402df2:	4b25      	ldr	r3, [pc, #148]	; (402e88 <ReadDigitalIn+0x6c0>)
  402df4:	801a      	strh	r2, [r3, #0]
			
			if(gpio_pin_is_high(PIN_MUXOUT2_IDX))
  402df6:	200c      	movs	r0, #12
  402df8:	4b27      	ldr	r3, [pc, #156]	; (402e98 <ReadDigitalIn+0x6d0>)
  402dfa:	4798      	blx	r3
  402dfc:	4603      	mov	r3, r0
  402dfe:	2b00      	cmp	r3, #0
  402e00:	d007      	beq.n	402e12 <ReadDigitalIn+0x64a>
				SBI(mBusRegs[MBUS_REG_DI1],7);
  402e02:	4b21      	ldr	r3, [pc, #132]	; (402e88 <ReadDigitalIn+0x6c0>)
  402e04:	885b      	ldrh	r3, [r3, #2]
  402e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402e0a:	b29a      	uxth	r2, r3
  402e0c:	4b1e      	ldr	r3, [pc, #120]	; (402e88 <ReadDigitalIn+0x6c0>)
  402e0e:	805a      	strh	r2, [r3, #2]
  402e10:	e006      	b.n	402e20 <ReadDigitalIn+0x658>
			else
				CBI(mBusRegs[MBUS_REG_DI1],7);
  402e12:	4b1d      	ldr	r3, [pc, #116]	; (402e88 <ReadDigitalIn+0x6c0>)
  402e14:	885b      	ldrh	r3, [r3, #2]
  402e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402e1a:	b29a      	uxth	r2, r3
  402e1c:	4b1a      	ldr	r3, [pc, #104]	; (402e88 <ReadDigitalIn+0x6c0>)
  402e1e:	805a      	strh	r2, [r3, #2]

			if(gpio_pin_is_high(PIN_MUXOUT3_IDX))
  402e20:	200b      	movs	r0, #11
  402e22:	4b1d      	ldr	r3, [pc, #116]	; (402e98 <ReadDigitalIn+0x6d0>)
  402e24:	4798      	blx	r3
  402e26:	4603      	mov	r3, r0
  402e28:	2b00      	cmp	r3, #0
  402e2a:	d009      	beq.n	402e40 <ReadDigitalIn+0x678>
				SBI(mBusRegs[MBUS_REG_DI1],15);
  402e2c:	4b16      	ldr	r3, [pc, #88]	; (402e88 <ReadDigitalIn+0x6c0>)
  402e2e:	885b      	ldrh	r3, [r3, #2]
  402e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
  402e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
  402e38:	b29a      	uxth	r2, r3
  402e3a:	4b13      	ldr	r3, [pc, #76]	; (402e88 <ReadDigitalIn+0x6c0>)
  402e3c:	805a      	strh	r2, [r3, #2]
  402e3e:	e006      	b.n	402e4e <ReadDigitalIn+0x686>
			else
				CBI(mBusRegs[MBUS_REG_DI1],15);
  402e40:	4b11      	ldr	r3, [pc, #68]	; (402e88 <ReadDigitalIn+0x6c0>)
  402e42:	885b      	ldrh	r3, [r3, #2]
  402e44:	f3c3 030e 	ubfx	r3, r3, #0, #15
  402e48:	b29a      	uxth	r2, r3
  402e4a:	4b0f      	ldr	r3, [pc, #60]	; (402e88 <ReadDigitalIn+0x6c0>)
  402e4c:	805a      	strh	r2, [r3, #2]
			
			i = 0;
  402e4e:	4b11      	ldr	r3, [pc, #68]	; (402e94 <ReadDigitalIn+0x6cc>)
  402e50:	2200      	movs	r2, #0
  402e52:	701a      	strb	r2, [r3, #0]
			gpio_set_pin_low(PIN_MUXSEL0_IDX);
  402e54:	2005      	movs	r0, #5
  402e56:	4b0d      	ldr	r3, [pc, #52]	; (402e8c <ReadDigitalIn+0x6c4>)
  402e58:	4798      	blx	r3
			gpio_set_pin_low(PIN_MUXSEL1_IDX);
  402e5a:	2006      	movs	r0, #6
  402e5c:	4b0b      	ldr	r3, [pc, #44]	; (402e8c <ReadDigitalIn+0x6c4>)
  402e5e:	4798      	blx	r3
			gpio_set_pin_low(PIN_MUXSEL2_IDX);
  402e60:	2024      	movs	r0, #36	; 0x24
  402e62:	4b0a      	ldr	r3, [pc, #40]	; (402e8c <ReadDigitalIn+0x6c4>)
  402e64:	4798      	blx	r3
			break;
  402e66:	e00c      	b.n	402e82 <ReadDigitalIn+0x6ba>
		default:
			i = 0;
  402e68:	4b0a      	ldr	r3, [pc, #40]	; (402e94 <ReadDigitalIn+0x6cc>)
  402e6a:	2200      	movs	r2, #0
  402e6c:	701a      	strb	r2, [r3, #0]
			gpio_set_pin_low(PIN_MUXSEL0_IDX);
  402e6e:	2005      	movs	r0, #5
  402e70:	4b06      	ldr	r3, [pc, #24]	; (402e8c <ReadDigitalIn+0x6c4>)
  402e72:	4798      	blx	r3
			gpio_set_pin_low(PIN_MUXSEL1_IDX);
  402e74:	2006      	movs	r0, #6
  402e76:	4b05      	ldr	r3, [pc, #20]	; (402e8c <ReadDigitalIn+0x6c4>)
  402e78:	4798      	blx	r3
			gpio_set_pin_low(PIN_MUXSEL2_IDX);
  402e7a:	2024      	movs	r0, #36	; 0x24
  402e7c:	4b03      	ldr	r3, [pc, #12]	; (402e8c <ReadDigitalIn+0x6c4>)
  402e7e:	4798      	blx	r3
			break;
  402e80:	bf00      	nop
	}
  402e82:	bf00      	nop
  402e84:	bd80      	pop	{r7, pc}
  402e86:	bf00      	nop
  402e88:	20000458 	.word	0x20000458
  402e8c:	0040185d 	.word	0x0040185d
  402e90:	0040182d 	.word	0x0040182d
  402e94:	200004e7 	.word	0x200004e7
  402e98:	004017fd 	.word	0x004017fd

00402e9c <__aeabi_uldivmod>:
  402e9c:	b953      	cbnz	r3, 402eb4 <__aeabi_uldivmod+0x18>
  402e9e:	b94a      	cbnz	r2, 402eb4 <__aeabi_uldivmod+0x18>
  402ea0:	2900      	cmp	r1, #0
  402ea2:	bf08      	it	eq
  402ea4:	2800      	cmpeq	r0, #0
  402ea6:	bf1c      	itt	ne
  402ea8:	f04f 31ff 	movne.w	r1, #4294967295
  402eac:	f04f 30ff 	movne.w	r0, #4294967295
  402eb0:	f000 b97e 	b.w	4031b0 <__aeabi_idiv0>
  402eb4:	f1ad 0c08 	sub.w	ip, sp, #8
  402eb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402ebc:	f000 f806 	bl	402ecc <__udivmoddi4>
  402ec0:	f8dd e004 	ldr.w	lr, [sp, #4]
  402ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402ec8:	b004      	add	sp, #16
  402eca:	4770      	bx	lr

00402ecc <__udivmoddi4>:
  402ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ed0:	468c      	mov	ip, r1
  402ed2:	460e      	mov	r6, r1
  402ed4:	4604      	mov	r4, r0
  402ed6:	9d08      	ldr	r5, [sp, #32]
  402ed8:	2b00      	cmp	r3, #0
  402eda:	d150      	bne.n	402f7e <__udivmoddi4+0xb2>
  402edc:	428a      	cmp	r2, r1
  402ede:	4617      	mov	r7, r2
  402ee0:	d96c      	bls.n	402fbc <__udivmoddi4+0xf0>
  402ee2:	fab2 fe82 	clz	lr, r2
  402ee6:	f1be 0f00 	cmp.w	lr, #0
  402eea:	d00b      	beq.n	402f04 <__udivmoddi4+0x38>
  402eec:	f1ce 0420 	rsb	r4, lr, #32
  402ef0:	fa20 f404 	lsr.w	r4, r0, r4
  402ef4:	fa01 f60e 	lsl.w	r6, r1, lr
  402ef8:	ea44 0c06 	orr.w	ip, r4, r6
  402efc:	fa02 f70e 	lsl.w	r7, r2, lr
  402f00:	fa00 f40e 	lsl.w	r4, r0, lr
  402f04:	ea4f 4917 	mov.w	r9, r7, lsr #16
  402f08:	0c22      	lsrs	r2, r4, #16
  402f0a:	fbbc f0f9 	udiv	r0, ip, r9
  402f0e:	fa1f f887 	uxth.w	r8, r7
  402f12:	fb09 c610 	mls	r6, r9, r0, ip
  402f16:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  402f1a:	fb00 f308 	mul.w	r3, r0, r8
  402f1e:	42b3      	cmp	r3, r6
  402f20:	d909      	bls.n	402f36 <__udivmoddi4+0x6a>
  402f22:	19f6      	adds	r6, r6, r7
  402f24:	f100 32ff 	add.w	r2, r0, #4294967295
  402f28:	f080 8122 	bcs.w	403170 <__udivmoddi4+0x2a4>
  402f2c:	42b3      	cmp	r3, r6
  402f2e:	f240 811f 	bls.w	403170 <__udivmoddi4+0x2a4>
  402f32:	3802      	subs	r0, #2
  402f34:	443e      	add	r6, r7
  402f36:	1af6      	subs	r6, r6, r3
  402f38:	b2a2      	uxth	r2, r4
  402f3a:	fbb6 f3f9 	udiv	r3, r6, r9
  402f3e:	fb09 6613 	mls	r6, r9, r3, r6
  402f42:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  402f46:	fb03 f808 	mul.w	r8, r3, r8
  402f4a:	45a0      	cmp	r8, r4
  402f4c:	d909      	bls.n	402f62 <__udivmoddi4+0x96>
  402f4e:	19e4      	adds	r4, r4, r7
  402f50:	f103 32ff 	add.w	r2, r3, #4294967295
  402f54:	f080 810a 	bcs.w	40316c <__udivmoddi4+0x2a0>
  402f58:	45a0      	cmp	r8, r4
  402f5a:	f240 8107 	bls.w	40316c <__udivmoddi4+0x2a0>
  402f5e:	3b02      	subs	r3, #2
  402f60:	443c      	add	r4, r7
  402f62:	ebc8 0404 	rsb	r4, r8, r4
  402f66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402f6a:	2100      	movs	r1, #0
  402f6c:	2d00      	cmp	r5, #0
  402f6e:	d062      	beq.n	403036 <__udivmoddi4+0x16a>
  402f70:	fa24 f40e 	lsr.w	r4, r4, lr
  402f74:	2300      	movs	r3, #0
  402f76:	602c      	str	r4, [r5, #0]
  402f78:	606b      	str	r3, [r5, #4]
  402f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f7e:	428b      	cmp	r3, r1
  402f80:	d907      	bls.n	402f92 <__udivmoddi4+0xc6>
  402f82:	2d00      	cmp	r5, #0
  402f84:	d055      	beq.n	403032 <__udivmoddi4+0x166>
  402f86:	2100      	movs	r1, #0
  402f88:	e885 0041 	stmia.w	r5, {r0, r6}
  402f8c:	4608      	mov	r0, r1
  402f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f92:	fab3 f183 	clz	r1, r3
  402f96:	2900      	cmp	r1, #0
  402f98:	f040 8090 	bne.w	4030bc <__udivmoddi4+0x1f0>
  402f9c:	42b3      	cmp	r3, r6
  402f9e:	d302      	bcc.n	402fa6 <__udivmoddi4+0xda>
  402fa0:	4282      	cmp	r2, r0
  402fa2:	f200 80f8 	bhi.w	403196 <__udivmoddi4+0x2ca>
  402fa6:	1a84      	subs	r4, r0, r2
  402fa8:	eb66 0603 	sbc.w	r6, r6, r3
  402fac:	2001      	movs	r0, #1
  402fae:	46b4      	mov	ip, r6
  402fb0:	2d00      	cmp	r5, #0
  402fb2:	d040      	beq.n	403036 <__udivmoddi4+0x16a>
  402fb4:	e885 1010 	stmia.w	r5, {r4, ip}
  402fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402fbc:	b912      	cbnz	r2, 402fc4 <__udivmoddi4+0xf8>
  402fbe:	2701      	movs	r7, #1
  402fc0:	fbb7 f7f2 	udiv	r7, r7, r2
  402fc4:	fab7 fe87 	clz	lr, r7
  402fc8:	f1be 0f00 	cmp.w	lr, #0
  402fcc:	d135      	bne.n	40303a <__udivmoddi4+0x16e>
  402fce:	1bf3      	subs	r3, r6, r7
  402fd0:	ea4f 4817 	mov.w	r8, r7, lsr #16
  402fd4:	fa1f fc87 	uxth.w	ip, r7
  402fd8:	2101      	movs	r1, #1
  402fda:	fbb3 f0f8 	udiv	r0, r3, r8
  402fde:	0c22      	lsrs	r2, r4, #16
  402fe0:	fb08 3610 	mls	r6, r8, r0, r3
  402fe4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  402fe8:	fb0c f300 	mul.w	r3, ip, r0
  402fec:	42b3      	cmp	r3, r6
  402fee:	d907      	bls.n	403000 <__udivmoddi4+0x134>
  402ff0:	19f6      	adds	r6, r6, r7
  402ff2:	f100 32ff 	add.w	r2, r0, #4294967295
  402ff6:	d202      	bcs.n	402ffe <__udivmoddi4+0x132>
  402ff8:	42b3      	cmp	r3, r6
  402ffa:	f200 80ce 	bhi.w	40319a <__udivmoddi4+0x2ce>
  402ffe:	4610      	mov	r0, r2
  403000:	1af6      	subs	r6, r6, r3
  403002:	b2a2      	uxth	r2, r4
  403004:	fbb6 f3f8 	udiv	r3, r6, r8
  403008:	fb08 6613 	mls	r6, r8, r3, r6
  40300c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403010:	fb0c fc03 	mul.w	ip, ip, r3
  403014:	45a4      	cmp	ip, r4
  403016:	d907      	bls.n	403028 <__udivmoddi4+0x15c>
  403018:	19e4      	adds	r4, r4, r7
  40301a:	f103 32ff 	add.w	r2, r3, #4294967295
  40301e:	d202      	bcs.n	403026 <__udivmoddi4+0x15a>
  403020:	45a4      	cmp	ip, r4
  403022:	f200 80b5 	bhi.w	403190 <__udivmoddi4+0x2c4>
  403026:	4613      	mov	r3, r2
  403028:	ebcc 0404 	rsb	r4, ip, r4
  40302c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403030:	e79c      	b.n	402f6c <__udivmoddi4+0xa0>
  403032:	4629      	mov	r1, r5
  403034:	4628      	mov	r0, r5
  403036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40303a:	f1ce 0120 	rsb	r1, lr, #32
  40303e:	fa06 f30e 	lsl.w	r3, r6, lr
  403042:	fa07 f70e 	lsl.w	r7, r7, lr
  403046:	fa20 f901 	lsr.w	r9, r0, r1
  40304a:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40304e:	40ce      	lsrs	r6, r1
  403050:	ea49 0903 	orr.w	r9, r9, r3
  403054:	fbb6 faf8 	udiv	sl, r6, r8
  403058:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40305c:	fb08 661a 	mls	r6, r8, sl, r6
  403060:	fa1f fc87 	uxth.w	ip, r7
  403064:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  403068:	fb0a f20c 	mul.w	r2, sl, ip
  40306c:	429a      	cmp	r2, r3
  40306e:	fa00 f40e 	lsl.w	r4, r0, lr
  403072:	d90a      	bls.n	40308a <__udivmoddi4+0x1be>
  403074:	19db      	adds	r3, r3, r7
  403076:	f10a 31ff 	add.w	r1, sl, #4294967295
  40307a:	f080 8087 	bcs.w	40318c <__udivmoddi4+0x2c0>
  40307e:	429a      	cmp	r2, r3
  403080:	f240 8084 	bls.w	40318c <__udivmoddi4+0x2c0>
  403084:	f1aa 0a02 	sub.w	sl, sl, #2
  403088:	443b      	add	r3, r7
  40308a:	1a9b      	subs	r3, r3, r2
  40308c:	fa1f f989 	uxth.w	r9, r9
  403090:	fbb3 f1f8 	udiv	r1, r3, r8
  403094:	fb08 3311 	mls	r3, r8, r1, r3
  403098:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40309c:	fb01 f60c 	mul.w	r6, r1, ip
  4030a0:	429e      	cmp	r6, r3
  4030a2:	d907      	bls.n	4030b4 <__udivmoddi4+0x1e8>
  4030a4:	19db      	adds	r3, r3, r7
  4030a6:	f101 32ff 	add.w	r2, r1, #4294967295
  4030aa:	d26b      	bcs.n	403184 <__udivmoddi4+0x2b8>
  4030ac:	429e      	cmp	r6, r3
  4030ae:	d969      	bls.n	403184 <__udivmoddi4+0x2b8>
  4030b0:	3902      	subs	r1, #2
  4030b2:	443b      	add	r3, r7
  4030b4:	1b9b      	subs	r3, r3, r6
  4030b6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  4030ba:	e78e      	b.n	402fda <__udivmoddi4+0x10e>
  4030bc:	f1c1 0e20 	rsb	lr, r1, #32
  4030c0:	fa22 f40e 	lsr.w	r4, r2, lr
  4030c4:	408b      	lsls	r3, r1
  4030c6:	4323      	orrs	r3, r4
  4030c8:	fa20 f70e 	lsr.w	r7, r0, lr
  4030cc:	fa06 f401 	lsl.w	r4, r6, r1
  4030d0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4030d4:	fa26 f60e 	lsr.w	r6, r6, lr
  4030d8:	433c      	orrs	r4, r7
  4030da:	fbb6 f9fc 	udiv	r9, r6, ip
  4030de:	0c27      	lsrs	r7, r4, #16
  4030e0:	fb0c 6619 	mls	r6, ip, r9, r6
  4030e4:	fa1f f883 	uxth.w	r8, r3
  4030e8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4030ec:	fb09 f708 	mul.w	r7, r9, r8
  4030f0:	42b7      	cmp	r7, r6
  4030f2:	fa02 f201 	lsl.w	r2, r2, r1
  4030f6:	fa00 fa01 	lsl.w	sl, r0, r1
  4030fa:	d908      	bls.n	40310e <__udivmoddi4+0x242>
  4030fc:	18f6      	adds	r6, r6, r3
  4030fe:	f109 30ff 	add.w	r0, r9, #4294967295
  403102:	d241      	bcs.n	403188 <__udivmoddi4+0x2bc>
  403104:	42b7      	cmp	r7, r6
  403106:	d93f      	bls.n	403188 <__udivmoddi4+0x2bc>
  403108:	f1a9 0902 	sub.w	r9, r9, #2
  40310c:	441e      	add	r6, r3
  40310e:	1bf6      	subs	r6, r6, r7
  403110:	b2a0      	uxth	r0, r4
  403112:	fbb6 f4fc 	udiv	r4, r6, ip
  403116:	fb0c 6614 	mls	r6, ip, r4, r6
  40311a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40311e:	fb04 f808 	mul.w	r8, r4, r8
  403122:	45b8      	cmp	r8, r7
  403124:	d907      	bls.n	403136 <__udivmoddi4+0x26a>
  403126:	18ff      	adds	r7, r7, r3
  403128:	f104 30ff 	add.w	r0, r4, #4294967295
  40312c:	d228      	bcs.n	403180 <__udivmoddi4+0x2b4>
  40312e:	45b8      	cmp	r8, r7
  403130:	d926      	bls.n	403180 <__udivmoddi4+0x2b4>
  403132:	3c02      	subs	r4, #2
  403134:	441f      	add	r7, r3
  403136:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40313a:	ebc8 0707 	rsb	r7, r8, r7
  40313e:	fba0 8902 	umull	r8, r9, r0, r2
  403142:	454f      	cmp	r7, r9
  403144:	4644      	mov	r4, r8
  403146:	464e      	mov	r6, r9
  403148:	d314      	bcc.n	403174 <__udivmoddi4+0x2a8>
  40314a:	d029      	beq.n	4031a0 <__udivmoddi4+0x2d4>
  40314c:	b365      	cbz	r5, 4031a8 <__udivmoddi4+0x2dc>
  40314e:	ebba 0304 	subs.w	r3, sl, r4
  403152:	eb67 0706 	sbc.w	r7, r7, r6
  403156:	fa07 fe0e 	lsl.w	lr, r7, lr
  40315a:	40cb      	lsrs	r3, r1
  40315c:	40cf      	lsrs	r7, r1
  40315e:	ea4e 0303 	orr.w	r3, lr, r3
  403162:	e885 0088 	stmia.w	r5, {r3, r7}
  403166:	2100      	movs	r1, #0
  403168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40316c:	4613      	mov	r3, r2
  40316e:	e6f8      	b.n	402f62 <__udivmoddi4+0x96>
  403170:	4610      	mov	r0, r2
  403172:	e6e0      	b.n	402f36 <__udivmoddi4+0x6a>
  403174:	ebb8 0402 	subs.w	r4, r8, r2
  403178:	eb69 0603 	sbc.w	r6, r9, r3
  40317c:	3801      	subs	r0, #1
  40317e:	e7e5      	b.n	40314c <__udivmoddi4+0x280>
  403180:	4604      	mov	r4, r0
  403182:	e7d8      	b.n	403136 <__udivmoddi4+0x26a>
  403184:	4611      	mov	r1, r2
  403186:	e795      	b.n	4030b4 <__udivmoddi4+0x1e8>
  403188:	4681      	mov	r9, r0
  40318a:	e7c0      	b.n	40310e <__udivmoddi4+0x242>
  40318c:	468a      	mov	sl, r1
  40318e:	e77c      	b.n	40308a <__udivmoddi4+0x1be>
  403190:	3b02      	subs	r3, #2
  403192:	443c      	add	r4, r7
  403194:	e748      	b.n	403028 <__udivmoddi4+0x15c>
  403196:	4608      	mov	r0, r1
  403198:	e70a      	b.n	402fb0 <__udivmoddi4+0xe4>
  40319a:	3802      	subs	r0, #2
  40319c:	443e      	add	r6, r7
  40319e:	e72f      	b.n	403000 <__udivmoddi4+0x134>
  4031a0:	45c2      	cmp	sl, r8
  4031a2:	d3e7      	bcc.n	403174 <__udivmoddi4+0x2a8>
  4031a4:	463e      	mov	r6, r7
  4031a6:	e7d1      	b.n	40314c <__udivmoddi4+0x280>
  4031a8:	4629      	mov	r1, r5
  4031aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4031ae:	bf00      	nop

004031b0 <__aeabi_idiv0>:
  4031b0:	4770      	bx	lr
  4031b2:	bf00      	nop

004031b4 <__libc_init_array>:
  4031b4:	b570      	push	{r4, r5, r6, lr}
  4031b6:	4e0f      	ldr	r6, [pc, #60]	; (4031f4 <__libc_init_array+0x40>)
  4031b8:	4d0f      	ldr	r5, [pc, #60]	; (4031f8 <__libc_init_array+0x44>)
  4031ba:	1b76      	subs	r6, r6, r5
  4031bc:	10b6      	asrs	r6, r6, #2
  4031be:	bf18      	it	ne
  4031c0:	2400      	movne	r4, #0
  4031c2:	d005      	beq.n	4031d0 <__libc_init_array+0x1c>
  4031c4:	3401      	adds	r4, #1
  4031c6:	f855 3b04 	ldr.w	r3, [r5], #4
  4031ca:	4798      	blx	r3
  4031cc:	42a6      	cmp	r6, r4
  4031ce:	d1f9      	bne.n	4031c4 <__libc_init_array+0x10>
  4031d0:	4e0a      	ldr	r6, [pc, #40]	; (4031fc <__libc_init_array+0x48>)
  4031d2:	4d0b      	ldr	r5, [pc, #44]	; (403200 <__libc_init_array+0x4c>)
  4031d4:	1b76      	subs	r6, r6, r5
  4031d6:	f000 f89b 	bl	403310 <_init>
  4031da:	10b6      	asrs	r6, r6, #2
  4031dc:	bf18      	it	ne
  4031de:	2400      	movne	r4, #0
  4031e0:	d006      	beq.n	4031f0 <__libc_init_array+0x3c>
  4031e2:	3401      	adds	r4, #1
  4031e4:	f855 3b04 	ldr.w	r3, [r5], #4
  4031e8:	4798      	blx	r3
  4031ea:	42a6      	cmp	r6, r4
  4031ec:	d1f9      	bne.n	4031e2 <__libc_init_array+0x2e>
  4031ee:	bd70      	pop	{r4, r5, r6, pc}
  4031f0:	bd70      	pop	{r4, r5, r6, pc}
  4031f2:	bf00      	nop
  4031f4:	0040331c 	.word	0x0040331c
  4031f8:	0040331c 	.word	0x0040331c
  4031fc:	00403324 	.word	0x00403324
  403200:	0040331c 	.word	0x0040331c

00403204 <register_fini>:
  403204:	4b02      	ldr	r3, [pc, #8]	; (403210 <register_fini+0xc>)
  403206:	b113      	cbz	r3, 40320e <register_fini+0xa>
  403208:	4802      	ldr	r0, [pc, #8]	; (403214 <register_fini+0x10>)
  40320a:	f000 b805 	b.w	403218 <atexit>
  40320e:	4770      	bx	lr
  403210:	00000000 	.word	0x00000000
  403214:	00403225 	.word	0x00403225

00403218 <atexit>:
  403218:	2300      	movs	r3, #0
  40321a:	4601      	mov	r1, r0
  40321c:	461a      	mov	r2, r3
  40321e:	4618      	mov	r0, r3
  403220:	f000 b814 	b.w	40324c <__register_exitproc>

00403224 <__libc_fini_array>:
  403224:	b538      	push	{r3, r4, r5, lr}
  403226:	4d07      	ldr	r5, [pc, #28]	; (403244 <__libc_fini_array+0x20>)
  403228:	4c07      	ldr	r4, [pc, #28]	; (403248 <__libc_fini_array+0x24>)
  40322a:	1b2c      	subs	r4, r5, r4
  40322c:	10a4      	asrs	r4, r4, #2
  40322e:	d005      	beq.n	40323c <__libc_fini_array+0x18>
  403230:	3c01      	subs	r4, #1
  403232:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403236:	4798      	blx	r3
  403238:	2c00      	cmp	r4, #0
  40323a:	d1f9      	bne.n	403230 <__libc_fini_array+0xc>
  40323c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403240:	f000 b870 	b.w	403324 <_fini>
  403244:	00403334 	.word	0x00403334
  403248:	00403330 	.word	0x00403330

0040324c <__register_exitproc>:
  40324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403250:	4c25      	ldr	r4, [pc, #148]	; (4032e8 <__register_exitproc+0x9c>)
  403252:	6825      	ldr	r5, [r4, #0]
  403254:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403258:	4606      	mov	r6, r0
  40325a:	4688      	mov	r8, r1
  40325c:	4692      	mov	sl, r2
  40325e:	4699      	mov	r9, r3
  403260:	b3c4      	cbz	r4, 4032d4 <__register_exitproc+0x88>
  403262:	6860      	ldr	r0, [r4, #4]
  403264:	281f      	cmp	r0, #31
  403266:	dc17      	bgt.n	403298 <__register_exitproc+0x4c>
  403268:	1c43      	adds	r3, r0, #1
  40326a:	b176      	cbz	r6, 40328a <__register_exitproc+0x3e>
  40326c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403270:	2201      	movs	r2, #1
  403272:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403276:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40327a:	4082      	lsls	r2, r0
  40327c:	4311      	orrs	r1, r2
  40327e:	2e02      	cmp	r6, #2
  403280:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403284:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403288:	d01e      	beq.n	4032c8 <__register_exitproc+0x7c>
  40328a:	3002      	adds	r0, #2
  40328c:	6063      	str	r3, [r4, #4]
  40328e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403292:	2000      	movs	r0, #0
  403294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403298:	4b14      	ldr	r3, [pc, #80]	; (4032ec <__register_exitproc+0xa0>)
  40329a:	b303      	cbz	r3, 4032de <__register_exitproc+0x92>
  40329c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4032a0:	f3af 8000 	nop.w
  4032a4:	4604      	mov	r4, r0
  4032a6:	b1d0      	cbz	r0, 4032de <__register_exitproc+0x92>
  4032a8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4032ac:	2700      	movs	r7, #0
  4032ae:	e880 0088 	stmia.w	r0, {r3, r7}
  4032b2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4032b6:	4638      	mov	r0, r7
  4032b8:	2301      	movs	r3, #1
  4032ba:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4032be:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4032c2:	2e00      	cmp	r6, #0
  4032c4:	d0e1      	beq.n	40328a <__register_exitproc+0x3e>
  4032c6:	e7d1      	b.n	40326c <__register_exitproc+0x20>
  4032c8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4032cc:	430a      	orrs	r2, r1
  4032ce:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4032d2:	e7da      	b.n	40328a <__register_exitproc+0x3e>
  4032d4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4032d8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4032dc:	e7c1      	b.n	403262 <__register_exitproc+0x16>
  4032de:	f04f 30ff 	mov.w	r0, #4294967295
  4032e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4032e6:	bf00      	nop
  4032e8:	0040330c 	.word	0x0040330c
  4032ec:	00000000 	.word	0x00000000
  4032f0:	00002580 	.word	0x00002580
  4032f4:	000000c0 	.word	0x000000c0
  4032f8:	00000800 	.word	0x00000800
	...
  403308:	00000043 	.word	0x00000043

0040330c <_global_impure_ptr>:
  40330c:	20000010                                ... 

00403310 <_init>:
  403310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403312:	bf00      	nop
  403314:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403316:	bc08      	pop	{r3}
  403318:	469e      	mov	lr, r3
  40331a:	4770      	bx	lr

0040331c <__init_array_start>:
  40331c:	00403205 	.word	0x00403205

00403320 <__frame_dummy_init_array_entry>:
  403320:	004000f1                                ..@.

00403324 <_fini>:
  403324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403326:	bf00      	nop
  403328:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40332a:	bc08      	pop	{r3}
  40332c:	469e      	mov	lr, r3
  40332e:	4770      	bx	lr

00403330 <__fini_array_start>:
  403330:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
20000044:	3308 0040 0000 0000 0000 0000 0000 0000     .3@.............
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
