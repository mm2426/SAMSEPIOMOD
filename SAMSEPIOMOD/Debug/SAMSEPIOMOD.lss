
SAMSEPIOMOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b70  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  00400b70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a4  20000430  00400fa0  00020430  2**2
                  ALLOC
  3 .stack        00003004  200004d4  00401044  00020430  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007b5e  00000000  00000000  000204b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001515  00000000  00000000  00028011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003640  00000000  00000000  00029526  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007b8  00000000  00000000  0002cb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000708  00000000  00000000  0002d31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001200e  00000000  00000000  0002da26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008d00  00000000  00000000  0003fa34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004e64c  00000000  00000000  00048734  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001134  00000000  00000000  00096d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034d8 	.word	0x200034d8
  400004:	0040077d 	.word	0x0040077d
  400008:	00400779 	.word	0x00400779
  40000c:	00400779 	.word	0x00400779
  400010:	00400779 	.word	0x00400779
  400014:	00400779 	.word	0x00400779
  400018:	00400779 	.word	0x00400779
	...
  40002c:	00400779 	.word	0x00400779
  400030:	00400779 	.word	0x00400779
  400034:	00000000 	.word	0x00000000
  400038:	00400779 	.word	0x00400779
  40003c:	00400779 	.word	0x00400779
  400040:	00400779 	.word	0x00400779
  400044:	00400779 	.word	0x00400779
  400048:	00400779 	.word	0x00400779
  40004c:	00400779 	.word	0x00400779
  400050:	00400779 	.word	0x00400779
  400054:	00400779 	.word	0x00400779
  400058:	00400779 	.word	0x00400779
  40005c:	00400779 	.word	0x00400779
  400060:	00400779 	.word	0x00400779
  400064:	00400779 	.word	0x00400779
  400068:	00000000 	.word	0x00000000
  40006c:	004003ad 	.word	0x004003ad
  400070:	004003c1 	.word	0x004003c1
  400074:	004003d5 	.word	0x004003d5
  400078:	00400311 	.word	0x00400311
  40007c:	00400779 	.word	0x00400779
	...
  400088:	00400779 	.word	0x00400779
  40008c:	00400779 	.word	0x00400779
  400090:	00400779 	.word	0x00400779
  400094:	00400779 	.word	0x00400779
  400098:	00400779 	.word	0x00400779
  40009c:	00400779 	.word	0x00400779
  4000a0:	00400779 	.word	0x00400779
  4000a4:	00400779 	.word	0x00400779
  4000a8:	00400779 	.word	0x00400779
  4000ac:	00400779 	.word	0x00400779
  4000b0:	00400779 	.word	0x00400779
  4000b4:	00400779 	.word	0x00400779
  4000b8:	00400779 	.word	0x00400779
  4000bc:	00400779 	.word	0x00400779
  4000c0:	00400779 	.word	0x00400779
  4000c4:	00400779 	.word	0x00400779
  4000c8:	00400779 	.word	0x00400779

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000430 	.word	0x20000430
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400b70 	.word	0x00400b70

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000434 	.word	0x20000434
  40011c:	00400b70 	.word	0x00400b70
  400120:	00400b70 	.word	0x00400b70
  400124:	00000000 	.word	0x00000000

00400128 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400128:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40012a:	010c      	lsls	r4, r1, #4
  40012c:	4294      	cmp	r4, r2
  40012e:	d90f      	bls.n	400150 <usart_set_async_baudrate+0x28>
  400130:	e01a      	b.n	400168 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400132:	6841      	ldr	r1, [r0, #4]
  400134:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400138:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40013a:	0412      	lsls	r2, r2, #16
  40013c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400140:	431a      	orrs	r2, r3
  400142:	6202      	str	r2, [r0, #32]

	return 0;
  400144:	2000      	movs	r0, #0
  400146:	e01c      	b.n	400182 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  400148:	2001      	movs	r0, #1
  40014a:	e01a      	b.n	400182 <usart_set_async_baudrate+0x5a>
  40014c:	2001      	movs	r0, #1
  40014e:	e018      	b.n	400182 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400150:	0863      	lsrs	r3, r4, #1
  400152:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400156:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  40015a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40015c:	1e5c      	subs	r4, r3, #1
  40015e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400162:	428c      	cmp	r4, r1
  400164:	d9e9      	bls.n	40013a <usart_set_async_baudrate+0x12>
  400166:	e7ef      	b.n	400148 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400168:	00c9      	lsls	r1, r1, #3
  40016a:	084b      	lsrs	r3, r1, #1
  40016c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400170:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400174:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400176:	1e5c      	subs	r4, r3, #1
  400178:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40017c:	428c      	cmp	r4, r1
  40017e:	d8e5      	bhi.n	40014c <usart_set_async_baudrate+0x24>
  400180:	e7d7      	b.n	400132 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  400182:	bc10      	pop	{r4}
  400184:	4770      	bx	lr
  400186:	bf00      	nop

00400188 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400188:	4b0a      	ldr	r3, [pc, #40]	; (4001b4 <usart_reset+0x2c>)
  40018a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40018e:	2300      	movs	r3, #0
  400190:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400192:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400194:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400196:	2388      	movs	r3, #136	; 0x88
  400198:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40019a:	2324      	movs	r3, #36	; 0x24
  40019c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  40019e:	f44f 7380 	mov.w	r3, #256	; 0x100
  4001a2:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  4001a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4001a8:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
  4001aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4001ae:	6003      	str	r3, [r0, #0]
  4001b0:	4770      	bx	lr
  4001b2:	bf00      	nop
  4001b4:	55534100 	.word	0x55534100

004001b8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4001b8:	b570      	push	{r4, r5, r6, lr}
  4001ba:	4605      	mov	r5, r0
  4001bc:	460c      	mov	r4, r1
  4001be:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4001c0:	4b0f      	ldr	r3, [pc, #60]	; (400200 <usart_init_rs232+0x48>)
  4001c2:	4798      	blx	r3

	ul_reg_val = 0;
  4001c4:	2200      	movs	r2, #0
  4001c6:	4b0f      	ldr	r3, [pc, #60]	; (400204 <usart_init_rs232+0x4c>)
  4001c8:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4001ca:	b19c      	cbz	r4, 4001f4 <usart_init_rs232+0x3c>
  4001cc:	4632      	mov	r2, r6
  4001ce:	6821      	ldr	r1, [r4, #0]
  4001d0:	4628      	mov	r0, r5
  4001d2:	4b0d      	ldr	r3, [pc, #52]	; (400208 <usart_init_rs232+0x50>)
  4001d4:	4798      	blx	r3
  4001d6:	4602      	mov	r2, r0
  4001d8:	b970      	cbnz	r0, 4001f8 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4001da:	6861      	ldr	r1, [r4, #4]
  4001dc:	68a3      	ldr	r3, [r4, #8]
  4001de:	4319      	orrs	r1, r3
  4001e0:	6923      	ldr	r3, [r4, #16]
  4001e2:	4319      	orrs	r1, r3
  4001e4:	68e3      	ldr	r3, [r4, #12]
  4001e6:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4001e8:	4906      	ldr	r1, [pc, #24]	; (400204 <usart_init_rs232+0x4c>)
  4001ea:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4001ec:	6869      	ldr	r1, [r5, #4]
  4001ee:	430b      	orrs	r3, r1
  4001f0:	606b      	str	r3, [r5, #4]

	return 0;
  4001f2:	e002      	b.n	4001fa <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4001f4:	2201      	movs	r2, #1
  4001f6:	e000      	b.n	4001fa <usart_init_rs232+0x42>
  4001f8:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4001fa:	4610      	mov	r0, r2
  4001fc:	bd70      	pop	{r4, r5, r6, pc}
  4001fe:	bf00      	nop
  400200:	00400189 	.word	0x00400189
  400204:	2000044c 	.word	0x2000044c
  400208:	00400129 	.word	0x00400129

0040020c <usart_init_rs485>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40020c:	b510      	push	{r4, lr}
  40020e:	4604      	mov	r4, r0
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400210:	4b06      	ldr	r3, [pc, #24]	; (40022c <usart_init_rs485+0x20>)
  400212:	4798      	blx	r3
  400214:	b938      	cbnz	r0, 400226 <usart_init_rs485+0x1a>
  400216:	4602      	mov	r2, r0
		return 1;
	}

	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400218:	6863      	ldr	r3, [r4, #4]
  40021a:	f023 030f 	bic.w	r3, r3, #15
  40021e:	f043 0301 	orr.w	r3, r3, #1
  400222:	6063      	str	r3, [r4, #4]
			US_MR_USART_MODE_RS485;

	return 0;
  400224:	e000      	b.n	400228 <usart_init_rs485+0x1c>
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
		return 1;
  400226:	2201      	movs	r2, #1
	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
			US_MR_USART_MODE_RS485;

	return 0;
}
  400228:	4610      	mov	r0, r2
  40022a:	bd10      	pop	{r4, pc}
  40022c:	004001b9 	.word	0x004001b9

00400230 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  400230:	2340      	movs	r3, #64	; 0x40
  400232:	6003      	str	r3, [r0, #0]
  400234:	4770      	bx	lr
  400236:	bf00      	nop

00400238 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  400238:	2310      	movs	r3, #16
  40023a:	6003      	str	r3, [r0, #0]
  40023c:	4770      	bx	lr
  40023e:	bf00      	nop

00400240 <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
  400240:	6081      	str	r1, [r0, #8]
  400242:	4770      	bx	lr

00400244 <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
  400244:	60c1      	str	r1, [r0, #12]
  400246:	4770      	bx	lr

00400248 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  400248:	6940      	ldr	r0, [r0, #20]
}
  40024a:	4770      	bx	lr

0040024c <usart_get_pdc_base>:
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  40024c:	4b06      	ldr	r3, [pc, #24]	; (400268 <usart_get_pdc_base+0x1c>)
  40024e:	4298      	cmp	r0, r3
  400250:	d007      	beq.n	400262 <usart_get_pdc_base+0x16>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  400252:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
  400256:	4a05      	ldr	r2, [pc, #20]	; (40026c <usart_get_pdc_base+0x20>)
  400258:	4290      	cmp	r0, r2
  40025a:	bf0c      	ite	eq
  40025c:	4618      	moveq	r0, r3
  40025e:	2000      	movne	r0, #0
  400260:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
		p_pdc_base = PDC_USART0;
		return p_pdc_base;
  400262:	4803      	ldr	r0, [pc, #12]	; (400270 <usart_get_pdc_base+0x24>)
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
}
  400264:	4770      	bx	lr
  400266:	bf00      	nop
  400268:	40024000 	.word	0x40024000
  40026c:	40028000 	.word	0x40028000
  400270:	40024100 	.word	0x40024100

00400274 <InitRs485Pdc>:

 volatile uint8_t txDone = 1;
 volatile uint8_t rxDone = 1;

 void InitRs485Pdc(void)
 {
  400274:	b530      	push	{r4, r5, lr}
  400276:	b087      	sub	sp, #28
	 const sam_usart_opt_t usart_console_settings = {
  400278:	466c      	mov	r4, sp
  40027a:	4d18      	ldr	r5, [pc, #96]	; (4002dc <InitRs485Pdc+0x68>)
  40027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400280:	e895 0003 	ldmia.w	r5, {r0, r1}
  400284:	e884 0003 	stmia.w	r4, {r0, r1}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400288:	200e      	movs	r0, #14
  40028a:	4b15      	ldr	r3, [pc, #84]	; (4002e0 <InitRs485Pdc+0x6c>)
  40028c:	4798      	blx	r3

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(RS485_USART_ID);

	 /* Configure USART in RS485 mode. */
	 usart_init_rs485(RS485_USART, &usart_console_settings,
  40028e:	4c15      	ldr	r4, [pc, #84]	; (4002e4 <InitRs485Pdc+0x70>)
  400290:	4a15      	ldr	r2, [pc, #84]	; (4002e8 <InitRs485Pdc+0x74>)
  400292:	4669      	mov	r1, sp
  400294:	4620      	mov	r0, r4
  400296:	4b15      	ldr	r3, [pc, #84]	; (4002ec <InitRs485Pdc+0x78>)
  400298:	4798      	blx	r3
	 sysclk_get_peripheral_hz());

	 /* Disable all the interrupts. */
	 usart_disable_interrupt(RS485_USART, 0xFFFFFFFF);
  40029a:	f04f 31ff 	mov.w	r1, #4294967295
  40029e:	4620      	mov	r0, r4
  4002a0:	4b13      	ldr	r3, [pc, #76]	; (4002f0 <InitRs485Pdc+0x7c>)
  4002a2:	4798      	blx	r3

	 /* Enable TX & RX function. */
	 usart_enable_tx(RS485_USART);
  4002a4:	4620      	mov	r0, r4
  4002a6:	4b13      	ldr	r3, [pc, #76]	; (4002f4 <InitRs485Pdc+0x80>)
  4002a8:	4798      	blx	r3
	 usart_enable_rx(RS485_USART);
  4002aa:	4620      	mov	r0, r4
  4002ac:	4b12      	ldr	r3, [pc, #72]	; (4002f8 <InitRs485Pdc+0x84>)
  4002ae:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4002b4:	4b11      	ldr	r3, [pc, #68]	; (4002fc <InitRs485Pdc+0x88>)
  4002b6:	601a      	str	r2, [r3, #0]

	 /* Configure and enable interrupt of USART. */
	 NVIC_EnableIRQ(RS485_USART_IRQn);

	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 rs485PdcBase = usart_get_pdc_base(RS485_USART);
  4002b8:	4620      	mov	r0, r4
  4002ba:	4b11      	ldr	r3, [pc, #68]	; (400300 <InitRs485Pdc+0x8c>)
  4002bc:	4798      	blx	r3
  4002be:	4b11      	ldr	r3, [pc, #68]	; (400304 <InitRs485Pdc+0x90>)
  4002c0:	6018      	str	r0, [r3, #0]
	 pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4002c2:	f240 1101 	movw	r1, #257	; 0x101
  4002c6:	4b10      	ldr	r3, [pc, #64]	; (400308 <InitRs485Pdc+0x94>)
  4002c8:	4798      	blx	r3

	 /* Enable receiving interrupt. */
	 usart_enable_interrupt(RS485_USART, US_IER_ENDRX);
  4002ca:	2108      	movs	r1, #8
  4002cc:	4620      	mov	r0, r4
  4002ce:	4d0f      	ldr	r5, [pc, #60]	; (40030c <InitRs485Pdc+0x98>)
  4002d0:	47a8      	blx	r5
	 /* Enable transmit interrupt. */
	 usart_enable_interrupt(RS485_USART, US_IER_ENDTX);
  4002d2:	2110      	movs	r1, #16
  4002d4:	4620      	mov	r0, r4
  4002d6:	47a8      	blx	r5
 }
  4002d8:	b007      	add	sp, #28
  4002da:	bd30      	pop	{r4, r5, pc}
  4002dc:	00400b2c 	.word	0x00400b2c
  4002e0:	0040070d 	.word	0x0040070d
  4002e4:	40024000 	.word	0x40024000
  4002e8:	07270e00 	.word	0x07270e00
  4002ec:	0040020d 	.word	0x0040020d
  4002f0:	00400245 	.word	0x00400245
  4002f4:	00400231 	.word	0x00400231
  4002f8:	00400239 	.word	0x00400239
  4002fc:	e000e100 	.word	0xe000e100
  400300:	0040024d 	.word	0x0040024d
  400304:	200004c4 	.word	0x200004c4
  400308:	0040044d 	.word	0x0040044d
  40030c:	00400241 	.word	0x00400241

00400310 <USART0_Handler>:

 /* USART Interrupt Handler */
 void RS485_USART_Handler(void)
 {
  400310:	b508      	push	{r3, lr}
	 uint32_t ul_status;

	 /* Read USART status. */
	 ul_status = usart_get_status(RS485_USART);
  400312:	4808      	ldr	r0, [pc, #32]	; (400334 <USART0_Handler+0x24>)
  400314:	4b08      	ldr	r3, [pc, #32]	; (400338 <USART0_Handler+0x28>)
  400316:	4798      	blx	r3

	 if(ul_status & US_CSR_ENDRX)
  400318:	f010 0f08 	tst.w	r0, #8
  40031c:	d003      	beq.n	400326 <USART0_Handler+0x16>
	 {
		rxDone = 1;
  40031e:	2201      	movs	r2, #1
  400320:	4b06      	ldr	r3, [pc, #24]	; (40033c <USART0_Handler+0x2c>)
  400322:	701a      	strb	r2, [r3, #0]
  400324:	bd08      	pop	{r3, pc}
	 }
	 else if(ul_status & US_CSR_ENDTX)
  400326:	f010 0f10 	tst.w	r0, #16
  40032a:	d002      	beq.n	400332 <USART0_Handler+0x22>
	 {
		txDone = 1;
  40032c:	2201      	movs	r2, #1
  40032e:	4b04      	ldr	r3, [pc, #16]	; (400340 <USART0_Handler+0x30>)
  400330:	701a      	strb	r2, [r3, #0]
  400332:	bd08      	pop	{r3, pc}
  400334:	40024000 	.word	0x40024000
  400338:	00400249 	.word	0x00400249
  40033c:	20000001 	.word	0x20000001
  400340:	20000000 	.word	0x20000000

00400344 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400348:	4681      	mov	r9, r0
  40034a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40034c:	4b12      	ldr	r3, [pc, #72]	; (400398 <pio_handler_process+0x54>)
  40034e:	4798      	blx	r3
  400350:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400352:	4648      	mov	r0, r9
  400354:	4b11      	ldr	r3, [pc, #68]	; (40039c <pio_handler_process+0x58>)
  400356:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400358:	4005      	ands	r5, r0
  40035a:	d013      	beq.n	400384 <pio_handler_process+0x40>
  40035c:	4c10      	ldr	r4, [pc, #64]	; (4003a0 <pio_handler_process+0x5c>)
  40035e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400362:	6823      	ldr	r3, [r4, #0]
  400364:	4543      	cmp	r3, r8
  400366:	d108      	bne.n	40037a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400368:	6861      	ldr	r1, [r4, #4]
  40036a:	4229      	tst	r1, r5
  40036c:	d005      	beq.n	40037a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40036e:	68e3      	ldr	r3, [r4, #12]
  400370:	4640      	mov	r0, r8
  400372:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400374:	6863      	ldr	r3, [r4, #4]
  400376:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40037a:	42b4      	cmp	r4, r6
  40037c:	d002      	beq.n	400384 <pio_handler_process+0x40>
  40037e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400380:	2d00      	cmp	r5, #0
  400382:	d1ee      	bne.n	400362 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400384:	4b07      	ldr	r3, [pc, #28]	; (4003a4 <pio_handler_process+0x60>)
  400386:	681b      	ldr	r3, [r3, #0]
  400388:	b123      	cbz	r3, 400394 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40038a:	4b07      	ldr	r3, [pc, #28]	; (4003a8 <pio_handler_process+0x64>)
  40038c:	681b      	ldr	r3, [r3, #0]
  40038e:	b10b      	cbz	r3, 400394 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400390:	4648      	mov	r0, r9
  400392:	4798      	blx	r3
  400394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400398:	00400545 	.word	0x00400545
  40039c:	00400549 	.word	0x00400549
  4003a0:	20000454 	.word	0x20000454
  4003a4:	200004d0 	.word	0x200004d0
  4003a8:	20000450 	.word	0x20000450

004003ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4003ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4003ae:	210b      	movs	r1, #11
  4003b0:	4801      	ldr	r0, [pc, #4]	; (4003b8 <PIOA_Handler+0xc>)
  4003b2:	4b02      	ldr	r3, [pc, #8]	; (4003bc <PIOA_Handler+0x10>)
  4003b4:	4798      	blx	r3
  4003b6:	bd08      	pop	{r3, pc}
  4003b8:	400e0e00 	.word	0x400e0e00
  4003bc:	00400345 	.word	0x00400345

004003c0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4003c0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4003c2:	210c      	movs	r1, #12
  4003c4:	4801      	ldr	r0, [pc, #4]	; (4003cc <PIOB_Handler+0xc>)
  4003c6:	4b02      	ldr	r3, [pc, #8]	; (4003d0 <PIOB_Handler+0x10>)
  4003c8:	4798      	blx	r3
  4003ca:	bd08      	pop	{r3, pc}
  4003cc:	400e1000 	.word	0x400e1000
  4003d0:	00400345 	.word	0x00400345

004003d4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4003d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4003d6:	210d      	movs	r1, #13
  4003d8:	4801      	ldr	r0, [pc, #4]	; (4003e0 <PIOC_Handler+0xc>)
  4003da:	4b02      	ldr	r3, [pc, #8]	; (4003e4 <PIOC_Handler+0x10>)
  4003dc:	4798      	blx	r3
  4003de:	bd08      	pop	{r3, pc}
  4003e0:	400e1200 	.word	0x400e1200
  4003e4:	00400345 	.word	0x00400345

004003e8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4003e8:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4003ea:	480e      	ldr	r0, [pc, #56]	; (400424 <sysclk_init+0x3c>)
  4003ec:	4b0e      	ldr	r3, [pc, #56]	; (400428 <sysclk_init+0x40>)
  4003ee:	4798      	blx	r3
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
		break;


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4003f0:	2000      	movs	r0, #0
  4003f2:	4b0e      	ldr	r3, [pc, #56]	; (40042c <sysclk_init+0x44>)
  4003f4:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4003f6:	4c0e      	ldr	r4, [pc, #56]	; (400430 <sysclk_init+0x48>)
  4003f8:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4003fa:	2800      	cmp	r0, #0
  4003fc:	d0fc      	beq.n	4003f8 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4003fe:	4b0d      	ldr	r3, [pc, #52]	; (400434 <sysclk_init+0x4c>)
  400400:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400402:	4a0d      	ldr	r2, [pc, #52]	; (400438 <sysclk_init+0x50>)
  400404:	4b0d      	ldr	r3, [pc, #52]	; (40043c <sysclk_init+0x54>)
  400406:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400408:	4c0d      	ldr	r4, [pc, #52]	; (400440 <sysclk_init+0x58>)
  40040a:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40040c:	2800      	cmp	r0, #0
  40040e:	d0fc      	beq.n	40040a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400410:	2000      	movs	r0, #0
  400412:	4b0c      	ldr	r3, [pc, #48]	; (400444 <sysclk_init+0x5c>)
  400414:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400416:	4b0c      	ldr	r3, [pc, #48]	; (400448 <sysclk_init+0x60>)
  400418:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40041a:	4802      	ldr	r0, [pc, #8]	; (400424 <sysclk_init+0x3c>)
  40041c:	4b02      	ldr	r3, [pc, #8]	; (400428 <sysclk_init+0x40>)
  40041e:	4798      	blx	r3
  400420:	bd10      	pop	{r4, pc}
  400422:	bf00      	nop
  400424:	07270e00 	.word	0x07270e00
  400428:	00400941 	.word	0x00400941
  40042c:	00400691 	.word	0x00400691
  400430:	004006dd 	.word	0x004006dd
  400434:	004006ed 	.word	0x004006ed
  400438:	201d3f01 	.word	0x201d3f01
  40043c:	400e0400 	.word	0x400e0400
  400440:	004006fd 	.word	0x004006fd
  400444:	00400629 	.word	0x00400629
  400448:	0040082d 	.word	0x0040082d

0040044c <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40044c:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  400450:	05c9      	lsls	r1, r1, #23
  400452:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400454:	6201      	str	r1, [r0, #32]
  400456:	4770      	bx	lr

00400458 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400458:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40045a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40045e:	d02f      	beq.n	4004c0 <pio_set_peripheral+0x68>
  400460:	d807      	bhi.n	400472 <pio_set_peripheral+0x1a>
  400462:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400466:	d014      	beq.n	400492 <pio_set_peripheral+0x3a>
  400468:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40046c:	d01e      	beq.n	4004ac <pio_set_peripheral+0x54>
  40046e:	b939      	cbnz	r1, 400480 <pio_set_peripheral+0x28>
  400470:	4770      	bx	lr
  400472:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400476:	d036      	beq.n	4004e6 <pio_set_peripheral+0x8e>
  400478:	d804      	bhi.n	400484 <pio_set_peripheral+0x2c>
  40047a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40047e:	d029      	beq.n	4004d4 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400480:	6042      	str	r2, [r0, #4]
  400482:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400484:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400488:	d02d      	beq.n	4004e6 <pio_set_peripheral+0x8e>
  40048a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40048e:	d02a      	beq.n	4004e6 <pio_set_peripheral+0x8e>
  400490:	e7f6      	b.n	400480 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400492:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400494:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400496:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400498:	43d3      	mvns	r3, r2
  40049a:	4021      	ands	r1, r4
  40049c:	4019      	ands	r1, r3
  40049e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4004a0:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004a2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004a4:	4021      	ands	r1, r4
  4004a6:	400b      	ands	r3, r1
  4004a8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004aa:	e01a      	b.n	4004e2 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004ae:	4313      	orrs	r3, r2
  4004b0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4004b2:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004b4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4004b6:	400b      	ands	r3, r1
  4004b8:	ea23 0302 	bic.w	r3, r3, r2
  4004bc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004be:	e7df      	b.n	400480 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004c0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004c2:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4004c4:	400b      	ands	r3, r1
  4004c6:	ea23 0302 	bic.w	r3, r3, r2
  4004ca:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4004cc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004ce:	4313      	orrs	r3, r2
  4004d0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004d2:	e7d5      	b.n	400480 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004d6:	4313      	orrs	r3, r2
  4004d8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4004da:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004dc:	4313      	orrs	r3, r2
  4004de:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004e0:	e7ce      	b.n	400480 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4004e2:	6042      	str	r2, [r0, #4]
}
  4004e4:	bc10      	pop	{r4}
  4004e6:	4770      	bx	lr

004004e8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4004e8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004ea:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4004ee:	bf14      	ite	ne
  4004f0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004f2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4004f4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4004f8:	bf14      	ite	ne
  4004fa:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4004fc:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4004fe:	f012 0f02 	tst.w	r2, #2
  400502:	d002      	beq.n	40050a <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400504:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400508:	e004      	b.n	400514 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40050a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40050e:	bf18      	it	ne
  400510:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400514:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400516:	6001      	str	r1, [r0, #0]
  400518:	4770      	bx	lr
  40051a:	bf00      	nop

0040051c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40051c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40051e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400520:	9c01      	ldr	r4, [sp, #4]
  400522:	b10c      	cbz	r4, 400528 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400524:	6641      	str	r1, [r0, #100]	; 0x64
  400526:	e000      	b.n	40052a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400528:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40052a:	b10b      	cbz	r3, 400530 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  40052c:	6501      	str	r1, [r0, #80]	; 0x50
  40052e:	e000      	b.n	400532 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400530:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400532:	b10a      	cbz	r2, 400538 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400534:	6301      	str	r1, [r0, #48]	; 0x30
  400536:	e000      	b.n	40053a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400538:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40053a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40053c:	6001      	str	r1, [r0, #0]
}
  40053e:	bc10      	pop	{r4}
  400540:	4770      	bx	lr
  400542:	bf00      	nop

00400544 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400544:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400546:	4770      	bx	lr

00400548 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400548:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40054a:	4770      	bx	lr

0040054c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40054c:	b570      	push	{r4, r5, r6, lr}
  40054e:	b082      	sub	sp, #8
  400550:	4605      	mov	r5, r0
  400552:	460e      	mov	r6, r1
  400554:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400556:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40055a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40055e:	d038      	beq.n	4005d2 <pio_configure_pin_group+0x86>
  400560:	d809      	bhi.n	400576 <pio_configure_pin_group+0x2a>
  400562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400566:	d01c      	beq.n	4005a2 <pio_configure_pin_group+0x56>
  400568:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40056c:	d025      	beq.n	4005ba <pio_configure_pin_group+0x6e>
  40056e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400572:	d150      	bne.n	400616 <pio_configure_pin_group+0xca>
  400574:	e009      	b.n	40058a <pio_configure_pin_group+0x3e>
  400576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40057a:	d03a      	beq.n	4005f2 <pio_configure_pin_group+0xa6>
  40057c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400580:	d037      	beq.n	4005f2 <pio_configure_pin_group+0xa6>
  400582:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400586:	d030      	beq.n	4005ea <pio_configure_pin_group+0x9e>
  400588:	e045      	b.n	400616 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40058a:	460a      	mov	r2, r1
  40058c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400590:	4b22      	ldr	r3, [pc, #136]	; (40061c <pio_configure_pin_group+0xd0>)
  400592:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400594:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400598:	bf14      	ite	ne
  40059a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40059c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40059e:	2001      	movs	r0, #1
  4005a0:	e03a      	b.n	400618 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4005a2:	460a      	mov	r2, r1
  4005a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005a8:	4b1c      	ldr	r3, [pc, #112]	; (40061c <pio_configure_pin_group+0xd0>)
  4005aa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005ac:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005b0:	bf14      	ite	ne
  4005b2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005b4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005b6:	2001      	movs	r0, #1
  4005b8:	e02e      	b.n	400618 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4005ba:	460a      	mov	r2, r1
  4005bc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005c0:	4b16      	ldr	r3, [pc, #88]	; (40061c <pio_configure_pin_group+0xd0>)
  4005c2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005c4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005c8:	bf14      	ite	ne
  4005ca:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005cc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005ce:	2001      	movs	r0, #1
  4005d0:	e022      	b.n	400618 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4005d2:	460a      	mov	r2, r1
  4005d4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005d8:	4b10      	ldr	r3, [pc, #64]	; (40061c <pio_configure_pin_group+0xd0>)
  4005da:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005dc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005e0:	bf14      	ite	ne
  4005e2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005e4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005e6:	2001      	movs	r0, #1
  4005e8:	e016      	b.n	400618 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4005ea:	4b0d      	ldr	r3, [pc, #52]	; (400620 <pio_configure_pin_group+0xd4>)
  4005ec:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4005ee:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4005f0:	e012      	b.n	400618 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4005f2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  4005f6:	f004 0301 	and.w	r3, r4, #1
  4005fa:	9300      	str	r3, [sp, #0]
  4005fc:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400600:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400604:	bf14      	ite	ne
  400606:	2200      	movne	r2, #0
  400608:	2201      	moveq	r2, #1
  40060a:	4631      	mov	r1, r6
  40060c:	4628      	mov	r0, r5
  40060e:	4c05      	ldr	r4, [pc, #20]	; (400624 <pio_configure_pin_group+0xd8>)
  400610:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400612:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400614:	e000      	b.n	400618 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400616:	2000      	movs	r0, #0
	}

	return 1;
}
  400618:	b002      	add	sp, #8
  40061a:	bd70      	pop	{r4, r5, r6, pc}
  40061c:	00400459 	.word	0x00400459
  400620:	004004e9 	.word	0x004004e9
  400624:	0040051d 	.word	0x0040051d

00400628 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400628:	4a18      	ldr	r2, [pc, #96]	; (40068c <pmc_switch_mck_to_pllack+0x64>)
  40062a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40062c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400630:	4318      	orrs	r0, r3
  400632:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400634:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400636:	f013 0f08 	tst.w	r3, #8
  40063a:	d003      	beq.n	400644 <pmc_switch_mck_to_pllack+0x1c>
  40063c:	e009      	b.n	400652 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40063e:	3b01      	subs	r3, #1
  400640:	d103      	bne.n	40064a <pmc_switch_mck_to_pllack+0x22>
  400642:	e01e      	b.n	400682 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400644:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400648:	4910      	ldr	r1, [pc, #64]	; (40068c <pmc_switch_mck_to_pllack+0x64>)
  40064a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40064c:	f012 0f08 	tst.w	r2, #8
  400650:	d0f5      	beq.n	40063e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400652:	4a0e      	ldr	r2, [pc, #56]	; (40068c <pmc_switch_mck_to_pllack+0x64>)
  400654:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400656:	f023 0303 	bic.w	r3, r3, #3
  40065a:	f043 0302 	orr.w	r3, r3, #2
  40065e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400660:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400662:	f010 0008 	ands.w	r0, r0, #8
  400666:	d004      	beq.n	400672 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400668:	2000      	movs	r0, #0
  40066a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40066c:	3b01      	subs	r3, #1
  40066e:	d103      	bne.n	400678 <pmc_switch_mck_to_pllack+0x50>
  400670:	e009      	b.n	400686 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400672:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400676:	4905      	ldr	r1, [pc, #20]	; (40068c <pmc_switch_mck_to_pllack+0x64>)
  400678:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40067a:	f012 0f08 	tst.w	r2, #8
  40067e:	d0f5      	beq.n	40066c <pmc_switch_mck_to_pllack+0x44>
  400680:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400682:	2001      	movs	r0, #1
  400684:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400686:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	400e0400 	.word	0x400e0400

00400690 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400690:	4b11      	ldr	r3, [pc, #68]	; (4006d8 <pmc_switch_mainck_to_fastrc+0x48>)
  400692:	6a1a      	ldr	r2, [r3, #32]
  400694:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  400698:	f042 0208 	orr.w	r2, r2, #8
  40069c:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40069e:	461a      	mov	r2, r3
  4006a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4006a6:	d0fb      	beq.n	4006a0 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4006a8:	4a0b      	ldr	r2, [pc, #44]	; (4006d8 <pmc_switch_mainck_to_fastrc+0x48>)
  4006aa:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4006ac:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4006b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4006b8:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4006ba:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4006bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4006c2:	d0fb      	beq.n	4006bc <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4006c4:	4a04      	ldr	r2, [pc, #16]	; (4006d8 <pmc_switch_mainck_to_fastrc+0x48>)
  4006c6:	6a13      	ldr	r3, [r2, #32]
  4006c8:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4006cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4006d0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4006d4:	6213      	str	r3, [r2, #32]
  4006d6:	4770      	bx	lr
  4006d8:	400e0400 	.word	0x400e0400

004006dc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4006dc:	4b02      	ldr	r3, [pc, #8]	; (4006e8 <pmc_osc_is_ready_mainck+0xc>)
  4006de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4006e0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4006e4:	4770      	bx	lr
  4006e6:	bf00      	nop
  4006e8:	400e0400 	.word	0x400e0400

004006ec <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4006ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4006f0:	4b01      	ldr	r3, [pc, #4]	; (4006f8 <pmc_disable_pllack+0xc>)
  4006f2:	629a      	str	r2, [r3, #40]	; 0x28
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop
  4006f8:	400e0400 	.word	0x400e0400

004006fc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4006fc:	4b02      	ldr	r3, [pc, #8]	; (400708 <pmc_is_locked_pllack+0xc>)
  4006fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400700:	f000 0002 	and.w	r0, r0, #2
  400704:	4770      	bx	lr
  400706:	bf00      	nop
  400708:	400e0400 	.word	0x400e0400

0040070c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40070c:	2822      	cmp	r0, #34	; 0x22
  40070e:	d81e      	bhi.n	40074e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400710:	281f      	cmp	r0, #31
  400712:	d80c      	bhi.n	40072e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400714:	4b11      	ldr	r3, [pc, #68]	; (40075c <pmc_enable_periph_clk+0x50>)
  400716:	699a      	ldr	r2, [r3, #24]
  400718:	2301      	movs	r3, #1
  40071a:	4083      	lsls	r3, r0
  40071c:	4393      	bics	r3, r2
  40071e:	d018      	beq.n	400752 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400720:	2301      	movs	r3, #1
  400722:	fa03 f000 	lsl.w	r0, r3, r0
  400726:	4b0d      	ldr	r3, [pc, #52]	; (40075c <pmc_enable_periph_clk+0x50>)
  400728:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40072a:	2000      	movs	r0, #0
  40072c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40072e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400730:	4b0a      	ldr	r3, [pc, #40]	; (40075c <pmc_enable_periph_clk+0x50>)
  400732:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400736:	2301      	movs	r3, #1
  400738:	4083      	lsls	r3, r0
  40073a:	4393      	bics	r3, r2
  40073c:	d00b      	beq.n	400756 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40073e:	2301      	movs	r3, #1
  400740:	fa03 f000 	lsl.w	r0, r3, r0
  400744:	4b05      	ldr	r3, [pc, #20]	; (40075c <pmc_enable_periph_clk+0x50>)
  400746:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40074a:	2000      	movs	r0, #0
  40074c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40074e:	2001      	movs	r0, #1
  400750:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400752:	2000      	movs	r0, #0
  400754:	4770      	bx	lr
  400756:	2000      	movs	r0, #0
}
  400758:	4770      	bx	lr
  40075a:	bf00      	nop
  40075c:	400e0400 	.word	0x400e0400

00400760 <board_init>:
#include "gpio.h"
#include "ioport.h"


void board_init(void)
{
  400760:	b508      	push	{r3, lr}
		#define RS485_BAUDRATE		9600
		#define RS485_USART_Handler	USART0_Handler
		#define RS485_USART_IRQn	USART0_IRQn
	 #endif
	 #if defined(CONF_UART0_PINS)
		gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  400762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400766:	21e0      	movs	r1, #224	; 0xe0
  400768:	4801      	ldr	r0, [pc, #4]	; (400770 <board_init+0x10>)
  40076a:	4b02      	ldr	r3, [pc, #8]	; (400774 <board_init+0x14>)
  40076c:	4798      	blx	r3
  40076e:	bd08      	pop	{r3, pc}
  400770:	400e0e00 	.word	0x400e0e00
  400774:	0040054d 	.word	0x0040054d

00400778 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400778:	e7fe      	b.n	400778 <Dummy_Handler>
  40077a:	bf00      	nop

0040077c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40077c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40077e:	4b20      	ldr	r3, [pc, #128]	; (400800 <Reset_Handler+0x84>)
  400780:	4a20      	ldr	r2, [pc, #128]	; (400804 <Reset_Handler+0x88>)
  400782:	429a      	cmp	r2, r3
  400784:	d912      	bls.n	4007ac <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400786:	4b20      	ldr	r3, [pc, #128]	; (400808 <Reset_Handler+0x8c>)
  400788:	4a1d      	ldr	r2, [pc, #116]	; (400800 <Reset_Handler+0x84>)
  40078a:	429a      	cmp	r2, r3
  40078c:	d21e      	bcs.n	4007cc <Reset_Handler+0x50>
  40078e:	4611      	mov	r1, r2
  400790:	3b01      	subs	r3, #1
  400792:	1a9b      	subs	r3, r3, r2
  400794:	f023 0303 	bic.w	r3, r3, #3
  400798:	3304      	adds	r3, #4
  40079a:	4a1a      	ldr	r2, [pc, #104]	; (400804 <Reset_Handler+0x88>)
  40079c:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  40079e:	f852 0b04 	ldr.w	r0, [r2], #4
  4007a2:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4007a6:	429a      	cmp	r2, r3
  4007a8:	d1f9      	bne.n	40079e <Reset_Handler+0x22>
  4007aa:	e00f      	b.n	4007cc <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4007ac:	4b14      	ldr	r3, [pc, #80]	; (400800 <Reset_Handler+0x84>)
  4007ae:	4a15      	ldr	r2, [pc, #84]	; (400804 <Reset_Handler+0x88>)
  4007b0:	429a      	cmp	r2, r3
  4007b2:	d20b      	bcs.n	4007cc <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4007b4:	4b14      	ldr	r3, [pc, #80]	; (400808 <Reset_Handler+0x8c>)
  4007b6:	4a12      	ldr	r2, [pc, #72]	; (400800 <Reset_Handler+0x84>)
  4007b8:	1a9a      	subs	r2, r3, r2
  4007ba:	4814      	ldr	r0, [pc, #80]	; (40080c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4007bc:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4007be:	b12a      	cbz	r2, 4007cc <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  4007c0:	f851 2904 	ldr.w	r2, [r1], #-4
  4007c4:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4007c8:	4281      	cmp	r1, r0
  4007ca:	d1f9      	bne.n	4007c0 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4007cc:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4007ce:	4b10      	ldr	r3, [pc, #64]	; (400810 <Reset_Handler+0x94>)
  4007d0:	4a10      	ldr	r2, [pc, #64]	; (400814 <Reset_Handler+0x98>)
  4007d2:	429a      	cmp	r2, r3
  4007d4:	d20b      	bcs.n	4007ee <Reset_Handler+0x72>
  4007d6:	1d13      	adds	r3, r2, #4
  4007d8:	4a0f      	ldr	r2, [pc, #60]	; (400818 <Reset_Handler+0x9c>)
  4007da:	1ad2      	subs	r2, r2, r3
  4007dc:	f022 0203 	bic.w	r2, r2, #3
  4007e0:	441a      	add	r2, r3
  4007e2:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4007e4:	2100      	movs	r1, #0
  4007e6:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4007ea:	429a      	cmp	r2, r3
  4007ec:	d1fb      	bne.n	4007e6 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4007ee:	4b0b      	ldr	r3, [pc, #44]	; (40081c <Reset_Handler+0xa0>)
  4007f0:	4a0b      	ldr	r2, [pc, #44]	; (400820 <Reset_Handler+0xa4>)
  4007f2:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4007f4:	4b0b      	ldr	r3, [pc, #44]	; (400824 <Reset_Handler+0xa8>)
  4007f6:	4798      	blx	r3

	/* Branch to main function */
	main();
  4007f8:	4b0b      	ldr	r3, [pc, #44]	; (400828 <Reset_Handler+0xac>)
  4007fa:	4798      	blx	r3
  4007fc:	e7fe      	b.n	4007fc <Reset_Handler+0x80>
  4007fe:	bf00      	nop
  400800:	20000000 	.word	0x20000000
  400804:	00400b70 	.word	0x00400b70
  400808:	20000430 	.word	0x20000430
  40080c:	00400b6c 	.word	0x00400b6c
  400810:	200004d4 	.word	0x200004d4
  400814:	20000430 	.word	0x20000430
  400818:	200004d7 	.word	0x200004d7
  40081c:	e000ed00 	.word	0xe000ed00
  400820:	00400000 	.word	0x00400000
  400824:	004009f1 	.word	0x004009f1
  400828:	004009d5 	.word	0x004009d5

0040082c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40082c:	4b3d      	ldr	r3, [pc, #244]	; (400924 <SystemCoreClockUpdate+0xf8>)
  40082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400830:	f003 0303 	and.w	r3, r3, #3
  400834:	2b03      	cmp	r3, #3
  400836:	d85d      	bhi.n	4008f4 <SystemCoreClockUpdate+0xc8>
  400838:	e8df f003 	tbb	[pc, r3]
  40083c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400840:	4b39      	ldr	r3, [pc, #228]	; (400928 <SystemCoreClockUpdate+0xfc>)
  400842:	695b      	ldr	r3, [r3, #20]
  400844:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400848:	bf14      	ite	ne
  40084a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40084e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400852:	4b36      	ldr	r3, [pc, #216]	; (40092c <SystemCoreClockUpdate+0x100>)
  400854:	601a      	str	r2, [r3, #0]
  400856:	e04d      	b.n	4008f4 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400858:	4b32      	ldr	r3, [pc, #200]	; (400924 <SystemCoreClockUpdate+0xf8>)
  40085a:	6a1b      	ldr	r3, [r3, #32]
  40085c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400860:	d003      	beq.n	40086a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400862:	4a33      	ldr	r2, [pc, #204]	; (400930 <SystemCoreClockUpdate+0x104>)
  400864:	4b31      	ldr	r3, [pc, #196]	; (40092c <SystemCoreClockUpdate+0x100>)
  400866:	601a      	str	r2, [r3, #0]
  400868:	e044      	b.n	4008f4 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40086a:	4a32      	ldr	r2, [pc, #200]	; (400934 <SystemCoreClockUpdate+0x108>)
  40086c:	4b2f      	ldr	r3, [pc, #188]	; (40092c <SystemCoreClockUpdate+0x100>)
  40086e:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400870:	4b2c      	ldr	r3, [pc, #176]	; (400924 <SystemCoreClockUpdate+0xf8>)
  400872:	6a1b      	ldr	r3, [r3, #32]
  400874:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400878:	2b10      	cmp	r3, #16
  40087a:	d002      	beq.n	400882 <SystemCoreClockUpdate+0x56>
  40087c:	2b20      	cmp	r3, #32
  40087e:	d004      	beq.n	40088a <SystemCoreClockUpdate+0x5e>
  400880:	e038      	b.n	4008f4 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400882:	4a2d      	ldr	r2, [pc, #180]	; (400938 <SystemCoreClockUpdate+0x10c>)
  400884:	4b29      	ldr	r3, [pc, #164]	; (40092c <SystemCoreClockUpdate+0x100>)
  400886:	601a      	str	r2, [r3, #0]
			break;
  400888:	e034      	b.n	4008f4 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40088a:	4a29      	ldr	r2, [pc, #164]	; (400930 <SystemCoreClockUpdate+0x104>)
  40088c:	4b27      	ldr	r3, [pc, #156]	; (40092c <SystemCoreClockUpdate+0x100>)
  40088e:	601a      	str	r2, [r3, #0]
			break;
  400890:	e030      	b.n	4008f4 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400892:	4b24      	ldr	r3, [pc, #144]	; (400924 <SystemCoreClockUpdate+0xf8>)
  400894:	6a1b      	ldr	r3, [r3, #32]
  400896:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40089a:	d003      	beq.n	4008a4 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40089c:	4a24      	ldr	r2, [pc, #144]	; (400930 <SystemCoreClockUpdate+0x104>)
  40089e:	4b23      	ldr	r3, [pc, #140]	; (40092c <SystemCoreClockUpdate+0x100>)
  4008a0:	601a      	str	r2, [r3, #0]
  4008a2:	e012      	b.n	4008ca <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4008a4:	4a23      	ldr	r2, [pc, #140]	; (400934 <SystemCoreClockUpdate+0x108>)
  4008a6:	4b21      	ldr	r3, [pc, #132]	; (40092c <SystemCoreClockUpdate+0x100>)
  4008a8:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4008aa:	4b1e      	ldr	r3, [pc, #120]	; (400924 <SystemCoreClockUpdate+0xf8>)
  4008ac:	6a1b      	ldr	r3, [r3, #32]
  4008ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4008b2:	2b10      	cmp	r3, #16
  4008b4:	d002      	beq.n	4008bc <SystemCoreClockUpdate+0x90>
  4008b6:	2b20      	cmp	r3, #32
  4008b8:	d004      	beq.n	4008c4 <SystemCoreClockUpdate+0x98>
  4008ba:	e006      	b.n	4008ca <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4008bc:	4a1e      	ldr	r2, [pc, #120]	; (400938 <SystemCoreClockUpdate+0x10c>)
  4008be:	4b1b      	ldr	r3, [pc, #108]	; (40092c <SystemCoreClockUpdate+0x100>)
  4008c0:	601a      	str	r2, [r3, #0]
					break;
  4008c2:	e002      	b.n	4008ca <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4008c4:	4a1a      	ldr	r2, [pc, #104]	; (400930 <SystemCoreClockUpdate+0x104>)
  4008c6:	4b19      	ldr	r3, [pc, #100]	; (40092c <SystemCoreClockUpdate+0x100>)
  4008c8:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4008ca:	4b16      	ldr	r3, [pc, #88]	; (400924 <SystemCoreClockUpdate+0xf8>)
  4008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008ce:	f003 0303 	and.w	r3, r3, #3
  4008d2:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4008d4:	4a13      	ldr	r2, [pc, #76]	; (400924 <SystemCoreClockUpdate+0xf8>)
  4008d6:	bf07      	ittee	eq
  4008d8:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4008da:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4008dc:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4008de:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4008e0:	4812      	ldr	r0, [pc, #72]	; (40092c <SystemCoreClockUpdate+0x100>)
  4008e2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4008e6:	6803      	ldr	r3, [r0, #0]
  4008e8:	fb01 3303 	mla	r3, r1, r3, r3
  4008ec:	b2d2      	uxtb	r2, r2
  4008ee:	fbb3 f3f2 	udiv	r3, r3, r2
  4008f2:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4008f4:	4b0b      	ldr	r3, [pc, #44]	; (400924 <SystemCoreClockUpdate+0xf8>)
  4008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4008fc:	2b70      	cmp	r3, #112	; 0x70
  4008fe:	d107      	bne.n	400910 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400900:	4a0a      	ldr	r2, [pc, #40]	; (40092c <SystemCoreClockUpdate+0x100>)
  400902:	6813      	ldr	r3, [r2, #0]
  400904:	490d      	ldr	r1, [pc, #52]	; (40093c <SystemCoreClockUpdate+0x110>)
  400906:	fba1 1303 	umull	r1, r3, r1, r3
  40090a:	085b      	lsrs	r3, r3, #1
  40090c:	6013      	str	r3, [r2, #0]
  40090e:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400910:	4b04      	ldr	r3, [pc, #16]	; (400924 <SystemCoreClockUpdate+0xf8>)
  400912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400914:	4905      	ldr	r1, [pc, #20]	; (40092c <SystemCoreClockUpdate+0x100>)
  400916:	f3c3 1202 	ubfx	r2, r3, #4, #3
  40091a:	680b      	ldr	r3, [r1, #0]
  40091c:	40d3      	lsrs	r3, r2
  40091e:	600b      	str	r3, [r1, #0]
  400920:	4770      	bx	lr
  400922:	bf00      	nop
  400924:	400e0400 	.word	0x400e0400
  400928:	400e1410 	.word	0x400e1410
  40092c:	20000004 	.word	0x20000004
  400930:	00b71b00 	.word	0x00b71b00
  400934:	003d0900 	.word	0x003d0900
  400938:	007a1200 	.word	0x007a1200
  40093c:	aaaaaaab 	.word	0xaaaaaaab

00400940 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400940:	4b1a      	ldr	r3, [pc, #104]	; (4009ac <system_init_flash+0x6c>)
  400942:	4298      	cmp	r0, r3
  400944:	d807      	bhi.n	400956 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400946:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  40094a:	4a19      	ldr	r2, [pc, #100]	; (4009b0 <system_init_flash+0x70>)
  40094c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40094e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400952:	6013      	str	r3, [r2, #0]
  400954:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400956:	4b17      	ldr	r3, [pc, #92]	; (4009b4 <system_init_flash+0x74>)
  400958:	4298      	cmp	r0, r3
  40095a:	d806      	bhi.n	40096a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40095c:	4b16      	ldr	r3, [pc, #88]	; (4009b8 <system_init_flash+0x78>)
  40095e:	4a14      	ldr	r2, [pc, #80]	; (4009b0 <system_init_flash+0x70>)
  400960:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400962:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400966:	6013      	str	r3, [r2, #0]
  400968:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40096a:	4b14      	ldr	r3, [pc, #80]	; (4009bc <system_init_flash+0x7c>)
  40096c:	4298      	cmp	r0, r3
  40096e:	d806      	bhi.n	40097e <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400970:	4b13      	ldr	r3, [pc, #76]	; (4009c0 <system_init_flash+0x80>)
  400972:	4a0f      	ldr	r2, [pc, #60]	; (4009b0 <system_init_flash+0x70>)
  400974:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400976:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40097a:	6013      	str	r3, [r2, #0]
  40097c:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40097e:	4b11      	ldr	r3, [pc, #68]	; (4009c4 <system_init_flash+0x84>)
  400980:	4298      	cmp	r0, r3
  400982:	d806      	bhi.n	400992 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400984:	4b10      	ldr	r3, [pc, #64]	; (4009c8 <system_init_flash+0x88>)
  400986:	4a0a      	ldr	r2, [pc, #40]	; (4009b0 <system_init_flash+0x70>)
  400988:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40098a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40098e:	6013      	str	r3, [r2, #0]
  400990:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400992:	4b0e      	ldr	r3, [pc, #56]	; (4009cc <system_init_flash+0x8c>)
  400994:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400996:	bf94      	ite	ls
  400998:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40099c:	4b0c      	ldrhi	r3, [pc, #48]	; (4009d0 <system_init_flash+0x90>)
  40099e:	4a04      	ldr	r2, [pc, #16]	; (4009b0 <system_init_flash+0x70>)
  4009a0:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4009a2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4009a6:	6013      	str	r3, [r2, #0]
  4009a8:	4770      	bx	lr
  4009aa:	bf00      	nop
  4009ac:	01312cff 	.word	0x01312cff
  4009b0:	400e0a00 	.word	0x400e0a00
  4009b4:	026259ff 	.word	0x026259ff
  4009b8:	04000100 	.word	0x04000100
  4009bc:	039386ff 	.word	0x039386ff
  4009c0:	04000200 	.word	0x04000200
  4009c4:	04c4b3ff 	.word	0x04c4b3ff
  4009c8:	04000300 	.word	0x04000300
  4009cc:	05f5e0ff 	.word	0x05f5e0ff
  4009d0:	04000500 	.word	0x04000500

004009d4 <main>:
/** RS485 buffers */
uint8_t rs485RxBuffer[RS485_BUFFER_SIZE];
uint8_t rs485TxBuffer[RS485_BUFFER_SIZE];

int main (void)
{
  4009d4:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  4009d6:	4b03      	ldr	r3, [pc, #12]	; (4009e4 <main+0x10>)
  4009d8:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();	
  4009da:	4b03      	ldr	r3, [pc, #12]	; (4009e8 <main+0x14>)
  4009dc:	4798      	blx	r3
	
	InitRs485Pdc();
  4009de:	4b03      	ldr	r3, [pc, #12]	; (4009ec <main+0x18>)
  4009e0:	4798      	blx	r3
  4009e2:	e7fe      	b.n	4009e2 <main+0xe>
  4009e4:	004003e9 	.word	0x004003e9
  4009e8:	00400761 	.word	0x00400761
  4009ec:	00400275 	.word	0x00400275

004009f0 <__libc_init_array>:
  4009f0:	b570      	push	{r4, r5, r6, lr}
  4009f2:	4e0f      	ldr	r6, [pc, #60]	; (400a30 <__libc_init_array+0x40>)
  4009f4:	4d0f      	ldr	r5, [pc, #60]	; (400a34 <__libc_init_array+0x44>)
  4009f6:	1b76      	subs	r6, r6, r5
  4009f8:	10b6      	asrs	r6, r6, #2
  4009fa:	bf18      	it	ne
  4009fc:	2400      	movne	r4, #0
  4009fe:	d005      	beq.n	400a0c <__libc_init_array+0x1c>
  400a00:	3401      	adds	r4, #1
  400a02:	f855 3b04 	ldr.w	r3, [r5], #4
  400a06:	4798      	blx	r3
  400a08:	42a6      	cmp	r6, r4
  400a0a:	d1f9      	bne.n	400a00 <__libc_init_array+0x10>
  400a0c:	4e0a      	ldr	r6, [pc, #40]	; (400a38 <__libc_init_array+0x48>)
  400a0e:	4d0b      	ldr	r5, [pc, #44]	; (400a3c <__libc_init_array+0x4c>)
  400a10:	1b76      	subs	r6, r6, r5
  400a12:	f000 f89b 	bl	400b4c <_init>
  400a16:	10b6      	asrs	r6, r6, #2
  400a18:	bf18      	it	ne
  400a1a:	2400      	movne	r4, #0
  400a1c:	d006      	beq.n	400a2c <__libc_init_array+0x3c>
  400a1e:	3401      	adds	r4, #1
  400a20:	f855 3b04 	ldr.w	r3, [r5], #4
  400a24:	4798      	blx	r3
  400a26:	42a6      	cmp	r6, r4
  400a28:	d1f9      	bne.n	400a1e <__libc_init_array+0x2e>
  400a2a:	bd70      	pop	{r4, r5, r6, pc}
  400a2c:	bd70      	pop	{r4, r5, r6, pc}
  400a2e:	bf00      	nop
  400a30:	00400b58 	.word	0x00400b58
  400a34:	00400b58 	.word	0x00400b58
  400a38:	00400b60 	.word	0x00400b60
  400a3c:	00400b58 	.word	0x00400b58

00400a40 <register_fini>:
  400a40:	4b02      	ldr	r3, [pc, #8]	; (400a4c <register_fini+0xc>)
  400a42:	b113      	cbz	r3, 400a4a <register_fini+0xa>
  400a44:	4802      	ldr	r0, [pc, #8]	; (400a50 <register_fini+0x10>)
  400a46:	f000 b805 	b.w	400a54 <atexit>
  400a4a:	4770      	bx	lr
  400a4c:	00000000 	.word	0x00000000
  400a50:	00400a61 	.word	0x00400a61

00400a54 <atexit>:
  400a54:	2300      	movs	r3, #0
  400a56:	4601      	mov	r1, r0
  400a58:	461a      	mov	r2, r3
  400a5a:	4618      	mov	r0, r3
  400a5c:	f000 b814 	b.w	400a88 <__register_exitproc>

00400a60 <__libc_fini_array>:
  400a60:	b538      	push	{r3, r4, r5, lr}
  400a62:	4d07      	ldr	r5, [pc, #28]	; (400a80 <__libc_fini_array+0x20>)
  400a64:	4c07      	ldr	r4, [pc, #28]	; (400a84 <__libc_fini_array+0x24>)
  400a66:	1b2c      	subs	r4, r5, r4
  400a68:	10a4      	asrs	r4, r4, #2
  400a6a:	d005      	beq.n	400a78 <__libc_fini_array+0x18>
  400a6c:	3c01      	subs	r4, #1
  400a6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400a72:	4798      	blx	r3
  400a74:	2c00      	cmp	r4, #0
  400a76:	d1f9      	bne.n	400a6c <__libc_fini_array+0xc>
  400a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400a7c:	f000 b870 	b.w	400b60 <_fini>
  400a80:	00400b70 	.word	0x00400b70
  400a84:	00400b6c 	.word	0x00400b6c

00400a88 <__register_exitproc>:
  400a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400a8c:	4c25      	ldr	r4, [pc, #148]	; (400b24 <__register_exitproc+0x9c>)
  400a8e:	6825      	ldr	r5, [r4, #0]
  400a90:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400a94:	4606      	mov	r6, r0
  400a96:	4688      	mov	r8, r1
  400a98:	4692      	mov	sl, r2
  400a9a:	4699      	mov	r9, r3
  400a9c:	b3c4      	cbz	r4, 400b10 <__register_exitproc+0x88>
  400a9e:	6860      	ldr	r0, [r4, #4]
  400aa0:	281f      	cmp	r0, #31
  400aa2:	dc17      	bgt.n	400ad4 <__register_exitproc+0x4c>
  400aa4:	1c43      	adds	r3, r0, #1
  400aa6:	b176      	cbz	r6, 400ac6 <__register_exitproc+0x3e>
  400aa8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400aac:	2201      	movs	r2, #1
  400aae:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400ab2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400ab6:	4082      	lsls	r2, r0
  400ab8:	4311      	orrs	r1, r2
  400aba:	2e02      	cmp	r6, #2
  400abc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400ac0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400ac4:	d01e      	beq.n	400b04 <__register_exitproc+0x7c>
  400ac6:	3002      	adds	r0, #2
  400ac8:	6063      	str	r3, [r4, #4]
  400aca:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400ace:	2000      	movs	r0, #0
  400ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400ad4:	4b14      	ldr	r3, [pc, #80]	; (400b28 <__register_exitproc+0xa0>)
  400ad6:	b303      	cbz	r3, 400b1a <__register_exitproc+0x92>
  400ad8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400adc:	f3af 8000 	nop.w
  400ae0:	4604      	mov	r4, r0
  400ae2:	b1d0      	cbz	r0, 400b1a <__register_exitproc+0x92>
  400ae4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400ae8:	2700      	movs	r7, #0
  400aea:	e880 0088 	stmia.w	r0, {r3, r7}
  400aee:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400af2:	4638      	mov	r0, r7
  400af4:	2301      	movs	r3, #1
  400af6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400afa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400afe:	2e00      	cmp	r6, #0
  400b00:	d0e1      	beq.n	400ac6 <__register_exitproc+0x3e>
  400b02:	e7d1      	b.n	400aa8 <__register_exitproc+0x20>
  400b04:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400b08:	430a      	orrs	r2, r1
  400b0a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  400b0e:	e7da      	b.n	400ac6 <__register_exitproc+0x3e>
  400b10:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  400b14:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400b18:	e7c1      	b.n	400a9e <__register_exitproc+0x16>
  400b1a:	f04f 30ff 	mov.w	r0, #4294967295
  400b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b22:	bf00      	nop
  400b24:	00400b48 	.word	0x00400b48
  400b28:	00000000 	.word	0x00000000
  400b2c:	00002580 	.word	0x00002580
  400b30:	000000c0 	.word	0x000000c0
  400b34:	00000800 	.word	0x00000800
	...
  400b44:	00000043 	.word	0x00000043

00400b48 <_global_impure_ptr>:
  400b48:	20000008                                ... 

00400b4c <_init>:
  400b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b4e:	bf00      	nop
  400b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400b52:	bc08      	pop	{r3}
  400b54:	469e      	mov	lr, r3
  400b56:	4770      	bx	lr

00400b58 <__init_array_start>:
  400b58:	00400a41 	.word	0x00400a41

00400b5c <__frame_dummy_init_array_entry>:
  400b5c:	004000f1                                ..@.

00400b60 <_fini>:
  400b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b62:	bf00      	nop
  400b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400b66:	bc08      	pop	{r3}
  400b68:	469e      	mov	lr, r3
  400b6a:	4770      	bx	lr

00400b6c <__fini_array_start>:
  400b6c:	004000cd 	.word	0x004000cd
