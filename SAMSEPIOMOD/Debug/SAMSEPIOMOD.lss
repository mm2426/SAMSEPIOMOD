
SAMSEPIOMOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dbc  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00401dbc  00401dbc  00011dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000440  20000000  00401dc4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00003f24  20000440  00402204  00020440  2**2
                  ALLOC
  4 .stack        00003004  20004364  00406128  00020440  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007158  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001201  00000000  00000000  0002761b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000502c  00000000  00000000  0002881c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008b8  00000000  00000000  0002d848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007f8  00000000  00000000  0002e100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012538  00000000  00000000  0002e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009a64  00000000  00000000  00040e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004e68d  00000000  00000000  0004a894  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002618  00000000  00000000  00098f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20007368 	.word	0x20007368
  400004:	0040147d 	.word	0x0040147d
  400008:	00401545 	.word	0x00401545
  40000c:	00401545 	.word	0x00401545
  400010:	00401545 	.word	0x00401545
  400014:	00401545 	.word	0x00401545
  400018:	00401545 	.word	0x00401545
	...
  40002c:	00401545 	.word	0x00401545
  400030:	00401545 	.word	0x00401545
  400034:	00000000 	.word	0x00000000
  400038:	00401545 	.word	0x00401545
  40003c:	00401545 	.word	0x00401545
  400040:	00401545 	.word	0x00401545
  400044:	00401545 	.word	0x00401545
  400048:	00401545 	.word	0x00401545
  40004c:	00401545 	.word	0x00401545
  400050:	00401545 	.word	0x00401545
  400054:	00401545 	.word	0x00401545
  400058:	00401545 	.word	0x00401545
  40005c:	00401545 	.word	0x00401545
  400060:	00401545 	.word	0x00401545
  400064:	00401545 	.word	0x00401545
  400068:	00000000 	.word	0x00000000
  40006c:	0040076d 	.word	0x0040076d
  400070:	00400785 	.word	0x00400785
  400074:	0040079d 	.word	0x0040079d
  400078:	00401545 	.word	0x00401545
  40007c:	004005ad 	.word	0x004005ad
	...
  400088:	00401545 	.word	0x00401545
  40008c:	00401545 	.word	0x00401545
  400090:	00401545 	.word	0x00401545
  400094:	00401545 	.word	0x00401545
  400098:	00401545 	.word	0x00401545
  40009c:	00401545 	.word	0x00401545
  4000a0:	00401545 	.word	0x00401545
  4000a4:	00401545 	.word	0x00401545
  4000a8:	00401545 	.word	0x00401545
  4000ac:	00401545 	.word	0x00401545
  4000b0:	00401545 	.word	0x00401545
  4000b4:	00401545 	.word	0x00401545
  4000b8:	00401545 	.word	0x00401545
  4000bc:	00401545 	.word	0x00401545
  4000c0:	00401545 	.word	0x00401545
  4000c4:	00401545 	.word	0x00401545
  4000c8:	00401545 	.word	0x00401545

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000440 	.word	0x20000440
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00401dc4 	.word	0x00401dc4

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000444 	.word	0x20000444
  40011c:	00401dc4 	.word	0x00401dc4
  400120:	00401dc4 	.word	0x00401dc4
  400124:	00000000 	.word	0x00000000

00400128 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400128:	b480      	push	{r7}
  40012a:	b089      	sub	sp, #36	; 0x24
  40012c:	af00      	add	r7, sp, #0
  40012e:	60f8      	str	r0, [r7, #12]
  400130:	60b9      	str	r1, [r7, #8]
  400132:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400134:	68bb      	ldr	r3, [r7, #8]
  400136:	011a      	lsls	r2, r3, #4
  400138:	687b      	ldr	r3, [r7, #4]
  40013a:	429a      	cmp	r2, r3
  40013c:	d802      	bhi.n	400144 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40013e:	2310      	movs	r3, #16
  400140:	61fb      	str	r3, [r7, #28]
  400142:	e001      	b.n	400148 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400144:	2308      	movs	r3, #8
  400146:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400148:	687b      	ldr	r3, [r7, #4]
  40014a:	00da      	lsls	r2, r3, #3
  40014c:	69fb      	ldr	r3, [r7, #28]
  40014e:	68b9      	ldr	r1, [r7, #8]
  400150:	fb01 f303 	mul.w	r3, r1, r3
  400154:	085b      	lsrs	r3, r3, #1
  400156:	441a      	add	r2, r3
  400158:	69fb      	ldr	r3, [r7, #28]
  40015a:	68b9      	ldr	r1, [r7, #8]
  40015c:	fb01 f303 	mul.w	r3, r1, r3
  400160:	fbb2 f3f3 	udiv	r3, r2, r3
  400164:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400166:	69bb      	ldr	r3, [r7, #24]
  400168:	08db      	lsrs	r3, r3, #3
  40016a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40016c:	69bb      	ldr	r3, [r7, #24]
  40016e:	f003 0307 	and.w	r3, r3, #7
  400172:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400174:	697b      	ldr	r3, [r7, #20]
  400176:	2b00      	cmp	r3, #0
  400178:	d003      	beq.n	400182 <usart_set_async_baudrate+0x5a>
  40017a:	697b      	ldr	r3, [r7, #20]
  40017c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400180:	d301      	bcc.n	400186 <usart_set_async_baudrate+0x5e>
		return 1;
  400182:	2301      	movs	r3, #1
  400184:	e00f      	b.n	4001a6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400186:	69fb      	ldr	r3, [r7, #28]
  400188:	2b08      	cmp	r3, #8
  40018a:	d105      	bne.n	400198 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40018c:	68fb      	ldr	r3, [r7, #12]
  40018e:	685b      	ldr	r3, [r3, #4]
  400190:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400194:	68fb      	ldr	r3, [r7, #12]
  400196:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400198:	693b      	ldr	r3, [r7, #16]
  40019a:	041a      	lsls	r2, r3, #16
  40019c:	697b      	ldr	r3, [r7, #20]
  40019e:	431a      	orrs	r2, r3
  4001a0:	68fb      	ldr	r3, [r7, #12]
  4001a2:	621a      	str	r2, [r3, #32]

	return 0;
  4001a4:	2300      	movs	r3, #0
}
  4001a6:	4618      	mov	r0, r3
  4001a8:	3724      	adds	r7, #36	; 0x24
  4001aa:	46bd      	mov	sp, r7
  4001ac:	bc80      	pop	{r7}
  4001ae:	4770      	bx	lr

004001b0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4001b0:	b580      	push	{r7, lr}
  4001b2:	b082      	sub	sp, #8
  4001b4:	af00      	add	r7, sp, #0
  4001b6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4001b8:	6878      	ldr	r0, [r7, #4]
  4001ba:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <usart_reset+0x48>)
  4001bc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4001be:	687b      	ldr	r3, [r7, #4]
  4001c0:	2200      	movs	r2, #0
  4001c2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4001c4:	687b      	ldr	r3, [r7, #4]
  4001c6:	2200      	movs	r2, #0
  4001c8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4001ca:	687b      	ldr	r3, [r7, #4]
  4001cc:	2200      	movs	r2, #0
  4001ce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4001d0:	6878      	ldr	r0, [r7, #4]
  4001d2:	4b0a      	ldr	r3, [pc, #40]	; (4001fc <usart_reset+0x4c>)
  4001d4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4001d6:	6878      	ldr	r0, [r7, #4]
  4001d8:	4b09      	ldr	r3, [pc, #36]	; (400200 <usart_reset+0x50>)
  4001da:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4001dc:	6878      	ldr	r0, [r7, #4]
  4001de:	4b09      	ldr	r3, [pc, #36]	; (400204 <usart_reset+0x54>)
  4001e0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4001e2:	6878      	ldr	r0, [r7, #4]
  4001e4:	4b08      	ldr	r3, [pc, #32]	; (400208 <usart_reset+0x58>)
  4001e6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4001e8:	6878      	ldr	r0, [r7, #4]
  4001ea:	4b08      	ldr	r3, [pc, #32]	; (40020c <usart_reset+0x5c>)
  4001ec:	4798      	blx	r3
#endif
}
  4001ee:	bf00      	nop
  4001f0:	3708      	adds	r7, #8
  4001f2:	46bd      	mov	sp, r7
  4001f4:	bd80      	pop	{r7, pc}
  4001f6:	bf00      	nop
  4001f8:	00400405 	.word	0x00400405
  4001fc:	004002ed 	.word	0x004002ed
  400200:	0040031d 	.word	0x0040031d
  400204:	00400369 	.word	0x00400369
  400208:	004003a1 	.word	0x004003a1
  40020c:	00400385 	.word	0x00400385

00400210 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400210:	b580      	push	{r7, lr}
  400212:	b084      	sub	sp, #16
  400214:	af00      	add	r7, sp, #0
  400216:	60f8      	str	r0, [r7, #12]
  400218:	60b9      	str	r1, [r7, #8]
  40021a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40021c:	68f8      	ldr	r0, [r7, #12]
  40021e:	4b1a      	ldr	r3, [pc, #104]	; (400288 <usart_init_rs232+0x78>)
  400220:	4798      	blx	r3

	ul_reg_val = 0;
  400222:	4b1a      	ldr	r3, [pc, #104]	; (40028c <usart_init_rs232+0x7c>)
  400224:	2200      	movs	r2, #0
  400226:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400228:	68bb      	ldr	r3, [r7, #8]
  40022a:	2b00      	cmp	r3, #0
  40022c:	d009      	beq.n	400242 <usart_init_rs232+0x32>
  40022e:	68bb      	ldr	r3, [r7, #8]
  400230:	681b      	ldr	r3, [r3, #0]
  400232:	687a      	ldr	r2, [r7, #4]
  400234:	4619      	mov	r1, r3
  400236:	68f8      	ldr	r0, [r7, #12]
  400238:	4b15      	ldr	r3, [pc, #84]	; (400290 <usart_init_rs232+0x80>)
  40023a:	4798      	blx	r3
  40023c:	4603      	mov	r3, r0
  40023e:	2b00      	cmp	r3, #0
  400240:	d001      	beq.n	400246 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400242:	2301      	movs	r3, #1
  400244:	e01b      	b.n	40027e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400246:	68bb      	ldr	r3, [r7, #8]
  400248:	685a      	ldr	r2, [r3, #4]
  40024a:	68bb      	ldr	r3, [r7, #8]
  40024c:	689b      	ldr	r3, [r3, #8]
  40024e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400250:	68bb      	ldr	r3, [r7, #8]
  400252:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400254:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400256:	68bb      	ldr	r3, [r7, #8]
  400258:	68db      	ldr	r3, [r3, #12]
  40025a:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <usart_init_rs232+0x7c>)
  40025e:	681b      	ldr	r3, [r3, #0]
  400260:	4313      	orrs	r3, r2
  400262:	4a0a      	ldr	r2, [pc, #40]	; (40028c <usart_init_rs232+0x7c>)
  400264:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400266:	4b09      	ldr	r3, [pc, #36]	; (40028c <usart_init_rs232+0x7c>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	4a08      	ldr	r2, [pc, #32]	; (40028c <usart_init_rs232+0x7c>)
  40026c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40026e:	68fb      	ldr	r3, [r7, #12]
  400270:	685a      	ldr	r2, [r3, #4]
  400272:	4b06      	ldr	r3, [pc, #24]	; (40028c <usart_init_rs232+0x7c>)
  400274:	681b      	ldr	r3, [r3, #0]
  400276:	431a      	orrs	r2, r3
  400278:	68fb      	ldr	r3, [r7, #12]
  40027a:	605a      	str	r2, [r3, #4]

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3710      	adds	r7, #16
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	004001b1 	.word	0x004001b1
  40028c:	2000045c 	.word	0x2000045c
  400290:	00400129 	.word	0x00400129

00400294 <usart_init_rs485>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400294:	b580      	push	{r7, lr}
  400296:	b084      	sub	sp, #16
  400298:	af00      	add	r7, sp, #0
  40029a:	60f8      	str	r0, [r7, #12]
  40029c:	60b9      	str	r1, [r7, #8]
  40029e:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  4002a0:	687a      	ldr	r2, [r7, #4]
  4002a2:	68b9      	ldr	r1, [r7, #8]
  4002a4:	68f8      	ldr	r0, [r7, #12]
  4002a6:	4b0a      	ldr	r3, [pc, #40]	; (4002d0 <usart_init_rs485+0x3c>)
  4002a8:	4798      	blx	r3
  4002aa:	4603      	mov	r3, r0
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	d001      	beq.n	4002b4 <usart_init_rs485+0x20>
		return 1;
  4002b0:	2301      	movs	r3, #1
  4002b2:	e008      	b.n	4002c6 <usart_init_rs485+0x32>
	}

	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  4002b4:	68fb      	ldr	r3, [r7, #12]
  4002b6:	685b      	ldr	r3, [r3, #4]
  4002b8:	f023 030f 	bic.w	r3, r3, #15
  4002bc:	f043 0201 	orr.w	r2, r3, #1
  4002c0:	68fb      	ldr	r3, [r7, #12]
  4002c2:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_RS485;

	return 0;
  4002c4:	2300      	movs	r3, #0
}
  4002c6:	4618      	mov	r0, r3
  4002c8:	3710      	adds	r7, #16
  4002ca:	46bd      	mov	sp, r7
  4002cc:	bd80      	pop	{r7, pc}
  4002ce:	bf00      	nop
  4002d0:	00400211 	.word	0x00400211

004002d4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4002d4:	b480      	push	{r7}
  4002d6:	b083      	sub	sp, #12
  4002d8:	af00      	add	r7, sp, #0
  4002da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4002dc:	687b      	ldr	r3, [r7, #4]
  4002de:	2240      	movs	r2, #64	; 0x40
  4002e0:	601a      	str	r2, [r3, #0]
}
  4002e2:	bf00      	nop
  4002e4:	370c      	adds	r7, #12
  4002e6:	46bd      	mov	sp, r7
  4002e8:	bc80      	pop	{r7}
  4002ea:	4770      	bx	lr

004002ec <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4002ec:	b480      	push	{r7}
  4002ee:	b083      	sub	sp, #12
  4002f0:	af00      	add	r7, sp, #0
  4002f2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4002f4:	687b      	ldr	r3, [r7, #4]
  4002f6:	2288      	movs	r2, #136	; 0x88
  4002f8:	601a      	str	r2, [r3, #0]
}
  4002fa:	bf00      	nop
  4002fc:	370c      	adds	r7, #12
  4002fe:	46bd      	mov	sp, r7
  400300:	bc80      	pop	{r7}
  400302:	4770      	bx	lr

00400304 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400304:	b480      	push	{r7}
  400306:	b083      	sub	sp, #12
  400308:	af00      	add	r7, sp, #0
  40030a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  40030c:	687b      	ldr	r3, [r7, #4]
  40030e:	2210      	movs	r2, #16
  400310:	601a      	str	r2, [r3, #0]
}
  400312:	bf00      	nop
  400314:	370c      	adds	r7, #12
  400316:	46bd      	mov	sp, r7
  400318:	bc80      	pop	{r7}
  40031a:	4770      	bx	lr

0040031c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40031c:	b480      	push	{r7}
  40031e:	b083      	sub	sp, #12
  400320:	af00      	add	r7, sp, #0
  400322:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400324:	687b      	ldr	r3, [r7, #4]
  400326:	2224      	movs	r2, #36	; 0x24
  400328:	601a      	str	r2, [r3, #0]
}
  40032a:	bf00      	nop
  40032c:	370c      	adds	r7, #12
  40032e:	46bd      	mov	sp, r7
  400330:	bc80      	pop	{r7}
  400332:	4770      	bx	lr

00400334 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400334:	b480      	push	{r7}
  400336:	b083      	sub	sp, #12
  400338:	af00      	add	r7, sp, #0
  40033a:	6078      	str	r0, [r7, #4]
  40033c:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40033e:	687b      	ldr	r3, [r7, #4]
  400340:	683a      	ldr	r2, [r7, #0]
  400342:	60da      	str	r2, [r3, #12]
}
  400344:	bf00      	nop
  400346:	370c      	adds	r7, #12
  400348:	46bd      	mov	sp, r7
  40034a:	bc80      	pop	{r7}
  40034c:	4770      	bx	lr
  40034e:	bf00      	nop

00400350 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400350:	b480      	push	{r7}
  400352:	b083      	sub	sp, #12
  400354:	af00      	add	r7, sp, #0
  400356:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	695b      	ldr	r3, [r3, #20]
}
  40035c:	4618      	mov	r0, r3
  40035e:	370c      	adds	r7, #12
  400360:	46bd      	mov	sp, r7
  400362:	bc80      	pop	{r7}
  400364:	4770      	bx	lr
  400366:	bf00      	nop

00400368 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400368:	b480      	push	{r7}
  40036a:	b083      	sub	sp, #12
  40036c:	af00      	add	r7, sp, #0
  40036e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400370:	687b      	ldr	r3, [r7, #4]
  400372:	f44f 7280 	mov.w	r2, #256	; 0x100
  400376:	601a      	str	r2, [r3, #0]
}
  400378:	bf00      	nop
  40037a:	370c      	adds	r7, #12
  40037c:	46bd      	mov	sp, r7
  40037e:	bc80      	pop	{r7}
  400380:	4770      	bx	lr
  400382:	bf00      	nop

00400384 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400384:	b480      	push	{r7}
  400386:	b083      	sub	sp, #12
  400388:	af00      	add	r7, sp, #0
  40038a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  40038c:	687b      	ldr	r3, [r7, #4]
  40038e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400392:	601a      	str	r2, [r3, #0]
}
  400394:	bf00      	nop
  400396:	370c      	adds	r7, #12
  400398:	46bd      	mov	sp, r7
  40039a:	bc80      	pop	{r7}
  40039c:	4770      	bx	lr
  40039e:	bf00      	nop

004003a0 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4003a0:	b480      	push	{r7}
  4003a2:	b083      	sub	sp, #12
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4003a8:	687b      	ldr	r3, [r7, #4]
  4003aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4003ae:	601a      	str	r2, [r3, #0]
}
  4003b0:	bf00      	nop
  4003b2:	370c      	adds	r7, #12
  4003b4:	46bd      	mov	sp, r7
  4003b6:	bc80      	pop	{r7}
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop

004003bc <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  4003bc:	b480      	push	{r7}
  4003be:	b085      	sub	sp, #20
  4003c0:	af00      	add	r7, sp, #0
  4003c2:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  4003c4:	2300      	movs	r3, #0
  4003c6:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  4003c8:	687b      	ldr	r3, [r7, #4]
  4003ca:	4a0a      	ldr	r2, [pc, #40]	; (4003f4 <usart_get_pdc_base+0x38>)
  4003cc:	4293      	cmp	r3, r2
  4003ce:	d103      	bne.n	4003d8 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  4003d0:	4b09      	ldr	r3, [pc, #36]	; (4003f8 <usart_get_pdc_base+0x3c>)
  4003d2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4003d4:	68fb      	ldr	r3, [r7, #12]
  4003d6:	e008      	b.n	4003ea <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  4003d8:	687b      	ldr	r3, [r7, #4]
  4003da:	4a08      	ldr	r2, [pc, #32]	; (4003fc <usart_get_pdc_base+0x40>)
  4003dc:	4293      	cmp	r3, r2
  4003de:	d103      	bne.n	4003e8 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  4003e0:	4b07      	ldr	r3, [pc, #28]	; (400400 <usart_get_pdc_base+0x44>)
  4003e2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4003e4:	68fb      	ldr	r3, [r7, #12]
  4003e6:	e000      	b.n	4003ea <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  4003e8:	68fb      	ldr	r3, [r7, #12]
}
  4003ea:	4618      	mov	r0, r3
  4003ec:	3714      	adds	r7, #20
  4003ee:	46bd      	mov	sp, r7
  4003f0:	bc80      	pop	{r7}
  4003f2:	4770      	bx	lr
  4003f4:	40024000 	.word	0x40024000
  4003f8:	40024100 	.word	0x40024100
  4003fc:	40028000 	.word	0x40028000
  400400:	40028100 	.word	0x40028100

00400404 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400404:	b480      	push	{r7}
  400406:	b083      	sub	sp, #12
  400408:	af00      	add	r7, sp, #0
  40040a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40040c:	687b      	ldr	r3, [r7, #4]
  40040e:	4a04      	ldr	r2, [pc, #16]	; (400420 <usart_disable_writeprotect+0x1c>)
  400410:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400414:	bf00      	nop
  400416:	370c      	adds	r7, #12
  400418:	46bd      	mov	sp, r7
  40041a:	bc80      	pop	{r7}
  40041c:	4770      	bx	lr
  40041e:	bf00      	nop
  400420:	55534100 	.word	0x55534100

00400424 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400424:	b480      	push	{r7}
  400426:	b083      	sub	sp, #12
  400428:	af00      	add	r7, sp, #0
  40042a:	4603      	mov	r3, r0
  40042c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40042e:	4909      	ldr	r1, [pc, #36]	; (400454 <NVIC_ClearPendingIRQ+0x30>)
  400430:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400434:	095b      	lsrs	r3, r3, #5
  400436:	79fa      	ldrb	r2, [r7, #7]
  400438:	f002 021f 	and.w	r2, r2, #31
  40043c:	2001      	movs	r0, #1
  40043e:	fa00 f202 	lsl.w	r2, r0, r2
  400442:	3360      	adds	r3, #96	; 0x60
  400444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400448:	bf00      	nop
  40044a:	370c      	adds	r7, #12
  40044c:	46bd      	mov	sp, r7
  40044e:	bc80      	pop	{r7}
  400450:	4770      	bx	lr
  400452:	bf00      	nop
  400454:	e000e100 	.word	0xe000e100

00400458 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400458:	b480      	push	{r7}
  40045a:	b083      	sub	sp, #12
  40045c:	af00      	add	r7, sp, #0
  40045e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400460:	687b      	ldr	r3, [r7, #4]
  400462:	2b07      	cmp	r3, #7
  400464:	d825      	bhi.n	4004b2 <osc_get_rate+0x5a>
  400466:	a201      	add	r2, pc, #4	; (adr r2, 40046c <osc_get_rate+0x14>)
  400468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40046c:	0040048d 	.word	0x0040048d
  400470:	00400493 	.word	0x00400493
  400474:	00400499 	.word	0x00400499
  400478:	0040049f 	.word	0x0040049f
  40047c:	004004a3 	.word	0x004004a3
  400480:	004004a7 	.word	0x004004a7
  400484:	004004ab 	.word	0x004004ab
  400488:	004004af 	.word	0x004004af
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40048c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400490:	e010      	b.n	4004b4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400496:	e00d      	b.n	4004b4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40049c:	e00a      	b.n	4004b4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40049e:	4b08      	ldr	r3, [pc, #32]	; (4004c0 <osc_get_rate+0x68>)
  4004a0:	e008      	b.n	4004b4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4004a2:	4b08      	ldr	r3, [pc, #32]	; (4004c4 <osc_get_rate+0x6c>)
  4004a4:	e006      	b.n	4004b4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4004a6:	4b08      	ldr	r3, [pc, #32]	; (4004c8 <osc_get_rate+0x70>)
  4004a8:	e004      	b.n	4004b4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4004aa:	4b07      	ldr	r3, [pc, #28]	; (4004c8 <osc_get_rate+0x70>)
  4004ac:	e002      	b.n	4004b4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4004ae:	4b06      	ldr	r3, [pc, #24]	; (4004c8 <osc_get_rate+0x70>)
  4004b0:	e000      	b.n	4004b4 <osc_get_rate+0x5c>
	}

	return 0;
  4004b2:	2300      	movs	r3, #0
}
  4004b4:	4618      	mov	r0, r3
  4004b6:	370c      	adds	r7, #12
  4004b8:	46bd      	mov	sp, r7
  4004ba:	bc80      	pop	{r7}
  4004bc:	4770      	bx	lr
  4004be:	bf00      	nop
  4004c0:	003d0900 	.word	0x003d0900
  4004c4:	007a1200 	.word	0x007a1200
  4004c8:	00b71b00 	.word	0x00b71b00

004004cc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4004cc:	b580      	push	{r7, lr}
  4004ce:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4004d0:	2003      	movs	r0, #3
  4004d2:	4b04      	ldr	r3, [pc, #16]	; (4004e4 <sysclk_get_main_hz+0x18>)
  4004d4:	4798      	blx	r3
  4004d6:	4602      	mov	r2, r0
  4004d8:	4613      	mov	r3, r2
  4004da:	011b      	lsls	r3, r3, #4
  4004dc:	1a9b      	subs	r3, r3, r2
  4004de:	005b      	lsls	r3, r3, #1

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4004e0:	4618      	mov	r0, r3
  4004e2:	bd80      	pop	{r7, pc}
  4004e4:	00400459 	.word	0x00400459

004004e8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4004e8:	b580      	push	{r7, lr}
  4004ea:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4004ec:	4b02      	ldr	r3, [pc, #8]	; (4004f8 <sysclk_get_peripheral_hz+0x10>)
  4004ee:	4798      	blx	r3
  4004f0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004f2:	4618      	mov	r0, r3
  4004f4:	bd80      	pop	{r7, pc}
  4004f6:	bf00      	nop
  4004f8:	004004cd 	.word	0x004004cd

004004fc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4004fc:	b580      	push	{r7, lr}
  4004fe:	b082      	sub	sp, #8
  400500:	af00      	add	r7, sp, #0
  400502:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400504:	6878      	ldr	r0, [r7, #4]
  400506:	4b03      	ldr	r3, [pc, #12]	; (400514 <sysclk_enable_peripheral_clock+0x18>)
  400508:	4798      	blx	r3
}
  40050a:	bf00      	nop
  40050c:	3708      	adds	r7, #8
  40050e:	46bd      	mov	sp, r7
  400510:	bd80      	pop	{r7, pc}
  400512:	bf00      	nop
  400514:	004013dd 	.word	0x004013dd

00400518 <InitRs485Pdc>:

 volatile uint8_t txDone = 1;
 volatile uint8_t rxDone = 1;

 void InitRs485Pdc(void)
 {
  400518:	b5b0      	push	{r4, r5, r7, lr}
  40051a:	b086      	sub	sp, #24
  40051c:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  40051e:	4b18      	ldr	r3, [pc, #96]	; (400580 <InitRs485Pdc+0x68>)
  400520:	463c      	mov	r4, r7
  400522:	461d      	mov	r5, r3
  400524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400528:	e895 0003 	ldmia.w	r5, {r0, r1}
  40052c:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(RS485_USART_ID);
  400530:	200f      	movs	r0, #15
  400532:	4b14      	ldr	r3, [pc, #80]	; (400584 <InitRs485Pdc+0x6c>)
  400534:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs485(RS485_USART, &usart_console_settings,
  400536:	4b14      	ldr	r3, [pc, #80]	; (400588 <InitRs485Pdc+0x70>)
  400538:	4798      	blx	r3
  40053a:	4602      	mov	r2, r0
  40053c:	463b      	mov	r3, r7
  40053e:	4619      	mov	r1, r3
  400540:	4812      	ldr	r0, [pc, #72]	; (40058c <InitRs485Pdc+0x74>)
  400542:	4b13      	ldr	r3, [pc, #76]	; (400590 <InitRs485Pdc+0x78>)
  400544:	4798      	blx	r3
	 sysclk_get_peripheral_hz());

	 /* Disable all the interrupts. */
	 usart_disable_interrupt(RS485_USART, 0xFFFFFFFF);
  400546:	f04f 31ff 	mov.w	r1, #4294967295
  40054a:	4810      	ldr	r0, [pc, #64]	; (40058c <InitRs485Pdc+0x74>)
  40054c:	4b11      	ldr	r3, [pc, #68]	; (400594 <InitRs485Pdc+0x7c>)
  40054e:	4798      	blx	r3

	 /* Enable TX & RX function. */
	 usart_enable_tx(RS485_USART);
  400550:	480e      	ldr	r0, [pc, #56]	; (40058c <InitRs485Pdc+0x74>)
  400552:	4b11      	ldr	r3, [pc, #68]	; (400598 <InitRs485Pdc+0x80>)
  400554:	4798      	blx	r3
	 usart_enable_rx(RS485_USART);
  400556:	480d      	ldr	r0, [pc, #52]	; (40058c <InitRs485Pdc+0x74>)
  400558:	4b10      	ldr	r3, [pc, #64]	; (40059c <InitRs485Pdc+0x84>)
  40055a:	4798      	blx	r3

	 /* Configure and enable interrupt of USART. */
	 //NVIC_EnableIRQ(RS485_USART_IRQn);
 
	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 rs485PdcBase = usart_get_pdc_base(RS485_USART);
  40055c:	480b      	ldr	r0, [pc, #44]	; (40058c <InitRs485Pdc+0x74>)
  40055e:	4b10      	ldr	r3, [pc, #64]	; (4005a0 <InitRs485Pdc+0x88>)
  400560:	4798      	blx	r3
  400562:	4602      	mov	r2, r0
  400564:	4b0f      	ldr	r3, [pc, #60]	; (4005a4 <InitRs485Pdc+0x8c>)
  400566:	601a      	str	r2, [r3, #0]
	 pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400568:	4b0e      	ldr	r3, [pc, #56]	; (4005a4 <InitRs485Pdc+0x8c>)
  40056a:	681b      	ldr	r3, [r3, #0]
  40056c:	f240 1101 	movw	r1, #257	; 0x101
  400570:	4618      	mov	r0, r3
  400572:	4b0d      	ldr	r3, [pc, #52]	; (4005a8 <InitRs485Pdc+0x90>)
  400574:	4798      	blx	r3

	 /* Enable Rx & Tx interrupts */
	 //usart_enable_interrupt(RS485_USART, US_IER_ENDRX | US_IER_ENDTX);
 }
  400576:	bf00      	nop
  400578:	3718      	adds	r7, #24
  40057a:	46bd      	mov	sp, r7
  40057c:	bdb0      	pop	{r4, r5, r7, pc}
  40057e:	bf00      	nop
  400580:	00401d78 	.word	0x00401d78
  400584:	004004fd 	.word	0x004004fd
  400588:	004004e9 	.word	0x004004e9
  40058c:	40028000 	.word	0x40028000
  400590:	00400295 	.word	0x00400295
  400594:	00400335 	.word	0x00400335
  400598:	004002d5 	.word	0x004002d5
  40059c:	00400305 	.word	0x00400305
  4005a0:	004003bd 	.word	0x004003bd
  4005a4:	200004d4 	.word	0x200004d4
  4005a8:	00400b95 	.word	0x00400b95

004005ac <USART1_Handler>:

 /* USART Interrupt Handler */
 void RS485_USART_Handler(void)
 {
  4005ac:	b580      	push	{r7, lr}
  4005ae:	b082      	sub	sp, #8
  4005b0:	af00      	add	r7, sp, #0
	 uint32_t ul_status;

	 NVIC_ClearPendingIRQ(RS485_USART_IRQn);
  4005b2:	200f      	movs	r0, #15
  4005b4:	4b0f      	ldr	r3, [pc, #60]	; (4005f4 <USART1_Handler+0x48>)
  4005b6:	4798      	blx	r3
	 
	 pdc_read_status(rs485PdcBase);
  4005b8:	4b0f      	ldr	r3, [pc, #60]	; (4005f8 <USART1_Handler+0x4c>)
  4005ba:	681b      	ldr	r3, [r3, #0]
  4005bc:	4618      	mov	r0, r3
  4005be:	4b0f      	ldr	r3, [pc, #60]	; (4005fc <USART1_Handler+0x50>)
  4005c0:	4798      	blx	r3
	 
	 /* Read USART status. */
	 ul_status = usart_get_status(RS485_USART);
  4005c2:	480f      	ldr	r0, [pc, #60]	; (400600 <USART1_Handler+0x54>)
  4005c4:	4b0f      	ldr	r3, [pc, #60]	; (400604 <USART1_Handler+0x58>)
  4005c6:	4798      	blx	r3
  4005c8:	6078      	str	r0, [r7, #4]

	 if(ul_status & US_CSR_ENDRX)
  4005ca:	687b      	ldr	r3, [r7, #4]
  4005cc:	f003 0308 	and.w	r3, r3, #8
  4005d0:	2b00      	cmp	r3, #0
  4005d2:	d003      	beq.n	4005dc <USART1_Handler+0x30>
	 {
		rxDone = 1;
  4005d4:	4b0c      	ldr	r3, [pc, #48]	; (400608 <USART1_Handler+0x5c>)
  4005d6:	2201      	movs	r2, #1
  4005d8:	701a      	strb	r2, [r3, #0]
	 }
	 else if(ul_status & US_CSR_ENDTX)
	 {
		txDone = 1;
	 }
}
  4005da:	e007      	b.n	4005ec <USART1_Handler+0x40>

	 if(ul_status & US_CSR_ENDRX)
	 {
		rxDone = 1;
	 }
	 else if(ul_status & US_CSR_ENDTX)
  4005dc:	687b      	ldr	r3, [r7, #4]
  4005de:	f003 0310 	and.w	r3, r3, #16
  4005e2:	2b00      	cmp	r3, #0
  4005e4:	d002      	beq.n	4005ec <USART1_Handler+0x40>
	 {
		txDone = 1;
  4005e6:	4b09      	ldr	r3, [pc, #36]	; (40060c <USART1_Handler+0x60>)
  4005e8:	2201      	movs	r2, #1
  4005ea:	701a      	strb	r2, [r3, #0]
	 }
}
  4005ec:	bf00      	nop
  4005ee:	3708      	adds	r7, #8
  4005f0:	46bd      	mov	sp, r7
  4005f2:	bd80      	pop	{r7, pc}
  4005f4:	00400425 	.word	0x00400425
  4005f8:	200004d4 	.word	0x200004d4
  4005fc:	00400bb5 	.word	0x00400bb5
  400600:	40028000 	.word	0x40028000
  400604:	00400351 	.word	0x00400351
  400608:	2000000d 	.word	0x2000000d
  40060c:	2000000c 	.word	0x2000000c

00400610 <Rs485PdcStartTx>:

 /* Set pointers and start transmitting */
 void Rs485PdcStartTx(uint32_t *buff, uint16_t nBytes)
 {
  400610:	b580      	push	{r7, lr}
  400612:	b082      	sub	sp, #8
  400614:	af00      	add	r7, sp, #0
  400616:	6078      	str	r0, [r7, #4]
  400618:	460b      	mov	r3, r1
  40061a:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = (uint32_t) buff;
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	4a09      	ldr	r2, [pc, #36]	; (400644 <Rs485PdcStartTx+0x34>)
  400620:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  400622:	887b      	ldrh	r3, [r7, #2]
  400624:	4a07      	ldr	r2, [pc, #28]	; (400644 <Rs485PdcStartTx+0x34>)
  400626:	6053      	str	r3, [r2, #4]
	pdc_tx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  400628:	4b07      	ldr	r3, [pc, #28]	; (400648 <Rs485PdcStartTx+0x38>)
  40062a:	681b      	ldr	r3, [r3, #0]
  40062c:	2200      	movs	r2, #0
  40062e:	4905      	ldr	r1, [pc, #20]	; (400644 <Rs485PdcStartTx+0x34>)
  400630:	4618      	mov	r0, r3
  400632:	4b06      	ldr	r3, [pc, #24]	; (40064c <Rs485PdcStartTx+0x3c>)
  400634:	4798      	blx	r3
	txDone = 0;
  400636:	4b06      	ldr	r3, [pc, #24]	; (400650 <Rs485PdcStartTx+0x40>)
  400638:	2200      	movs	r2, #0
  40063a:	701a      	strb	r2, [r3, #0]
 }
  40063c:	bf00      	nop
  40063e:	3708      	adds	r7, #8
  400640:	46bd      	mov	sp, r7
  400642:	bd80      	pop	{r7, pc}
  400644:	200004d8 	.word	0x200004d8
  400648:	200004d4 	.word	0x200004d4
  40064c:	00400b0d 	.word	0x00400b0d
  400650:	2000000c 	.word	0x2000000c

00400654 <Rs485PdcStartRx>:

 /* Set pointers and start receiving */
 void Rs485PdcStartRx(uint32_t *buff, uint16_t nBytes)
 {
  400654:	b580      	push	{r7, lr}
  400656:	b082      	sub	sp, #8
  400658:	af00      	add	r7, sp, #0
  40065a:	6078      	str	r0, [r7, #4]
  40065c:	460b      	mov	r3, r1
  40065e:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = (uint32_t) buff;
  400660:	687b      	ldr	r3, [r7, #4]
  400662:	4a09      	ldr	r2, [pc, #36]	; (400688 <Rs485PdcStartRx+0x34>)
  400664:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  400666:	887b      	ldrh	r3, [r7, #2]
  400668:	4a07      	ldr	r2, [pc, #28]	; (400688 <Rs485PdcStartRx+0x34>)
  40066a:	6053      	str	r3, [r2, #4]
	pdc_rx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  40066c:	4b07      	ldr	r3, [pc, #28]	; (40068c <Rs485PdcStartRx+0x38>)
  40066e:	681b      	ldr	r3, [r3, #0]
  400670:	2200      	movs	r2, #0
  400672:	4905      	ldr	r1, [pc, #20]	; (400688 <Rs485PdcStartRx+0x34>)
  400674:	4618      	mov	r0, r3
  400676:	4b06      	ldr	r3, [pc, #24]	; (400690 <Rs485PdcStartRx+0x3c>)
  400678:	4798      	blx	r3
	rxDone = 0;
  40067a:	4b06      	ldr	r3, [pc, #24]	; (400694 <Rs485PdcStartRx+0x40>)
  40067c:	2200      	movs	r2, #0
  40067e:	701a      	strb	r2, [r3, #0]
 }
  400680:	bf00      	nop
  400682:	3708      	adds	r7, #8
  400684:	46bd      	mov	sp, r7
  400686:	bd80      	pop	{r7, pc}
  400688:	200004d8 	.word	0x200004d8
  40068c:	200004d4 	.word	0x200004d4
  400690:	00400b51 	.word	0x00400b51
  400694:	2000000d 	.word	0x2000000d

00400698 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400698:	b580      	push	{r7, lr}
  40069a:	b084      	sub	sp, #16
  40069c:	af00      	add	r7, sp, #0
  40069e:	6078      	str	r0, [r7, #4]
  4006a0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4006a2:	6878      	ldr	r0, [r7, #4]
  4006a4:	4b2c      	ldr	r3, [pc, #176]	; (400758 <pio_handler_process+0xc0>)
  4006a6:	4798      	blx	r3
  4006a8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4006aa:	6878      	ldr	r0, [r7, #4]
  4006ac:	4b2b      	ldr	r3, [pc, #172]	; (40075c <pio_handler_process+0xc4>)
  4006ae:	4798      	blx	r3
  4006b0:	4602      	mov	r2, r0
  4006b2:	68fb      	ldr	r3, [r7, #12]
  4006b4:	4013      	ands	r3, r2
  4006b6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4006b8:	68fb      	ldr	r3, [r7, #12]
  4006ba:	2b00      	cmp	r3, #0
  4006bc:	d03c      	beq.n	400738 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4006be:	2300      	movs	r3, #0
  4006c0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4006c2:	e034      	b.n	40072e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4006c4:	4a26      	ldr	r2, [pc, #152]	; (400760 <pio_handler_process+0xc8>)
  4006c6:	68bb      	ldr	r3, [r7, #8]
  4006c8:	011b      	lsls	r3, r3, #4
  4006ca:	4413      	add	r3, r2
  4006cc:	681a      	ldr	r2, [r3, #0]
  4006ce:	683b      	ldr	r3, [r7, #0]
  4006d0:	429a      	cmp	r2, r3
  4006d2:	d126      	bne.n	400722 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4006d4:	4a22      	ldr	r2, [pc, #136]	; (400760 <pio_handler_process+0xc8>)
  4006d6:	68bb      	ldr	r3, [r7, #8]
  4006d8:	011b      	lsls	r3, r3, #4
  4006da:	4413      	add	r3, r2
  4006dc:	3304      	adds	r3, #4
  4006de:	681a      	ldr	r2, [r3, #0]
  4006e0:	68fb      	ldr	r3, [r7, #12]
  4006e2:	4013      	ands	r3, r2
  4006e4:	2b00      	cmp	r3, #0
  4006e6:	d01c      	beq.n	400722 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4006e8:	4a1d      	ldr	r2, [pc, #116]	; (400760 <pio_handler_process+0xc8>)
  4006ea:	68bb      	ldr	r3, [r7, #8]
  4006ec:	011b      	lsls	r3, r3, #4
  4006ee:	4413      	add	r3, r2
  4006f0:	330c      	adds	r3, #12
  4006f2:	681b      	ldr	r3, [r3, #0]
  4006f4:	491a      	ldr	r1, [pc, #104]	; (400760 <pio_handler_process+0xc8>)
  4006f6:	68ba      	ldr	r2, [r7, #8]
  4006f8:	0112      	lsls	r2, r2, #4
  4006fa:	440a      	add	r2, r1
  4006fc:	6810      	ldr	r0, [r2, #0]
  4006fe:	4918      	ldr	r1, [pc, #96]	; (400760 <pio_handler_process+0xc8>)
  400700:	68ba      	ldr	r2, [r7, #8]
  400702:	0112      	lsls	r2, r2, #4
  400704:	440a      	add	r2, r1
  400706:	3204      	adds	r2, #4
  400708:	6812      	ldr	r2, [r2, #0]
  40070a:	4611      	mov	r1, r2
  40070c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40070e:	4a14      	ldr	r2, [pc, #80]	; (400760 <pio_handler_process+0xc8>)
  400710:	68bb      	ldr	r3, [r7, #8]
  400712:	011b      	lsls	r3, r3, #4
  400714:	4413      	add	r3, r2
  400716:	3304      	adds	r3, #4
  400718:	681b      	ldr	r3, [r3, #0]
  40071a:	43db      	mvns	r3, r3
  40071c:	68fa      	ldr	r2, [r7, #12]
  40071e:	4013      	ands	r3, r2
  400720:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400722:	68bb      	ldr	r3, [r7, #8]
  400724:	3301      	adds	r3, #1
  400726:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400728:	68bb      	ldr	r3, [r7, #8]
  40072a:	2b06      	cmp	r3, #6
  40072c:	d803      	bhi.n	400736 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40072e:	68fb      	ldr	r3, [r7, #12]
  400730:	2b00      	cmp	r3, #0
  400732:	d1c7      	bne.n	4006c4 <pio_handler_process+0x2c>
  400734:	e000      	b.n	400738 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400736:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400738:	4b0a      	ldr	r3, [pc, #40]	; (400764 <pio_handler_process+0xcc>)
  40073a:	681b      	ldr	r3, [r3, #0]
  40073c:	2b00      	cmp	r3, #0
  40073e:	d007      	beq.n	400750 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400740:	4b09      	ldr	r3, [pc, #36]	; (400768 <pio_handler_process+0xd0>)
  400742:	681b      	ldr	r3, [r3, #0]
  400744:	2b00      	cmp	r3, #0
  400746:	d003      	beq.n	400750 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400748:	4b07      	ldr	r3, [pc, #28]	; (400768 <pio_handler_process+0xd0>)
  40074a:	681b      	ldr	r3, [r3, #0]
  40074c:	6878      	ldr	r0, [r7, #4]
  40074e:	4798      	blx	r3
		}
	}
#endif
}
  400750:	bf00      	nop
  400752:	3710      	adds	r7, #16
  400754:	46bd      	mov	sp, r7
  400756:	bd80      	pop	{r7, pc}
  400758:	00400e09 	.word	0x00400e09
  40075c:	00400e21 	.word	0x00400e21
  400760:	20000460 	.word	0x20000460
  400764:	200004e0 	.word	0x200004e0
  400768:	200004d0 	.word	0x200004d0

0040076c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40076c:	b580      	push	{r7, lr}
  40076e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400770:	210b      	movs	r1, #11
  400772:	4802      	ldr	r0, [pc, #8]	; (40077c <PIOA_Handler+0x10>)
  400774:	4b02      	ldr	r3, [pc, #8]	; (400780 <PIOA_Handler+0x14>)
  400776:	4798      	blx	r3
}
  400778:	bf00      	nop
  40077a:	bd80      	pop	{r7, pc}
  40077c:	400e0e00 	.word	0x400e0e00
  400780:	00400699 	.word	0x00400699

00400784 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400784:	b580      	push	{r7, lr}
  400786:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400788:	210c      	movs	r1, #12
  40078a:	4802      	ldr	r0, [pc, #8]	; (400794 <PIOB_Handler+0x10>)
  40078c:	4b02      	ldr	r3, [pc, #8]	; (400798 <PIOB_Handler+0x14>)
  40078e:	4798      	blx	r3
}
  400790:	bf00      	nop
  400792:	bd80      	pop	{r7, pc}
  400794:	400e1000 	.word	0x400e1000
  400798:	00400699 	.word	0x00400699

0040079c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40079c:	b580      	push	{r7, lr}
  40079e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4007a0:	210d      	movs	r1, #13
  4007a2:	4802      	ldr	r0, [pc, #8]	; (4007ac <PIOC_Handler+0x10>)
  4007a4:	4b02      	ldr	r3, [pc, #8]	; (4007b0 <PIOC_Handler+0x14>)
  4007a6:	4798      	blx	r3
}
  4007a8:	bf00      	nop
  4007aa:	bd80      	pop	{r7, pc}
  4007ac:	400e1200 	.word	0x400e1200
  4007b0:	00400699 	.word	0x00400699

004007b4 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4007b4:	b580      	push	{r7, lr}
  4007b6:	b082      	sub	sp, #8
  4007b8:	af00      	add	r7, sp, #0
  4007ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4007bc:	687b      	ldr	r3, [r7, #4]
  4007be:	2b07      	cmp	r3, #7
  4007c0:	d831      	bhi.n	400826 <osc_enable+0x72>
  4007c2:	a201      	add	r2, pc, #4	; (adr r2, 4007c8 <osc_enable+0x14>)
  4007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4007c8:	00400825 	.word	0x00400825
  4007cc:	004007e9 	.word	0x004007e9
  4007d0:	004007f1 	.word	0x004007f1
  4007d4:	004007f9 	.word	0x004007f9
  4007d8:	00400801 	.word	0x00400801
  4007dc:	00400809 	.word	0x00400809
  4007e0:	00400811 	.word	0x00400811
  4007e4:	0040081b 	.word	0x0040081b
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4007e8:	2000      	movs	r0, #0
  4007ea:	4b11      	ldr	r3, [pc, #68]	; (400830 <osc_enable+0x7c>)
  4007ec:	4798      	blx	r3
		break;
  4007ee:	e01a      	b.n	400826 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4007f0:	2001      	movs	r0, #1
  4007f2:	4b0f      	ldr	r3, [pc, #60]	; (400830 <osc_enable+0x7c>)
  4007f4:	4798      	blx	r3
		break;
  4007f6:	e016      	b.n	400826 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4007f8:	2000      	movs	r0, #0
  4007fa:	4b0e      	ldr	r3, [pc, #56]	; (400834 <osc_enable+0x80>)
  4007fc:	4798      	blx	r3
		break;
  4007fe:	e012      	b.n	400826 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400800:	2010      	movs	r0, #16
  400802:	4b0c      	ldr	r3, [pc, #48]	; (400834 <osc_enable+0x80>)
  400804:	4798      	blx	r3
		break;
  400806:	e00e      	b.n	400826 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400808:	2020      	movs	r0, #32
  40080a:	4b0a      	ldr	r3, [pc, #40]	; (400834 <osc_enable+0x80>)
  40080c:	4798      	blx	r3
		break;
  40080e:	e00a      	b.n	400826 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400810:	213e      	movs	r1, #62	; 0x3e
  400812:	2000      	movs	r0, #0
  400814:	4b08      	ldr	r3, [pc, #32]	; (400838 <osc_enable+0x84>)
  400816:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400818:	e005      	b.n	400826 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40081a:	213e      	movs	r1, #62	; 0x3e
  40081c:	2001      	movs	r0, #1
  40081e:	4b06      	ldr	r3, [pc, #24]	; (400838 <osc_enable+0x84>)
  400820:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400822:	e000      	b.n	400826 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  400824:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  400826:	bf00      	nop
  400828:	3708      	adds	r7, #8
  40082a:	46bd      	mov	sp, r7
  40082c:	bd80      	pop	{r7, pc}
  40082e:	bf00      	nop
  400830:	00401211 	.word	0x00401211
  400834:	0040127d 	.word	0x0040127d
  400838:	004012ed 	.word	0x004012ed

0040083c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40083c:	b580      	push	{r7, lr}
  40083e:	b082      	sub	sp, #8
  400840:	af00      	add	r7, sp, #0
  400842:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400844:	687b      	ldr	r3, [r7, #4]
  400846:	2b07      	cmp	r3, #7
  400848:	d826      	bhi.n	400898 <osc_is_ready+0x5c>
  40084a:	a201      	add	r2, pc, #4	; (adr r2, 400850 <osc_is_ready+0x14>)
  40084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400850:	00400871 	.word	0x00400871
  400854:	00400875 	.word	0x00400875
  400858:	00400875 	.word	0x00400875
  40085c:	00400887 	.word	0x00400887
  400860:	00400887 	.word	0x00400887
  400864:	00400887 	.word	0x00400887
  400868:	00400887 	.word	0x00400887
  40086c:	00400887 	.word	0x00400887
	case OSC_SLCK_32K_RC:
		return 1;
  400870:	2301      	movs	r3, #1
  400872:	e012      	b.n	40089a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400874:	4b0b      	ldr	r3, [pc, #44]	; (4008a4 <osc_is_ready+0x68>)
  400876:	4798      	blx	r3
  400878:	4603      	mov	r3, r0
  40087a:	2b00      	cmp	r3, #0
  40087c:	bf14      	ite	ne
  40087e:	2301      	movne	r3, #1
  400880:	2300      	moveq	r3, #0
  400882:	b2db      	uxtb	r3, r3
  400884:	e009      	b.n	40089a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400886:	4b08      	ldr	r3, [pc, #32]	; (4008a8 <osc_is_ready+0x6c>)
  400888:	4798      	blx	r3
  40088a:	4603      	mov	r3, r0
  40088c:	2b00      	cmp	r3, #0
  40088e:	bf14      	ite	ne
  400890:	2301      	movne	r3, #1
  400892:	2300      	moveq	r3, #0
  400894:	b2db      	uxtb	r3, r3
  400896:	e000      	b.n	40089a <osc_is_ready+0x5e>
	}

	return 0;
  400898:	2300      	movs	r3, #0
}
  40089a:	4618      	mov	r0, r3
  40089c:	3708      	adds	r7, #8
  40089e:	46bd      	mov	sp, r7
  4008a0:	bd80      	pop	{r7, pc}
  4008a2:	bf00      	nop
  4008a4:	00401249 	.word	0x00401249
  4008a8:	00401365 	.word	0x00401365

004008ac <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b083      	sub	sp, #12
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4008b4:	687b      	ldr	r3, [r7, #4]
  4008b6:	2b07      	cmp	r3, #7
  4008b8:	d825      	bhi.n	400906 <osc_get_rate+0x5a>
  4008ba:	a201      	add	r2, pc, #4	; (adr r2, 4008c0 <osc_get_rate+0x14>)
  4008bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4008c0:	004008e1 	.word	0x004008e1
  4008c4:	004008e7 	.word	0x004008e7
  4008c8:	004008ed 	.word	0x004008ed
  4008cc:	004008f3 	.word	0x004008f3
  4008d0:	004008f7 	.word	0x004008f7
  4008d4:	004008fb 	.word	0x004008fb
  4008d8:	004008ff 	.word	0x004008ff
  4008dc:	00400903 	.word	0x00400903
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4008e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4008e4:	e010      	b.n	400908 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4008e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4008ea:	e00d      	b.n	400908 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4008ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4008f0:	e00a      	b.n	400908 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4008f2:	4b08      	ldr	r3, [pc, #32]	; (400914 <osc_get_rate+0x68>)
  4008f4:	e008      	b.n	400908 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4008f6:	4b08      	ldr	r3, [pc, #32]	; (400918 <osc_get_rate+0x6c>)
  4008f8:	e006      	b.n	400908 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4008fa:	4b08      	ldr	r3, [pc, #32]	; (40091c <osc_get_rate+0x70>)
  4008fc:	e004      	b.n	400908 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4008fe:	4b07      	ldr	r3, [pc, #28]	; (40091c <osc_get_rate+0x70>)
  400900:	e002      	b.n	400908 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400902:	4b06      	ldr	r3, [pc, #24]	; (40091c <osc_get_rate+0x70>)
  400904:	e000      	b.n	400908 <osc_get_rate+0x5c>
	}

	return 0;
  400906:	2300      	movs	r3, #0
}
  400908:	4618      	mov	r0, r3
  40090a:	370c      	adds	r7, #12
  40090c:	46bd      	mov	sp, r7
  40090e:	bc80      	pop	{r7}
  400910:	4770      	bx	lr
  400912:	bf00      	nop
  400914:	003d0900 	.word	0x003d0900
  400918:	007a1200 	.word	0x007a1200
  40091c:	00b71b00 	.word	0x00b71b00

00400920 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400920:	b580      	push	{r7, lr}
  400922:	b082      	sub	sp, #8
  400924:	af00      	add	r7, sp, #0
  400926:	4603      	mov	r3, r0
  400928:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40092a:	bf00      	nop
  40092c:	79fb      	ldrb	r3, [r7, #7]
  40092e:	4618      	mov	r0, r3
  400930:	4b05      	ldr	r3, [pc, #20]	; (400948 <osc_wait_ready+0x28>)
  400932:	4798      	blx	r3
  400934:	4603      	mov	r3, r0
  400936:	f083 0301 	eor.w	r3, r3, #1
  40093a:	b2db      	uxtb	r3, r3
  40093c:	2b00      	cmp	r3, #0
  40093e:	d1f5      	bne.n	40092c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400940:	bf00      	nop
  400942:	3708      	adds	r7, #8
  400944:	46bd      	mov	sp, r7
  400946:	bd80      	pop	{r7, pc}
  400948:	0040083d 	.word	0x0040083d

0040094c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40094c:	b580      	push	{r7, lr}
  40094e:	b086      	sub	sp, #24
  400950:	af00      	add	r7, sp, #0
  400952:	60f8      	str	r0, [r7, #12]
  400954:	607a      	str	r2, [r7, #4]
  400956:	603b      	str	r3, [r7, #0]
  400958:	460b      	mov	r3, r1
  40095a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40095c:	7afb      	ldrb	r3, [r7, #11]
  40095e:	4618      	mov	r0, r3
  400960:	4b0d      	ldr	r3, [pc, #52]	; (400998 <pll_config_init+0x4c>)
  400962:	4798      	blx	r3
  400964:	4602      	mov	r2, r0
  400966:	687b      	ldr	r3, [r7, #4]
  400968:	fbb2 f3f3 	udiv	r3, r2, r3
  40096c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40096e:	697b      	ldr	r3, [r7, #20]
  400970:	683a      	ldr	r2, [r7, #0]
  400972:	fb02 f303 	mul.w	r3, r2, r3
  400976:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400978:	683b      	ldr	r3, [r7, #0]
  40097a:	3b01      	subs	r3, #1
  40097c:	041a      	lsls	r2, r3, #16
  40097e:	4b07      	ldr	r3, [pc, #28]	; (40099c <pll_config_init+0x50>)
  400980:	4013      	ands	r3, r2
  400982:	687a      	ldr	r2, [r7, #4]
  400984:	b2d2      	uxtb	r2, r2
  400986:	4313      	orrs	r3, r2
  400988:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40098c:	68fb      	ldr	r3, [r7, #12]
  40098e:	601a      	str	r2, [r3, #0]
}
  400990:	bf00      	nop
  400992:	3718      	adds	r7, #24
  400994:	46bd      	mov	sp, r7
  400996:	bd80      	pop	{r7, pc}
  400998:	004008ad 	.word	0x004008ad
  40099c:	07ff0000 	.word	0x07ff0000

004009a0 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4009a0:	b580      	push	{r7, lr}
  4009a2:	b082      	sub	sp, #8
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	6078      	str	r0, [r7, #4]
  4009a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4009aa:	683b      	ldr	r3, [r7, #0]
  4009ac:	2b00      	cmp	r3, #0
  4009ae:	d108      	bne.n	4009c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4009b0:	4b09      	ldr	r3, [pc, #36]	; (4009d8 <pll_enable+0x38>)
  4009b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4009b4:	4a09      	ldr	r2, [pc, #36]	; (4009dc <pll_enable+0x3c>)
  4009b6:	687b      	ldr	r3, [r7, #4]
  4009b8:	681b      	ldr	r3, [r3, #0]
  4009ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4009be:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  4009c0:	e005      	b.n	4009ce <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  4009c2:	4b07      	ldr	r3, [pc, #28]	; (4009e0 <pll_enable+0x40>)
  4009c4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4009c6:	4a05      	ldr	r2, [pc, #20]	; (4009dc <pll_enable+0x3c>)
  4009c8:	687b      	ldr	r3, [r7, #4]
  4009ca:	681b      	ldr	r3, [r3, #0]
  4009cc:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  4009ce:	bf00      	nop
  4009d0:	3708      	adds	r7, #8
  4009d2:	46bd      	mov	sp, r7
  4009d4:	bd80      	pop	{r7, pc}
  4009d6:	bf00      	nop
  4009d8:	0040137d 	.word	0x0040137d
  4009dc:	400e0400 	.word	0x400e0400
  4009e0:	004013ad 	.word	0x004013ad

004009e4 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4009e4:	b580      	push	{r7, lr}
  4009e6:	b082      	sub	sp, #8
  4009e8:	af00      	add	r7, sp, #0
  4009ea:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4009ec:	687b      	ldr	r3, [r7, #4]
  4009ee:	2b00      	cmp	r3, #0
  4009f0:	d103      	bne.n	4009fa <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4009f2:	4b05      	ldr	r3, [pc, #20]	; (400a08 <pll_is_locked+0x24>)
  4009f4:	4798      	blx	r3
  4009f6:	4603      	mov	r3, r0
  4009f8:	e002      	b.n	400a00 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  4009fa:	4b04      	ldr	r3, [pc, #16]	; (400a0c <pll_is_locked+0x28>)
  4009fc:	4798      	blx	r3
  4009fe:	4603      	mov	r3, r0
	}
}
  400a00:	4618      	mov	r0, r3
  400a02:	3708      	adds	r7, #8
  400a04:	46bd      	mov	sp, r7
  400a06:	bd80      	pop	{r7, pc}
  400a08:	00401395 	.word	0x00401395
  400a0c:	004013c5 	.word	0x004013c5

00400a10 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400a10:	b580      	push	{r7, lr}
  400a12:	b082      	sub	sp, #8
  400a14:	af00      	add	r7, sp, #0
  400a16:	4603      	mov	r3, r0
  400a18:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400a1a:	79fb      	ldrb	r3, [r7, #7]
  400a1c:	3b03      	subs	r3, #3
  400a1e:	2b04      	cmp	r3, #4
  400a20:	d808      	bhi.n	400a34 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400a22:	79fb      	ldrb	r3, [r7, #7]
  400a24:	4618      	mov	r0, r3
  400a26:	4b06      	ldr	r3, [pc, #24]	; (400a40 <pll_enable_source+0x30>)
  400a28:	4798      	blx	r3
		osc_wait_ready(e_src);
  400a2a:	79fb      	ldrb	r3, [r7, #7]
  400a2c:	4618      	mov	r0, r3
  400a2e:	4b05      	ldr	r3, [pc, #20]	; (400a44 <pll_enable_source+0x34>)
  400a30:	4798      	blx	r3
		break;
  400a32:	e000      	b.n	400a36 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400a34:	bf00      	nop
	}
}
  400a36:	bf00      	nop
  400a38:	3708      	adds	r7, #8
  400a3a:	46bd      	mov	sp, r7
  400a3c:	bd80      	pop	{r7, pc}
  400a3e:	bf00      	nop
  400a40:	004007b5 	.word	0x004007b5
  400a44:	00400921 	.word	0x00400921

00400a48 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400a48:	b580      	push	{r7, lr}
  400a4a:	b082      	sub	sp, #8
  400a4c:	af00      	add	r7, sp, #0
  400a4e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400a50:	bf00      	nop
  400a52:	6878      	ldr	r0, [r7, #4]
  400a54:	4b04      	ldr	r3, [pc, #16]	; (400a68 <pll_wait_for_lock+0x20>)
  400a56:	4798      	blx	r3
  400a58:	4603      	mov	r3, r0
  400a5a:	2b00      	cmp	r3, #0
  400a5c:	d0f9      	beq.n	400a52 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400a5e:	2300      	movs	r3, #0
}
  400a60:	4618      	mov	r0, r3
  400a62:	3708      	adds	r7, #8
  400a64:	46bd      	mov	sp, r7
  400a66:	bd80      	pop	{r7, pc}
  400a68:	004009e5 	.word	0x004009e5

00400a6c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400a70:	2003      	movs	r0, #3
  400a72:	4b04      	ldr	r3, [pc, #16]	; (400a84 <sysclk_get_main_hz+0x18>)
  400a74:	4798      	blx	r3
  400a76:	4602      	mov	r2, r0
  400a78:	4613      	mov	r3, r2
  400a7a:	011b      	lsls	r3, r3, #4
  400a7c:	1a9b      	subs	r3, r3, r2
  400a7e:	005b      	lsls	r3, r3, #1

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400a80:	4618      	mov	r0, r3
  400a82:	bd80      	pop	{r7, pc}
  400a84:	004008ad 	.word	0x004008ad

00400a88 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400a88:	b580      	push	{r7, lr}
  400a8a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400a8c:	4b02      	ldr	r3, [pc, #8]	; (400a98 <sysclk_get_cpu_hz+0x10>)
  400a8e:	4798      	blx	r3
  400a90:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400a92:	4618      	mov	r0, r3
  400a94:	bd80      	pop	{r7, pc}
  400a96:	bf00      	nop
  400a98:	00400a6d 	.word	0x00400a6d

00400a9c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400a9c:	b590      	push	{r4, r7, lr}
  400a9e:	b083      	sub	sp, #12
  400aa0:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400aa2:	4811      	ldr	r0, [pc, #68]	; (400ae8 <sysclk_init+0x4c>)
  400aa4:	4b11      	ldr	r3, [pc, #68]	; (400aec <sysclk_init+0x50>)
  400aa6:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400aa8:	2003      	movs	r0, #3
  400aaa:	4b11      	ldr	r3, [pc, #68]	; (400af0 <sysclk_init+0x54>)
  400aac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400aae:	1d38      	adds	r0, r7, #4
  400ab0:	231e      	movs	r3, #30
  400ab2:	2201      	movs	r2, #1
  400ab4:	2103      	movs	r1, #3
  400ab6:	4c0f      	ldr	r4, [pc, #60]	; (400af4 <sysclk_init+0x58>)
  400ab8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400aba:	1d3b      	adds	r3, r7, #4
  400abc:	2100      	movs	r1, #0
  400abe:	4618      	mov	r0, r3
  400ac0:	4b0d      	ldr	r3, [pc, #52]	; (400af8 <sysclk_init+0x5c>)
  400ac2:	4798      	blx	r3
		pll_wait_for_lock(0);
  400ac4:	2000      	movs	r0, #0
  400ac6:	4b0d      	ldr	r3, [pc, #52]	; (400afc <sysclk_init+0x60>)
  400ac8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400aca:	2000      	movs	r0, #0
  400acc:	4b0c      	ldr	r3, [pc, #48]	; (400b00 <sysclk_init+0x64>)
  400ace:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400ad0:	4b0c      	ldr	r3, [pc, #48]	; (400b04 <sysclk_init+0x68>)
  400ad2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400ad4:	4b0c      	ldr	r3, [pc, #48]	; (400b08 <sysclk_init+0x6c>)
  400ad6:	4798      	blx	r3
  400ad8:	4603      	mov	r3, r0
  400ada:	4618      	mov	r0, r3
  400adc:	4b03      	ldr	r3, [pc, #12]	; (400aec <sysclk_init+0x50>)
  400ade:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400ae0:	bf00      	nop
  400ae2:	370c      	adds	r7, #12
  400ae4:	46bd      	mov	sp, r7
  400ae6:	bd90      	pop	{r4, r7, pc}
  400ae8:	07270e00 	.word	0x07270e00
  400aec:	004016e9 	.word	0x004016e9
  400af0:	00400a11 	.word	0x00400a11
  400af4:	0040094d 	.word	0x0040094d
  400af8:	004009a1 	.word	0x004009a1
  400afc:	00400a49 	.word	0x00400a49
  400b00:	00401191 	.word	0x00401191
  400b04:	0040154d 	.word	0x0040154d
  400b08:	00400a89 	.word	0x00400a89

00400b0c <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  400b0c:	b480      	push	{r7}
  400b0e:	b085      	sub	sp, #20
  400b10:	af00      	add	r7, sp, #0
  400b12:	60f8      	str	r0, [r7, #12]
  400b14:	60b9      	str	r1, [r7, #8]
  400b16:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400b18:	68bb      	ldr	r3, [r7, #8]
  400b1a:	2b00      	cmp	r3, #0
  400b1c:	d007      	beq.n	400b2e <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  400b1e:	68bb      	ldr	r3, [r7, #8]
  400b20:	681a      	ldr	r2, [r3, #0]
  400b22:	68fb      	ldr	r3, [r7, #12]
  400b24:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  400b26:	68bb      	ldr	r3, [r7, #8]
  400b28:	685a      	ldr	r2, [r3, #4]
  400b2a:	68fb      	ldr	r3, [r7, #12]
  400b2c:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  400b2e:	687b      	ldr	r3, [r7, #4]
  400b30:	2b00      	cmp	r3, #0
  400b32:	d007      	beq.n	400b44 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  400b34:	687b      	ldr	r3, [r7, #4]
  400b36:	681a      	ldr	r2, [r3, #0]
  400b38:	68fb      	ldr	r3, [r7, #12]
  400b3a:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  400b3c:	687b      	ldr	r3, [r7, #4]
  400b3e:	685a      	ldr	r2, [r3, #4]
  400b40:	68fb      	ldr	r3, [r7, #12]
  400b42:	61da      	str	r2, [r3, #28]
	}
}
  400b44:	bf00      	nop
  400b46:	3714      	adds	r7, #20
  400b48:	46bd      	mov	sp, r7
  400b4a:	bc80      	pop	{r7}
  400b4c:	4770      	bx	lr
  400b4e:	bf00      	nop

00400b50 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  400b50:	b480      	push	{r7}
  400b52:	b085      	sub	sp, #20
  400b54:	af00      	add	r7, sp, #0
  400b56:	60f8      	str	r0, [r7, #12]
  400b58:	60b9      	str	r1, [r7, #8]
  400b5a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400b5c:	68bb      	ldr	r3, [r7, #8]
  400b5e:	2b00      	cmp	r3, #0
  400b60:	d007      	beq.n	400b72 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  400b62:	68bb      	ldr	r3, [r7, #8]
  400b64:	681a      	ldr	r2, [r3, #0]
  400b66:	68fb      	ldr	r3, [r7, #12]
  400b68:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  400b6a:	68bb      	ldr	r3, [r7, #8]
  400b6c:	685a      	ldr	r2, [r3, #4]
  400b6e:	68fb      	ldr	r3, [r7, #12]
  400b70:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  400b72:	687b      	ldr	r3, [r7, #4]
  400b74:	2b00      	cmp	r3, #0
  400b76:	d007      	beq.n	400b88 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  400b78:	687b      	ldr	r3, [r7, #4]
  400b7a:	681a      	ldr	r2, [r3, #0]
  400b7c:	68fb      	ldr	r3, [r7, #12]
  400b7e:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	685a      	ldr	r2, [r3, #4]
  400b84:	68fb      	ldr	r3, [r7, #12]
  400b86:	615a      	str	r2, [r3, #20]
	}
}
  400b88:	bf00      	nop
  400b8a:	3714      	adds	r7, #20
  400b8c:	46bd      	mov	sp, r7
  400b8e:	bc80      	pop	{r7}
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop

00400b94 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  400b94:	b480      	push	{r7}
  400b96:	b083      	sub	sp, #12
  400b98:	af00      	add	r7, sp, #0
  400b9a:	6078      	str	r0, [r7, #4]
  400b9c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400b9e:	683a      	ldr	r2, [r7, #0]
  400ba0:	f240 1301 	movw	r3, #257	; 0x101
  400ba4:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400ba6:	687a      	ldr	r2, [r7, #4]
  400ba8:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  400baa:	bf00      	nop
  400bac:	370c      	adds	r7, #12
  400bae:	46bd      	mov	sp, r7
  400bb0:	bc80      	pop	{r7}
  400bb2:	4770      	bx	lr

00400bb4 <pdc_read_status>:
 * </table>
 *
 */
uint32_t pdc_read_status(
		Pdc *p_pdc)
{
  400bb4:	b480      	push	{r7}
  400bb6:	b083      	sub	sp, #12
  400bb8:	af00      	add	r7, sp, #0
  400bba:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_PTSR;
  400bbc:	687b      	ldr	r3, [r7, #4]
  400bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  400bc0:	4618      	mov	r0, r3
  400bc2:	370c      	adds	r7, #12
  400bc4:	46bd      	mov	sp, r7
  400bc6:	bc80      	pop	{r7}
  400bc8:	4770      	bx	lr
  400bca:	bf00      	nop

00400bcc <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400bcc:	b480      	push	{r7}
  400bce:	b085      	sub	sp, #20
  400bd0:	af00      	add	r7, sp, #0
  400bd2:	60f8      	str	r0, [r7, #12]
  400bd4:	60b9      	str	r1, [r7, #8]
  400bd6:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400bd8:	687b      	ldr	r3, [r7, #4]
  400bda:	2b00      	cmp	r3, #0
  400bdc:	d003      	beq.n	400be6 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400bde:	68fb      	ldr	r3, [r7, #12]
  400be0:	68ba      	ldr	r2, [r7, #8]
  400be2:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400be4:	e002      	b.n	400bec <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400be6:	68fb      	ldr	r3, [r7, #12]
  400be8:	68ba      	ldr	r2, [r7, #8]
  400bea:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  400bec:	bf00      	nop
  400bee:	3714      	adds	r7, #20
  400bf0:	46bd      	mov	sp, r7
  400bf2:	bc80      	pop	{r7}
  400bf4:	4770      	bx	lr
  400bf6:	bf00      	nop

00400bf8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400bf8:	b480      	push	{r7}
  400bfa:	b087      	sub	sp, #28
  400bfc:	af00      	add	r7, sp, #0
  400bfe:	60f8      	str	r0, [r7, #12]
  400c00:	60b9      	str	r1, [r7, #8]
  400c02:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c04:	68fb      	ldr	r3, [r7, #12]
  400c06:	687a      	ldr	r2, [r7, #4]
  400c08:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c0a:	68bb      	ldr	r3, [r7, #8]
  400c0c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400c10:	d04a      	beq.n	400ca8 <pio_set_peripheral+0xb0>
  400c12:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400c16:	d808      	bhi.n	400c2a <pio_set_peripheral+0x32>
  400c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400c1c:	d016      	beq.n	400c4c <pio_set_peripheral+0x54>
  400c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400c22:	d02c      	beq.n	400c7e <pio_set_peripheral+0x86>
  400c24:	2b00      	cmp	r3, #0
  400c26:	d069      	beq.n	400cfc <pio_set_peripheral+0x104>
  400c28:	e064      	b.n	400cf4 <pio_set_peripheral+0xfc>
  400c2a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400c2e:	d065      	beq.n	400cfc <pio_set_peripheral+0x104>
  400c30:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400c34:	d803      	bhi.n	400c3e <pio_set_peripheral+0x46>
  400c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400c3a:	d04a      	beq.n	400cd2 <pio_set_peripheral+0xda>
  400c3c:	e05a      	b.n	400cf4 <pio_set_peripheral+0xfc>
  400c3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400c42:	d05b      	beq.n	400cfc <pio_set_peripheral+0x104>
  400c44:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400c48:	d058      	beq.n	400cfc <pio_set_peripheral+0x104>
  400c4a:	e053      	b.n	400cf4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c4c:	68fb      	ldr	r3, [r7, #12]
  400c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400c50:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c52:	68fb      	ldr	r3, [r7, #12]
  400c54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c56:	687b      	ldr	r3, [r7, #4]
  400c58:	43d9      	mvns	r1, r3
  400c5a:	697b      	ldr	r3, [r7, #20]
  400c5c:	400b      	ands	r3, r1
  400c5e:	401a      	ands	r2, r3
  400c60:	68fb      	ldr	r3, [r7, #12]
  400c62:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c64:	68fb      	ldr	r3, [r7, #12]
  400c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400c68:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c6a:	68fb      	ldr	r3, [r7, #12]
  400c6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c6e:	687b      	ldr	r3, [r7, #4]
  400c70:	43d9      	mvns	r1, r3
  400c72:	697b      	ldr	r3, [r7, #20]
  400c74:	400b      	ands	r3, r1
  400c76:	401a      	ands	r2, r3
  400c78:	68fb      	ldr	r3, [r7, #12]
  400c7a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400c7c:	e03a      	b.n	400cf4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c7e:	68fb      	ldr	r3, [r7, #12]
  400c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400c82:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c84:	687a      	ldr	r2, [r7, #4]
  400c86:	697b      	ldr	r3, [r7, #20]
  400c88:	431a      	orrs	r2, r3
  400c8a:	68fb      	ldr	r3, [r7, #12]
  400c8c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c8e:	68fb      	ldr	r3, [r7, #12]
  400c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400c92:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c94:	68fb      	ldr	r3, [r7, #12]
  400c96:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c98:	687b      	ldr	r3, [r7, #4]
  400c9a:	43d9      	mvns	r1, r3
  400c9c:	697b      	ldr	r3, [r7, #20]
  400c9e:	400b      	ands	r3, r1
  400ca0:	401a      	ands	r2, r3
  400ca2:	68fb      	ldr	r3, [r7, #12]
  400ca4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400ca6:	e025      	b.n	400cf4 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ca8:	68fb      	ldr	r3, [r7, #12]
  400caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400cac:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400cae:	68fb      	ldr	r3, [r7, #12]
  400cb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400cb2:	687b      	ldr	r3, [r7, #4]
  400cb4:	43d9      	mvns	r1, r3
  400cb6:	697b      	ldr	r3, [r7, #20]
  400cb8:	400b      	ands	r3, r1
  400cba:	401a      	ands	r2, r3
  400cbc:	68fb      	ldr	r3, [r7, #12]
  400cbe:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400cc0:	68fb      	ldr	r3, [r7, #12]
  400cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400cc4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400cc6:	687a      	ldr	r2, [r7, #4]
  400cc8:	697b      	ldr	r3, [r7, #20]
  400cca:	431a      	orrs	r2, r3
  400ccc:	68fb      	ldr	r3, [r7, #12]
  400cce:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400cd0:	e010      	b.n	400cf4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cd2:	68fb      	ldr	r3, [r7, #12]
  400cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400cd6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400cd8:	687a      	ldr	r2, [r7, #4]
  400cda:	697b      	ldr	r3, [r7, #20]
  400cdc:	431a      	orrs	r2, r3
  400cde:	68fb      	ldr	r3, [r7, #12]
  400ce0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ce2:	68fb      	ldr	r3, [r7, #12]
  400ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400ce6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ce8:	687a      	ldr	r2, [r7, #4]
  400cea:	697b      	ldr	r3, [r7, #20]
  400cec:	431a      	orrs	r2, r3
  400cee:	68fb      	ldr	r3, [r7, #12]
  400cf0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400cf2:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400cf4:	68fb      	ldr	r3, [r7, #12]
  400cf6:	687a      	ldr	r2, [r7, #4]
  400cf8:	605a      	str	r2, [r3, #4]
  400cfa:	e000      	b.n	400cfe <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  400cfc:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  400cfe:	371c      	adds	r7, #28
  400d00:	46bd      	mov	sp, r7
  400d02:	bc80      	pop	{r7}
  400d04:	4770      	bx	lr
  400d06:	bf00      	nop

00400d08 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400d08:	b580      	push	{r7, lr}
  400d0a:	b084      	sub	sp, #16
  400d0c:	af00      	add	r7, sp, #0
  400d0e:	60f8      	str	r0, [r7, #12]
  400d10:	60b9      	str	r1, [r7, #8]
  400d12:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400d14:	68b9      	ldr	r1, [r7, #8]
  400d16:	68f8      	ldr	r0, [r7, #12]
  400d18:	4b19      	ldr	r3, [pc, #100]	; (400d80 <pio_set_input+0x78>)
  400d1a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400d1c:	687b      	ldr	r3, [r7, #4]
  400d1e:	f003 0301 	and.w	r3, r3, #1
  400d22:	461a      	mov	r2, r3
  400d24:	68b9      	ldr	r1, [r7, #8]
  400d26:	68f8      	ldr	r0, [r7, #12]
  400d28:	4b16      	ldr	r3, [pc, #88]	; (400d84 <pio_set_input+0x7c>)
  400d2a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400d2c:	687b      	ldr	r3, [r7, #4]
  400d2e:	f003 030a 	and.w	r3, r3, #10
  400d32:	2b00      	cmp	r3, #0
  400d34:	d003      	beq.n	400d3e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400d36:	68fb      	ldr	r3, [r7, #12]
  400d38:	68ba      	ldr	r2, [r7, #8]
  400d3a:	621a      	str	r2, [r3, #32]
  400d3c:	e002      	b.n	400d44 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400d3e:	68fb      	ldr	r3, [r7, #12]
  400d40:	68ba      	ldr	r2, [r7, #8]
  400d42:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400d44:	687b      	ldr	r3, [r7, #4]
  400d46:	f003 0302 	and.w	r3, r3, #2
  400d4a:	2b00      	cmp	r3, #0
  400d4c:	d004      	beq.n	400d58 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400d4e:	68fb      	ldr	r3, [r7, #12]
  400d50:	68ba      	ldr	r2, [r7, #8]
  400d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400d56:	e008      	b.n	400d6a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400d58:	687b      	ldr	r3, [r7, #4]
  400d5a:	f003 0308 	and.w	r3, r3, #8
  400d5e:	2b00      	cmp	r3, #0
  400d60:	d003      	beq.n	400d6a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400d62:	68fb      	ldr	r3, [r7, #12]
  400d64:	68ba      	ldr	r2, [r7, #8]
  400d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400d6a:	68fb      	ldr	r3, [r7, #12]
  400d6c:	68ba      	ldr	r2, [r7, #8]
  400d6e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400d70:	68fb      	ldr	r3, [r7, #12]
  400d72:	68ba      	ldr	r2, [r7, #8]
  400d74:	601a      	str	r2, [r3, #0]
}
  400d76:	bf00      	nop
  400d78:	3710      	adds	r7, #16
  400d7a:	46bd      	mov	sp, r7
  400d7c:	bd80      	pop	{r7, pc}
  400d7e:	bf00      	nop
  400d80:	00400ded 	.word	0x00400ded
  400d84:	00400bcd 	.word	0x00400bcd

00400d88 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400d88:	b580      	push	{r7, lr}
  400d8a:	b084      	sub	sp, #16
  400d8c:	af00      	add	r7, sp, #0
  400d8e:	60f8      	str	r0, [r7, #12]
  400d90:	60b9      	str	r1, [r7, #8]
  400d92:	607a      	str	r2, [r7, #4]
  400d94:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400d96:	68b9      	ldr	r1, [r7, #8]
  400d98:	68f8      	ldr	r0, [r7, #12]
  400d9a:	4b12      	ldr	r3, [pc, #72]	; (400de4 <pio_set_output+0x5c>)
  400d9c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400d9e:	69ba      	ldr	r2, [r7, #24]
  400da0:	68b9      	ldr	r1, [r7, #8]
  400da2:	68f8      	ldr	r0, [r7, #12]
  400da4:	4b10      	ldr	r3, [pc, #64]	; (400de8 <pio_set_output+0x60>)
  400da6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400da8:	683b      	ldr	r3, [r7, #0]
  400daa:	2b00      	cmp	r3, #0
  400dac:	d003      	beq.n	400db6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400dae:	68fb      	ldr	r3, [r7, #12]
  400db0:	68ba      	ldr	r2, [r7, #8]
  400db2:	651a      	str	r2, [r3, #80]	; 0x50
  400db4:	e002      	b.n	400dbc <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400db6:	68fb      	ldr	r3, [r7, #12]
  400db8:	68ba      	ldr	r2, [r7, #8]
  400dba:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400dbc:	687b      	ldr	r3, [r7, #4]
  400dbe:	2b00      	cmp	r3, #0
  400dc0:	d003      	beq.n	400dca <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400dc2:	68fb      	ldr	r3, [r7, #12]
  400dc4:	68ba      	ldr	r2, [r7, #8]
  400dc6:	631a      	str	r2, [r3, #48]	; 0x30
  400dc8:	e002      	b.n	400dd0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400dca:	68fb      	ldr	r3, [r7, #12]
  400dcc:	68ba      	ldr	r2, [r7, #8]
  400dce:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400dd0:	68fb      	ldr	r3, [r7, #12]
  400dd2:	68ba      	ldr	r2, [r7, #8]
  400dd4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400dd6:	68fb      	ldr	r3, [r7, #12]
  400dd8:	68ba      	ldr	r2, [r7, #8]
  400dda:	601a      	str	r2, [r3, #0]
}
  400ddc:	bf00      	nop
  400dde:	3710      	adds	r7, #16
  400de0:	46bd      	mov	sp, r7
  400de2:	bd80      	pop	{r7, pc}
  400de4:	00400ded 	.word	0x00400ded
  400de8:	00400bcd 	.word	0x00400bcd

00400dec <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400dec:	b480      	push	{r7}
  400dee:	b083      	sub	sp, #12
  400df0:	af00      	add	r7, sp, #0
  400df2:	6078      	str	r0, [r7, #4]
  400df4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400df6:	687b      	ldr	r3, [r7, #4]
  400df8:	683a      	ldr	r2, [r7, #0]
  400dfa:	645a      	str	r2, [r3, #68]	; 0x44
}
  400dfc:	bf00      	nop
  400dfe:	370c      	adds	r7, #12
  400e00:	46bd      	mov	sp, r7
  400e02:	bc80      	pop	{r7}
  400e04:	4770      	bx	lr
  400e06:	bf00      	nop

00400e08 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400e08:	b480      	push	{r7}
  400e0a:	b083      	sub	sp, #12
  400e0c:	af00      	add	r7, sp, #0
  400e0e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400e10:	687b      	ldr	r3, [r7, #4]
  400e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400e14:	4618      	mov	r0, r3
  400e16:	370c      	adds	r7, #12
  400e18:	46bd      	mov	sp, r7
  400e1a:	bc80      	pop	{r7}
  400e1c:	4770      	bx	lr
  400e1e:	bf00      	nop

00400e20 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400e20:	b480      	push	{r7}
  400e22:	b083      	sub	sp, #12
  400e24:	af00      	add	r7, sp, #0
  400e26:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400e28:	687b      	ldr	r3, [r7, #4]
  400e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400e2c:	4618      	mov	r0, r3
  400e2e:	370c      	adds	r7, #12
  400e30:	46bd      	mov	sp, r7
  400e32:	bc80      	pop	{r7}
  400e34:	4770      	bx	lr
  400e36:	bf00      	nop

00400e38 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
  400e38:	b580      	push	{r7, lr}
  400e3a:	b084      	sub	sp, #16
  400e3c:	af00      	add	r7, sp, #0
  400e3e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  400e40:	6878      	ldr	r0, [r7, #4]
  400e42:	4b12      	ldr	r3, [pc, #72]	; (400e8c <pio_toggle_pin+0x54>)
  400e44:	4798      	blx	r3
  400e46:	60f8      	str	r0, [r7, #12]

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  400e48:	68fb      	ldr	r3, [r7, #12]
  400e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400e4c:	687a      	ldr	r2, [r7, #4]
  400e4e:	f002 021f 	and.w	r2, r2, #31
  400e52:	2101      	movs	r1, #1
  400e54:	fa01 f202 	lsl.w	r2, r1, r2
  400e58:	4013      	ands	r3, r2
  400e5a:	2b00      	cmp	r3, #0
  400e5c:	d009      	beq.n	400e72 <pio_toggle_pin+0x3a>
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400e5e:	687b      	ldr	r3, [r7, #4]
  400e60:	f003 031f 	and.w	r3, r3, #31
  400e64:	2201      	movs	r2, #1
  400e66:	fa02 f303 	lsl.w	r3, r2, r3
  400e6a:	461a      	mov	r2, r3
  400e6c:	68fb      	ldr	r3, [r7, #12]
  400e6e:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
	}
}
  400e70:	e008      	b.n	400e84 <pio_toggle_pin+0x4c>
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400e72:	687b      	ldr	r3, [r7, #4]
  400e74:	f003 031f 	and.w	r3, r3, #31
  400e78:	2201      	movs	r2, #1
  400e7a:	fa02 f303 	lsl.w	r3, r2, r3
  400e7e:	461a      	mov	r2, r3
  400e80:	68fb      	ldr	r3, [r7, #12]
  400e82:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
  400e84:	bf00      	nop
  400e86:	3710      	adds	r7, #16
  400e88:	46bd      	mov	sp, r7
  400e8a:	bd80      	pop	{r7, pc}
  400e8c:	0040116d 	.word	0x0040116d

00400e90 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400e90:	b590      	push	{r4, r7, lr}
  400e92:	b087      	sub	sp, #28
  400e94:	af02      	add	r7, sp, #8
  400e96:	6078      	str	r0, [r7, #4]
  400e98:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  400e9a:	6878      	ldr	r0, [r7, #4]
  400e9c:	4b63      	ldr	r3, [pc, #396]	; (40102c <pio_configure_pin+0x19c>)
  400e9e:	4798      	blx	r3
  400ea0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400ea2:	683b      	ldr	r3, [r7, #0]
  400ea4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  400ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400eac:	d067      	beq.n	400f7e <pio_configure_pin+0xee>
  400eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400eb2:	d809      	bhi.n	400ec8 <pio_configure_pin+0x38>
  400eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400eb8:	d02b      	beq.n	400f12 <pio_configure_pin+0x82>
  400eba:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400ebe:	d043      	beq.n	400f48 <pio_configure_pin+0xb8>
  400ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400ec4:	d00a      	beq.n	400edc <pio_configure_pin+0x4c>
  400ec6:	e0a9      	b.n	40101c <pio_configure_pin+0x18c>
  400ec8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400ecc:	d07e      	beq.n	400fcc <pio_configure_pin+0x13c>
  400ece:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400ed2:	d07b      	beq.n	400fcc <pio_configure_pin+0x13c>
  400ed4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400ed8:	d06c      	beq.n	400fb4 <pio_configure_pin+0x124>
  400eda:	e09f      	b.n	40101c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400edc:	687b      	ldr	r3, [r7, #4]
  400ede:	f003 031f 	and.w	r3, r3, #31
  400ee2:	2201      	movs	r2, #1
  400ee4:	fa02 f303 	lsl.w	r3, r2, r3
  400ee8:	461a      	mov	r2, r3
  400eea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400eee:	68f8      	ldr	r0, [r7, #12]
  400ef0:	4b4f      	ldr	r3, [pc, #316]	; (401030 <pio_configure_pin+0x1a0>)
  400ef2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400ef4:	687b      	ldr	r3, [r7, #4]
  400ef6:	f003 031f 	and.w	r3, r3, #31
  400efa:	2201      	movs	r2, #1
  400efc:	fa02 f303 	lsl.w	r3, r2, r3
  400f00:	4619      	mov	r1, r3
  400f02:	683b      	ldr	r3, [r7, #0]
  400f04:	f003 0301 	and.w	r3, r3, #1
  400f08:	461a      	mov	r2, r3
  400f0a:	68f8      	ldr	r0, [r7, #12]
  400f0c:	4b49      	ldr	r3, [pc, #292]	; (401034 <pio_configure_pin+0x1a4>)
  400f0e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400f10:	e086      	b.n	401020 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400f12:	687b      	ldr	r3, [r7, #4]
  400f14:	f003 031f 	and.w	r3, r3, #31
  400f18:	2201      	movs	r2, #1
  400f1a:	fa02 f303 	lsl.w	r3, r2, r3
  400f1e:	461a      	mov	r2, r3
  400f20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f24:	68f8      	ldr	r0, [r7, #12]
  400f26:	4b42      	ldr	r3, [pc, #264]	; (401030 <pio_configure_pin+0x1a0>)
  400f28:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400f2a:	687b      	ldr	r3, [r7, #4]
  400f2c:	f003 031f 	and.w	r3, r3, #31
  400f30:	2201      	movs	r2, #1
  400f32:	fa02 f303 	lsl.w	r3, r2, r3
  400f36:	4619      	mov	r1, r3
  400f38:	683b      	ldr	r3, [r7, #0]
  400f3a:	f003 0301 	and.w	r3, r3, #1
  400f3e:	461a      	mov	r2, r3
  400f40:	68f8      	ldr	r0, [r7, #12]
  400f42:	4b3c      	ldr	r3, [pc, #240]	; (401034 <pio_configure_pin+0x1a4>)
  400f44:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400f46:	e06b      	b.n	401020 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400f48:	687b      	ldr	r3, [r7, #4]
  400f4a:	f003 031f 	and.w	r3, r3, #31
  400f4e:	2201      	movs	r2, #1
  400f50:	fa02 f303 	lsl.w	r3, r2, r3
  400f54:	461a      	mov	r2, r3
  400f56:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400f5a:	68f8      	ldr	r0, [r7, #12]
  400f5c:	4b34      	ldr	r3, [pc, #208]	; (401030 <pio_configure_pin+0x1a0>)
  400f5e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	f003 031f 	and.w	r3, r3, #31
  400f66:	2201      	movs	r2, #1
  400f68:	fa02 f303 	lsl.w	r3, r2, r3
  400f6c:	4619      	mov	r1, r3
  400f6e:	683b      	ldr	r3, [r7, #0]
  400f70:	f003 0301 	and.w	r3, r3, #1
  400f74:	461a      	mov	r2, r3
  400f76:	68f8      	ldr	r0, [r7, #12]
  400f78:	4b2e      	ldr	r3, [pc, #184]	; (401034 <pio_configure_pin+0x1a4>)
  400f7a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400f7c:	e050      	b.n	401020 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400f7e:	687b      	ldr	r3, [r7, #4]
  400f80:	f003 031f 	and.w	r3, r3, #31
  400f84:	2201      	movs	r2, #1
  400f86:	fa02 f303 	lsl.w	r3, r2, r3
  400f8a:	461a      	mov	r2, r3
  400f8c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400f90:	68f8      	ldr	r0, [r7, #12]
  400f92:	4b27      	ldr	r3, [pc, #156]	; (401030 <pio_configure_pin+0x1a0>)
  400f94:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400f96:	687b      	ldr	r3, [r7, #4]
  400f98:	f003 031f 	and.w	r3, r3, #31
  400f9c:	2201      	movs	r2, #1
  400f9e:	fa02 f303 	lsl.w	r3, r2, r3
  400fa2:	4619      	mov	r1, r3
  400fa4:	683b      	ldr	r3, [r7, #0]
  400fa6:	f003 0301 	and.w	r3, r3, #1
  400faa:	461a      	mov	r2, r3
  400fac:	68f8      	ldr	r0, [r7, #12]
  400fae:	4b21      	ldr	r3, [pc, #132]	; (401034 <pio_configure_pin+0x1a4>)
  400fb0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400fb2:	e035      	b.n	401020 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400fb4:	687b      	ldr	r3, [r7, #4]
  400fb6:	f003 031f 	and.w	r3, r3, #31
  400fba:	2201      	movs	r2, #1
  400fbc:	fa02 f303 	lsl.w	r3, r2, r3
  400fc0:	683a      	ldr	r2, [r7, #0]
  400fc2:	4619      	mov	r1, r3
  400fc4:	68f8      	ldr	r0, [r7, #12]
  400fc6:	4b1c      	ldr	r3, [pc, #112]	; (401038 <pio_configure_pin+0x1a8>)
  400fc8:	4798      	blx	r3
		break;
  400fca:	e029      	b.n	401020 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400fcc:	687b      	ldr	r3, [r7, #4]
  400fce:	f003 031f 	and.w	r3, r3, #31
  400fd2:	2201      	movs	r2, #1
  400fd4:	fa02 f303 	lsl.w	r3, r2, r3
  400fd8:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400fda:	683b      	ldr	r3, [r7, #0]
  400fdc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400fe0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400fe4:	bf0c      	ite	eq
  400fe6:	2301      	moveq	r3, #1
  400fe8:	2300      	movne	r3, #0
  400fea:	b2db      	uxtb	r3, r3
  400fec:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  400fee:	683b      	ldr	r3, [r7, #0]
  400ff0:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400ff4:	2b00      	cmp	r3, #0
  400ff6:	bf14      	ite	ne
  400ff8:	2301      	movne	r3, #1
  400ffa:	2300      	moveq	r3, #0
  400ffc:	b2db      	uxtb	r3, r3
  400ffe:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401000:	683b      	ldr	r3, [r7, #0]
  401002:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401006:	2b00      	cmp	r3, #0
  401008:	bf14      	ite	ne
  40100a:	2301      	movne	r3, #1
  40100c:	2300      	moveq	r3, #0
  40100e:	b2db      	uxtb	r3, r3
  401010:	9300      	str	r3, [sp, #0]
  401012:	4603      	mov	r3, r0
  401014:	68f8      	ldr	r0, [r7, #12]
  401016:	4c09      	ldr	r4, [pc, #36]	; (40103c <pio_configure_pin+0x1ac>)
  401018:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40101a:	e001      	b.n	401020 <pio_configure_pin+0x190>

	default:
		return 0;
  40101c:	2300      	movs	r3, #0
  40101e:	e000      	b.n	401022 <pio_configure_pin+0x192>
	}

	return 1;
  401020:	2301      	movs	r3, #1
}
  401022:	4618      	mov	r0, r3
  401024:	3714      	adds	r7, #20
  401026:	46bd      	mov	sp, r7
  401028:	bd90      	pop	{r4, r7, pc}
  40102a:	bf00      	nop
  40102c:	0040116d 	.word	0x0040116d
  401030:	00400bf9 	.word	0x00400bf9
  401034:	00400bcd 	.word	0x00400bcd
  401038:	00400d09 	.word	0x00400d09
  40103c:	00400d89 	.word	0x00400d89

00401040 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401040:	b590      	push	{r4, r7, lr}
  401042:	b087      	sub	sp, #28
  401044:	af02      	add	r7, sp, #8
  401046:	60f8      	str	r0, [r7, #12]
  401048:	60b9      	str	r1, [r7, #8]
  40104a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40104c:	687b      	ldr	r3, [r7, #4]
  40104e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401056:	d043      	beq.n	4010e0 <pio_configure_pin_group+0xa0>
  401058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40105c:	d809      	bhi.n	401072 <pio_configure_pin_group+0x32>
  40105e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401062:	d01f      	beq.n	4010a4 <pio_configure_pin_group+0x64>
  401064:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401068:	d02b      	beq.n	4010c2 <pio_configure_pin_group+0x82>
  40106a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40106e:	d00a      	beq.n	401086 <pio_configure_pin_group+0x46>
  401070:	e06d      	b.n	40114e <pio_configure_pin_group+0x10e>
  401072:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401076:	d048      	beq.n	40110a <pio_configure_pin_group+0xca>
  401078:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40107c:	d045      	beq.n	40110a <pio_configure_pin_group+0xca>
  40107e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401082:	d03c      	beq.n	4010fe <pio_configure_pin_group+0xbe>
  401084:	e063      	b.n	40114e <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401086:	68ba      	ldr	r2, [r7, #8]
  401088:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40108c:	68f8      	ldr	r0, [r7, #12]
  40108e:	4b33      	ldr	r3, [pc, #204]	; (40115c <pio_configure_pin_group+0x11c>)
  401090:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  401092:	687b      	ldr	r3, [r7, #4]
  401094:	f003 0301 	and.w	r3, r3, #1
  401098:	461a      	mov	r2, r3
  40109a:	68b9      	ldr	r1, [r7, #8]
  40109c:	68f8      	ldr	r0, [r7, #12]
  40109e:	4b30      	ldr	r3, [pc, #192]	; (401160 <pio_configure_pin_group+0x120>)
  4010a0:	4798      	blx	r3
		break;
  4010a2:	e056      	b.n	401152 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4010a4:	68ba      	ldr	r2, [r7, #8]
  4010a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4010aa:	68f8      	ldr	r0, [r7, #12]
  4010ac:	4b2b      	ldr	r3, [pc, #172]	; (40115c <pio_configure_pin_group+0x11c>)
  4010ae:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4010b0:	687b      	ldr	r3, [r7, #4]
  4010b2:	f003 0301 	and.w	r3, r3, #1
  4010b6:	461a      	mov	r2, r3
  4010b8:	68b9      	ldr	r1, [r7, #8]
  4010ba:	68f8      	ldr	r0, [r7, #12]
  4010bc:	4b28      	ldr	r3, [pc, #160]	; (401160 <pio_configure_pin_group+0x120>)
  4010be:	4798      	blx	r3
		break;
  4010c0:	e047      	b.n	401152 <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4010c2:	68ba      	ldr	r2, [r7, #8]
  4010c4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4010c8:	68f8      	ldr	r0, [r7, #12]
  4010ca:	4b24      	ldr	r3, [pc, #144]	; (40115c <pio_configure_pin_group+0x11c>)
  4010cc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4010ce:	687b      	ldr	r3, [r7, #4]
  4010d0:	f003 0301 	and.w	r3, r3, #1
  4010d4:	461a      	mov	r2, r3
  4010d6:	68b9      	ldr	r1, [r7, #8]
  4010d8:	68f8      	ldr	r0, [r7, #12]
  4010da:	4b21      	ldr	r3, [pc, #132]	; (401160 <pio_configure_pin_group+0x120>)
  4010dc:	4798      	blx	r3
		break;
  4010de:	e038      	b.n	401152 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4010e0:	68ba      	ldr	r2, [r7, #8]
  4010e2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4010e6:	68f8      	ldr	r0, [r7, #12]
  4010e8:	4b1c      	ldr	r3, [pc, #112]	; (40115c <pio_configure_pin_group+0x11c>)
  4010ea:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4010ec:	687b      	ldr	r3, [r7, #4]
  4010ee:	f003 0301 	and.w	r3, r3, #1
  4010f2:	461a      	mov	r2, r3
  4010f4:	68b9      	ldr	r1, [r7, #8]
  4010f6:	68f8      	ldr	r0, [r7, #12]
  4010f8:	4b19      	ldr	r3, [pc, #100]	; (401160 <pio_configure_pin_group+0x120>)
  4010fa:	4798      	blx	r3
		break;
  4010fc:	e029      	b.n	401152 <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4010fe:	687a      	ldr	r2, [r7, #4]
  401100:	68b9      	ldr	r1, [r7, #8]
  401102:	68f8      	ldr	r0, [r7, #12]
  401104:	4b17      	ldr	r3, [pc, #92]	; (401164 <pio_configure_pin_group+0x124>)
  401106:	4798      	blx	r3
		break;
  401108:	e023      	b.n	401152 <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40110a:	687b      	ldr	r3, [r7, #4]
  40110c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401110:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401114:	bf0c      	ite	eq
  401116:	2301      	moveq	r3, #1
  401118:	2300      	movne	r3, #0
  40111a:	b2db      	uxtb	r3, r3
  40111c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40111e:	687b      	ldr	r3, [r7, #4]
  401120:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401124:	2b00      	cmp	r3, #0
  401126:	bf14      	ite	ne
  401128:	2301      	movne	r3, #1
  40112a:	2300      	moveq	r3, #0
  40112c:	b2db      	uxtb	r3, r3
  40112e:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401130:	687b      	ldr	r3, [r7, #4]
  401132:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401136:	2b00      	cmp	r3, #0
  401138:	bf14      	ite	ne
  40113a:	2301      	movne	r3, #1
  40113c:	2300      	moveq	r3, #0
  40113e:	b2db      	uxtb	r3, r3
  401140:	9300      	str	r3, [sp, #0]
  401142:	460b      	mov	r3, r1
  401144:	68b9      	ldr	r1, [r7, #8]
  401146:	68f8      	ldr	r0, [r7, #12]
  401148:	4c07      	ldr	r4, [pc, #28]	; (401168 <pio_configure_pin_group+0x128>)
  40114a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40114c:	e001      	b.n	401152 <pio_configure_pin_group+0x112>

	default:
		return 0;
  40114e:	2300      	movs	r3, #0
  401150:	e000      	b.n	401154 <pio_configure_pin_group+0x114>
	}

	return 1;
  401152:	2301      	movs	r3, #1
}
  401154:	4618      	mov	r0, r3
  401156:	3714      	adds	r7, #20
  401158:	46bd      	mov	sp, r7
  40115a:	bd90      	pop	{r4, r7, pc}
  40115c:	00400bf9 	.word	0x00400bf9
  401160:	00400bcd 	.word	0x00400bcd
  401164:	00400d09 	.word	0x00400d09
  401168:	00400d89 	.word	0x00400d89

0040116c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  40116c:	b480      	push	{r7}
  40116e:	b085      	sub	sp, #20
  401170:	af00      	add	r7, sp, #0
  401172:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401174:	687b      	ldr	r3, [r7, #4]
  401176:	095b      	lsrs	r3, r3, #5
  401178:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40117c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401180:	025b      	lsls	r3, r3, #9
  401182:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401184:	68fb      	ldr	r3, [r7, #12]
}
  401186:	4618      	mov	r0, r3
  401188:	3714      	adds	r7, #20
  40118a:	46bd      	mov	sp, r7
  40118c:	bc80      	pop	{r7}
  40118e:	4770      	bx	lr

00401190 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401190:	b480      	push	{r7}
  401192:	b085      	sub	sp, #20
  401194:	af00      	add	r7, sp, #0
  401196:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401198:	491c      	ldr	r1, [pc, #112]	; (40120c <pmc_switch_mck_to_pllack+0x7c>)
  40119a:	4b1c      	ldr	r3, [pc, #112]	; (40120c <pmc_switch_mck_to_pllack+0x7c>)
  40119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40119e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4011a2:	687b      	ldr	r3, [r7, #4]
  4011a4:	4313      	orrs	r3, r2
  4011a6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011ac:	60fb      	str	r3, [r7, #12]
  4011ae:	e007      	b.n	4011c0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011b0:	68fb      	ldr	r3, [r7, #12]
  4011b2:	2b00      	cmp	r3, #0
  4011b4:	d101      	bne.n	4011ba <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4011b6:	2301      	movs	r3, #1
  4011b8:	e023      	b.n	401202 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4011ba:	68fb      	ldr	r3, [r7, #12]
  4011bc:	3b01      	subs	r3, #1
  4011be:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011c0:	4b12      	ldr	r3, [pc, #72]	; (40120c <pmc_switch_mck_to_pllack+0x7c>)
  4011c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011c4:	f003 0308 	and.w	r3, r3, #8
  4011c8:	2b00      	cmp	r3, #0
  4011ca:	d0f1      	beq.n	4011b0 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011cc:	4a0f      	ldr	r2, [pc, #60]	; (40120c <pmc_switch_mck_to_pllack+0x7c>)
  4011ce:	4b0f      	ldr	r3, [pc, #60]	; (40120c <pmc_switch_mck_to_pllack+0x7c>)
  4011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011d2:	f023 0303 	bic.w	r3, r3, #3
  4011d6:	f043 0302 	orr.w	r3, r3, #2
  4011da:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011e0:	60fb      	str	r3, [r7, #12]
  4011e2:	e007      	b.n	4011f4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011e4:	68fb      	ldr	r3, [r7, #12]
  4011e6:	2b00      	cmp	r3, #0
  4011e8:	d101      	bne.n	4011ee <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4011ea:	2301      	movs	r3, #1
  4011ec:	e009      	b.n	401202 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4011ee:	68fb      	ldr	r3, [r7, #12]
  4011f0:	3b01      	subs	r3, #1
  4011f2:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011f4:	4b05      	ldr	r3, [pc, #20]	; (40120c <pmc_switch_mck_to_pllack+0x7c>)
  4011f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011f8:	f003 0308 	and.w	r3, r3, #8
  4011fc:	2b00      	cmp	r3, #0
  4011fe:	d0f1      	beq.n	4011e4 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401200:	2300      	movs	r3, #0
}
  401202:	4618      	mov	r0, r3
  401204:	3714      	adds	r7, #20
  401206:	46bd      	mov	sp, r7
  401208:	bc80      	pop	{r7}
  40120a:	4770      	bx	lr
  40120c:	400e0400 	.word	0x400e0400

00401210 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401210:	b480      	push	{r7}
  401212:	b083      	sub	sp, #12
  401214:	af00      	add	r7, sp, #0
  401216:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401218:	687b      	ldr	r3, [r7, #4]
  40121a:	2b01      	cmp	r3, #1
  40121c:	d107      	bne.n	40122e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40121e:	4a08      	ldr	r2, [pc, #32]	; (401240 <pmc_switch_sclk_to_32kxtal+0x30>)
  401220:	4b07      	ldr	r3, [pc, #28]	; (401240 <pmc_switch_sclk_to_32kxtal+0x30>)
  401222:	689b      	ldr	r3, [r3, #8]
  401224:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40122c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40122e:	4b04      	ldr	r3, [pc, #16]	; (401240 <pmc_switch_sclk_to_32kxtal+0x30>)
  401230:	4a04      	ldr	r2, [pc, #16]	; (401244 <pmc_switch_sclk_to_32kxtal+0x34>)
  401232:	601a      	str	r2, [r3, #0]
}
  401234:	bf00      	nop
  401236:	370c      	adds	r7, #12
  401238:	46bd      	mov	sp, r7
  40123a:	bc80      	pop	{r7}
  40123c:	4770      	bx	lr
  40123e:	bf00      	nop
  401240:	400e1410 	.word	0x400e1410
  401244:	a5000008 	.word	0xa5000008

00401248 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401248:	b480      	push	{r7}
  40124a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40124c:	4b09      	ldr	r3, [pc, #36]	; (401274 <pmc_osc_is_ready_32kxtal+0x2c>)
  40124e:	695b      	ldr	r3, [r3, #20]
  401250:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401254:	2b00      	cmp	r3, #0
  401256:	d007      	beq.n	401268 <pmc_osc_is_ready_32kxtal+0x20>
  401258:	4b07      	ldr	r3, [pc, #28]	; (401278 <pmc_osc_is_ready_32kxtal+0x30>)
  40125a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40125c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401260:	2b00      	cmp	r3, #0
  401262:	d001      	beq.n	401268 <pmc_osc_is_ready_32kxtal+0x20>
  401264:	2301      	movs	r3, #1
  401266:	e000      	b.n	40126a <pmc_osc_is_ready_32kxtal+0x22>
  401268:	2300      	movs	r3, #0
}
  40126a:	4618      	mov	r0, r3
  40126c:	46bd      	mov	sp, r7
  40126e:	bc80      	pop	{r7}
  401270:	4770      	bx	lr
  401272:	bf00      	nop
  401274:	400e1410 	.word	0x400e1410
  401278:	400e0400 	.word	0x400e0400

0040127c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40127c:	b480      	push	{r7}
  40127e:	b083      	sub	sp, #12
  401280:	af00      	add	r7, sp, #0
  401282:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401284:	4a18      	ldr	r2, [pc, #96]	; (4012e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401286:	4b18      	ldr	r3, [pc, #96]	; (4012e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401288:	6a1b      	ldr	r3, [r3, #32]
  40128a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40128e:	f043 0308 	orr.w	r3, r3, #8
  401292:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401294:	bf00      	nop
  401296:	4b14      	ldr	r3, [pc, #80]	; (4012e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  401298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40129e:	2b00      	cmp	r3, #0
  4012a0:	d0f9      	beq.n	401296 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4012a2:	4911      	ldr	r1, [pc, #68]	; (4012e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012a4:	4b10      	ldr	r3, [pc, #64]	; (4012e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012a6:	6a1b      	ldr	r3, [r3, #32]
  4012a8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4012ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4012b0:	687a      	ldr	r2, [r7, #4]
  4012b2:	4313      	orrs	r3, r2
  4012b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4012b8:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4012ba:	bf00      	nop
  4012bc:	4b0a      	ldr	r3, [pc, #40]	; (4012e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4012c4:	2b00      	cmp	r3, #0
  4012c6:	d0f9      	beq.n	4012bc <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4012c8:	4a07      	ldr	r2, [pc, #28]	; (4012e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012ca:	4b07      	ldr	r3, [pc, #28]	; (4012e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012cc:	6a1b      	ldr	r3, [r3, #32]
  4012ce:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4012d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4012da:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4012dc:	bf00      	nop
  4012de:	370c      	adds	r7, #12
  4012e0:	46bd      	mov	sp, r7
  4012e2:	bc80      	pop	{r7}
  4012e4:	4770      	bx	lr
  4012e6:	bf00      	nop
  4012e8:	400e0400 	.word	0x400e0400

004012ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4012ec:	b480      	push	{r7}
  4012ee:	b083      	sub	sp, #12
  4012f0:	af00      	add	r7, sp, #0
  4012f2:	6078      	str	r0, [r7, #4]
  4012f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4012f6:	687b      	ldr	r3, [r7, #4]
  4012f8:	2b00      	cmp	r3, #0
  4012fa:	d008      	beq.n	40130e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012fc:	4916      	ldr	r1, [pc, #88]	; (401358 <pmc_switch_mainck_to_xtal+0x6c>)
  4012fe:	4b16      	ldr	r3, [pc, #88]	; (401358 <pmc_switch_mainck_to_xtal+0x6c>)
  401300:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401302:	4a16      	ldr	r2, [pc, #88]	; (40135c <pmc_switch_mainck_to_xtal+0x70>)
  401304:	401a      	ands	r2, r3
  401306:	4b16      	ldr	r3, [pc, #88]	; (401360 <pmc_switch_mainck_to_xtal+0x74>)
  401308:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40130a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40130c:	e01e      	b.n	40134c <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40130e:	4912      	ldr	r1, [pc, #72]	; (401358 <pmc_switch_mainck_to_xtal+0x6c>)
  401310:	4b11      	ldr	r3, [pc, #68]	; (401358 <pmc_switch_mainck_to_xtal+0x6c>)
  401312:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401314:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401318:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40131c:	683a      	ldr	r2, [r7, #0]
  40131e:	0212      	lsls	r2, r2, #8
  401320:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401322:	4313      	orrs	r3, r2
  401324:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401328:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40132c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40132e:	bf00      	nop
  401330:	4b09      	ldr	r3, [pc, #36]	; (401358 <pmc_switch_mainck_to_xtal+0x6c>)
  401332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401334:	f003 0301 	and.w	r3, r3, #1
  401338:	2b00      	cmp	r3, #0
  40133a:	d0f9      	beq.n	401330 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40133c:	4a06      	ldr	r2, [pc, #24]	; (401358 <pmc_switch_mainck_to_xtal+0x6c>)
  40133e:	4b06      	ldr	r3, [pc, #24]	; (401358 <pmc_switch_mainck_to_xtal+0x6c>)
  401340:	6a1b      	ldr	r3, [r3, #32]
  401342:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40134a:	6213      	str	r3, [r2, #32]
	}
}
  40134c:	bf00      	nop
  40134e:	370c      	adds	r7, #12
  401350:	46bd      	mov	sp, r7
  401352:	bc80      	pop	{r7}
  401354:	4770      	bx	lr
  401356:	bf00      	nop
  401358:	400e0400 	.word	0x400e0400
  40135c:	fec8fffc 	.word	0xfec8fffc
  401360:	01370002 	.word	0x01370002

00401364 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401364:	b480      	push	{r7}
  401366:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401368:	4b03      	ldr	r3, [pc, #12]	; (401378 <pmc_osc_is_ready_mainck+0x14>)
  40136a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401370:	4618      	mov	r0, r3
  401372:	46bd      	mov	sp, r7
  401374:	bc80      	pop	{r7}
  401376:	4770      	bx	lr
  401378:	400e0400 	.word	0x400e0400

0040137c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40137c:	b480      	push	{r7}
  40137e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401380:	4b03      	ldr	r3, [pc, #12]	; (401390 <pmc_disable_pllack+0x14>)
  401382:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401386:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401388:	bf00      	nop
  40138a:	46bd      	mov	sp, r7
  40138c:	bc80      	pop	{r7}
  40138e:	4770      	bx	lr
  401390:	400e0400 	.word	0x400e0400

00401394 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401394:	b480      	push	{r7}
  401396:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401398:	4b03      	ldr	r3, [pc, #12]	; (4013a8 <pmc_is_locked_pllack+0x14>)
  40139a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40139c:	f003 0302 	and.w	r3, r3, #2
}
  4013a0:	4618      	mov	r0, r3
  4013a2:	46bd      	mov	sp, r7
  4013a4:	bc80      	pop	{r7}
  4013a6:	4770      	bx	lr
  4013a8:	400e0400 	.word	0x400e0400

004013ac <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4013ac:	b480      	push	{r7}
  4013ae:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4013b0:	4b03      	ldr	r3, [pc, #12]	; (4013c0 <pmc_disable_pllbck+0x14>)
  4013b2:	2200      	movs	r2, #0
  4013b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4013b6:	bf00      	nop
  4013b8:	46bd      	mov	sp, r7
  4013ba:	bc80      	pop	{r7}
  4013bc:	4770      	bx	lr
  4013be:	bf00      	nop
  4013c0:	400e0400 	.word	0x400e0400

004013c4 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4013c4:	b480      	push	{r7}
  4013c6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4013c8:	4b03      	ldr	r3, [pc, #12]	; (4013d8 <pmc_is_locked_pllbck+0x14>)
  4013ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013cc:	f003 0304 	and.w	r3, r3, #4
}
  4013d0:	4618      	mov	r0, r3
  4013d2:	46bd      	mov	sp, r7
  4013d4:	bc80      	pop	{r7}
  4013d6:	4770      	bx	lr
  4013d8:	400e0400 	.word	0x400e0400

004013dc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4013dc:	b480      	push	{r7}
  4013de:	b083      	sub	sp, #12
  4013e0:	af00      	add	r7, sp, #0
  4013e2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4013e4:	687b      	ldr	r3, [r7, #4]
  4013e6:	2b22      	cmp	r3, #34	; 0x22
  4013e8:	d901      	bls.n	4013ee <pmc_enable_periph_clk+0x12>
		return 1;
  4013ea:	2301      	movs	r3, #1
  4013ec:	e02f      	b.n	40144e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4013ee:	687b      	ldr	r3, [r7, #4]
  4013f0:	2b1f      	cmp	r3, #31
  4013f2:	d813      	bhi.n	40141c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4013f4:	4b18      	ldr	r3, [pc, #96]	; (401458 <pmc_enable_periph_clk+0x7c>)
  4013f6:	699a      	ldr	r2, [r3, #24]
  4013f8:	2101      	movs	r1, #1
  4013fa:	687b      	ldr	r3, [r7, #4]
  4013fc:	fa01 f303 	lsl.w	r3, r1, r3
  401400:	401a      	ands	r2, r3
  401402:	2101      	movs	r1, #1
  401404:	687b      	ldr	r3, [r7, #4]
  401406:	fa01 f303 	lsl.w	r3, r1, r3
  40140a:	429a      	cmp	r2, r3
  40140c:	d01e      	beq.n	40144c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40140e:	4a12      	ldr	r2, [pc, #72]	; (401458 <pmc_enable_periph_clk+0x7c>)
  401410:	2101      	movs	r1, #1
  401412:	687b      	ldr	r3, [r7, #4]
  401414:	fa01 f303 	lsl.w	r3, r1, r3
  401418:	6113      	str	r3, [r2, #16]
  40141a:	e017      	b.n	40144c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40141c:	687b      	ldr	r3, [r7, #4]
  40141e:	3b20      	subs	r3, #32
  401420:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401422:	4b0d      	ldr	r3, [pc, #52]	; (401458 <pmc_enable_periph_clk+0x7c>)
  401424:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401428:	2101      	movs	r1, #1
  40142a:	687b      	ldr	r3, [r7, #4]
  40142c:	fa01 f303 	lsl.w	r3, r1, r3
  401430:	401a      	ands	r2, r3
  401432:	2101      	movs	r1, #1
  401434:	687b      	ldr	r3, [r7, #4]
  401436:	fa01 f303 	lsl.w	r3, r1, r3
  40143a:	429a      	cmp	r2, r3
  40143c:	d006      	beq.n	40144c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40143e:	4a06      	ldr	r2, [pc, #24]	; (401458 <pmc_enable_periph_clk+0x7c>)
  401440:	2101      	movs	r1, #1
  401442:	687b      	ldr	r3, [r7, #4]
  401444:	fa01 f303 	lsl.w	r3, r1, r3
  401448:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40144c:	2300      	movs	r3, #0
}
  40144e:	4618      	mov	r0, r3
  401450:	370c      	adds	r7, #12
  401452:	46bd      	mov	sp, r7
  401454:	bc80      	pop	{r7}
  401456:	4770      	bx	lr
  401458:	400e0400 	.word	0x400e0400

0040145c <board_init>:
#include "gpio.h"
#include "ioport.h"


void board_init(void)
{
  40145c:	b580      	push	{r7, lr}
  40145e:	af00      	add	r7, sp, #0
		#define RS485_USART_IRQn	USART0_IRQn
	 #endif
	 #if defined(CONF_UART0_PINS)
		gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
	 #else
		gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  401460:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401464:	f04f 71b0 	mov.w	r1, #23068672	; 0x1600000
  401468:	4802      	ldr	r0, [pc, #8]	; (401474 <board_init+0x18>)
  40146a:	4b03      	ldr	r3, [pc, #12]	; (401478 <board_init+0x1c>)
  40146c:	4798      	blx	r3
	 #endif
	 
	 //Configure other services. 
}
  40146e:	bf00      	nop
  401470:	bd80      	pop	{r7, pc}
  401472:	bf00      	nop
  401474:	400e0e00 	.word	0x400e0e00
  401478:	00401041 	.word	0x00401041

0040147c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40147c:	b580      	push	{r7, lr}
  40147e:	b084      	sub	sp, #16
  401480:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401482:	4b27      	ldr	r3, [pc, #156]	; (401520 <Reset_Handler+0xa4>)
  401484:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401486:	4b27      	ldr	r3, [pc, #156]	; (401524 <Reset_Handler+0xa8>)
  401488:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40148a:	68fa      	ldr	r2, [r7, #12]
  40148c:	68bb      	ldr	r3, [r7, #8]
  40148e:	429a      	cmp	r2, r3
  401490:	d90d      	bls.n	4014ae <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401492:	e007      	b.n	4014a4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401494:	68bb      	ldr	r3, [r7, #8]
  401496:	1d1a      	adds	r2, r3, #4
  401498:	60ba      	str	r2, [r7, #8]
  40149a:	68fa      	ldr	r2, [r7, #12]
  40149c:	1d11      	adds	r1, r2, #4
  40149e:	60f9      	str	r1, [r7, #12]
  4014a0:	6812      	ldr	r2, [r2, #0]
  4014a2:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4014a4:	68bb      	ldr	r3, [r7, #8]
  4014a6:	4a20      	ldr	r2, [pc, #128]	; (401528 <Reset_Handler+0xac>)
  4014a8:	4293      	cmp	r3, r2
  4014aa:	d3f3      	bcc.n	401494 <Reset_Handler+0x18>
  4014ac:	e020      	b.n	4014f0 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4014ae:	68fa      	ldr	r2, [r7, #12]
  4014b0:	68bb      	ldr	r3, [r7, #8]
  4014b2:	429a      	cmp	r2, r3
  4014b4:	d21c      	bcs.n	4014f0 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4014b6:	4a1c      	ldr	r2, [pc, #112]	; (401528 <Reset_Handler+0xac>)
  4014b8:	4b1a      	ldr	r3, [pc, #104]	; (401524 <Reset_Handler+0xa8>)
  4014ba:	1ad3      	subs	r3, r2, r3
  4014bc:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4014be:	68fa      	ldr	r2, [r7, #12]
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	4413      	add	r3, r2
  4014c4:	3b04      	subs	r3, #4
  4014c6:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4014c8:	68ba      	ldr	r2, [r7, #8]
  4014ca:	687b      	ldr	r3, [r7, #4]
  4014cc:	4413      	add	r3, r2
  4014ce:	3b04      	subs	r3, #4
  4014d0:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4014d2:	e00a      	b.n	4014ea <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4014d4:	68bb      	ldr	r3, [r7, #8]
  4014d6:	1f1a      	subs	r2, r3, #4
  4014d8:	60ba      	str	r2, [r7, #8]
  4014da:	68fa      	ldr	r2, [r7, #12]
  4014dc:	1f11      	subs	r1, r2, #4
  4014de:	60f9      	str	r1, [r7, #12]
  4014e0:	6812      	ldr	r2, [r2, #0]
  4014e2:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4014e4:	687b      	ldr	r3, [r7, #4]
  4014e6:	3b04      	subs	r3, #4
  4014e8:	607b      	str	r3, [r7, #4]
  4014ea:	687b      	ldr	r3, [r7, #4]
  4014ec:	2b00      	cmp	r3, #0
  4014ee:	d1f1      	bne.n	4014d4 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4014f0:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4014f2:	4b0e      	ldr	r3, [pc, #56]	; (40152c <Reset_Handler+0xb0>)
  4014f4:	60bb      	str	r3, [r7, #8]
  4014f6:	e004      	b.n	401502 <Reset_Handler+0x86>
		*pDest++ = 0;
  4014f8:	68bb      	ldr	r3, [r7, #8]
  4014fa:	1d1a      	adds	r2, r3, #4
  4014fc:	60ba      	str	r2, [r7, #8]
  4014fe:	2200      	movs	r2, #0
  401500:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401502:	68bb      	ldr	r3, [r7, #8]
  401504:	4a0a      	ldr	r2, [pc, #40]	; (401530 <Reset_Handler+0xb4>)
  401506:	4293      	cmp	r3, r2
  401508:	d3f6      	bcc.n	4014f8 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40150a:	4b0a      	ldr	r3, [pc, #40]	; (401534 <Reset_Handler+0xb8>)
  40150c:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40150e:	4a0a      	ldr	r2, [pc, #40]	; (401538 <Reset_Handler+0xbc>)
  401510:	68fb      	ldr	r3, [r7, #12]
  401512:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401514:	4b09      	ldr	r3, [pc, #36]	; (40153c <Reset_Handler+0xc0>)
  401516:	4798      	blx	r3

	/* Branch to main function */
	main();
  401518:	4b09      	ldr	r3, [pc, #36]	; (401540 <Reset_Handler+0xc4>)
  40151a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40151c:	e7fe      	b.n	40151c <Reset_Handler+0xa0>
  40151e:	bf00      	nop
  401520:	00401dc4 	.word	0x00401dc4
  401524:	20000000 	.word	0x20000000
  401528:	20000440 	.word	0x20000440
  40152c:	20000440 	.word	0x20000440
  401530:	20004364 	.word	0x20004364
  401534:	00400000 	.word	0x00400000
  401538:	e000ed00 	.word	0xe000ed00
  40153c:	00401c3d 	.word	0x00401c3d
  401540:	0040184d 	.word	0x0040184d

00401544 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401544:	b480      	push	{r7}
  401546:	af00      	add	r7, sp, #0
	while (1) {
	}
  401548:	e7fe      	b.n	401548 <Dummy_Handler+0x4>
  40154a:	bf00      	nop

0040154c <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40154c:	b480      	push	{r7}
  40154e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401550:	4b5d      	ldr	r3, [pc, #372]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  401552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401554:	f003 0303 	and.w	r3, r3, #3
  401558:	2b03      	cmp	r3, #3
  40155a:	f200 8096 	bhi.w	40168a <SystemCoreClockUpdate+0x13e>
  40155e:	a201      	add	r2, pc, #4	; (adr r2, 401564 <SystemCoreClockUpdate+0x18>)
  401560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401564:	00401575 	.word	0x00401575
  401568:	00401595 	.word	0x00401595
  40156c:	004015df 	.word	0x004015df
  401570:	004015df 	.word	0x004015df
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401574:	4b55      	ldr	r3, [pc, #340]	; (4016cc <SystemCoreClockUpdate+0x180>)
  401576:	695b      	ldr	r3, [r3, #20]
  401578:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40157c:	2b00      	cmp	r3, #0
  40157e:	d004      	beq.n	40158a <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401580:	4b53      	ldr	r3, [pc, #332]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  401582:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401586:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401588:	e080      	b.n	40168c <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40158a:	4b51      	ldr	r3, [pc, #324]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  40158c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401590:	601a      	str	r2, [r3, #0]
			}
		break;
  401592:	e07b      	b.n	40168c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401594:	4b4c      	ldr	r3, [pc, #304]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  401596:	6a1b      	ldr	r3, [r3, #32]
  401598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40159c:	2b00      	cmp	r3, #0
  40159e:	d003      	beq.n	4015a8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4015a0:	4b4b      	ldr	r3, [pc, #300]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  4015a2:	4a4c      	ldr	r2, [pc, #304]	; (4016d4 <SystemCoreClockUpdate+0x188>)
  4015a4:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4015a6:	e071      	b.n	40168c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015a8:	4b49      	ldr	r3, [pc, #292]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  4015aa:	4a4b      	ldr	r2, [pc, #300]	; (4016d8 <SystemCoreClockUpdate+0x18c>)
  4015ac:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4015ae:	4b46      	ldr	r3, [pc, #280]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  4015b0:	6a1b      	ldr	r3, [r3, #32]
  4015b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015b6:	2b10      	cmp	r3, #16
  4015b8:	d008      	beq.n	4015cc <SystemCoreClockUpdate+0x80>
  4015ba:	2b20      	cmp	r3, #32
  4015bc:	d00a      	beq.n	4015d4 <SystemCoreClockUpdate+0x88>
  4015be:	2b00      	cmp	r3, #0
  4015c0:	d000      	beq.n	4015c4 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  4015c2:	e00b      	b.n	4015dc <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015c4:	4b42      	ldr	r3, [pc, #264]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  4015c6:	4a44      	ldr	r2, [pc, #272]	; (4016d8 <SystemCoreClockUpdate+0x18c>)
  4015c8:	601a      	str	r2, [r3, #0]
			break;
  4015ca:	e007      	b.n	4015dc <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4015cc:	4b40      	ldr	r3, [pc, #256]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  4015ce:	4a43      	ldr	r2, [pc, #268]	; (4016dc <SystemCoreClockUpdate+0x190>)
  4015d0:	601a      	str	r2, [r3, #0]
			break;
  4015d2:	e003      	b.n	4015dc <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4015d4:	4b3e      	ldr	r3, [pc, #248]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  4015d6:	4a3f      	ldr	r2, [pc, #252]	; (4016d4 <SystemCoreClockUpdate+0x188>)
  4015d8:	601a      	str	r2, [r3, #0]
			break;
  4015da:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  4015dc:	e056      	b.n	40168c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4015de:	4b3a      	ldr	r3, [pc, #232]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  4015e0:	6a1b      	ldr	r3, [r3, #32]
  4015e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4015e6:	2b00      	cmp	r3, #0
  4015e8:	d003      	beq.n	4015f2 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4015ea:	4b39      	ldr	r3, [pc, #228]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  4015ec:	4a39      	ldr	r2, [pc, #228]	; (4016d4 <SystemCoreClockUpdate+0x188>)
  4015ee:	601a      	str	r2, [r3, #0]
  4015f0:	e019      	b.n	401626 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015f2:	4b37      	ldr	r3, [pc, #220]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  4015f4:	4a38      	ldr	r2, [pc, #224]	; (4016d8 <SystemCoreClockUpdate+0x18c>)
  4015f6:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4015f8:	4b33      	ldr	r3, [pc, #204]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  4015fa:	6a1b      	ldr	r3, [r3, #32]
  4015fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401600:	2b10      	cmp	r3, #16
  401602:	d008      	beq.n	401616 <SystemCoreClockUpdate+0xca>
  401604:	2b20      	cmp	r3, #32
  401606:	d00a      	beq.n	40161e <SystemCoreClockUpdate+0xd2>
  401608:	2b00      	cmp	r3, #0
  40160a:	d000      	beq.n	40160e <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40160c:	e00b      	b.n	401626 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40160e:	4b30      	ldr	r3, [pc, #192]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  401610:	4a31      	ldr	r2, [pc, #196]	; (4016d8 <SystemCoreClockUpdate+0x18c>)
  401612:	601a      	str	r2, [r3, #0]
					break;
  401614:	e007      	b.n	401626 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401616:	4b2e      	ldr	r3, [pc, #184]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  401618:	4a30      	ldr	r2, [pc, #192]	; (4016dc <SystemCoreClockUpdate+0x190>)
  40161a:	601a      	str	r2, [r3, #0]
					break;
  40161c:	e003      	b.n	401626 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40161e:	4b2c      	ldr	r3, [pc, #176]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  401620:	4a2c      	ldr	r2, [pc, #176]	; (4016d4 <SystemCoreClockUpdate+0x188>)
  401622:	601a      	str	r2, [r3, #0]
					break;
  401624:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401626:	4b28      	ldr	r3, [pc, #160]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  401628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40162a:	f003 0303 	and.w	r3, r3, #3
  40162e:	2b02      	cmp	r3, #2
  401630:	d115      	bne.n	40165e <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401632:	4b25      	ldr	r3, [pc, #148]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  401634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401636:	4b2a      	ldr	r3, [pc, #168]	; (4016e0 <SystemCoreClockUpdate+0x194>)
  401638:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40163a:	0c1b      	lsrs	r3, r3, #16
  40163c:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40163e:	4a24      	ldr	r2, [pc, #144]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  401640:	6812      	ldr	r2, [r2, #0]
  401642:	fb02 f303 	mul.w	r3, r2, r3
  401646:	4a22      	ldr	r2, [pc, #136]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  401648:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40164a:	4b1f      	ldr	r3, [pc, #124]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  40164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40164e:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401650:	4a1f      	ldr	r2, [pc, #124]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  401652:	6812      	ldr	r2, [r2, #0]
  401654:	fbb2 f3f3 	udiv	r3, r2, r3
  401658:	4a1d      	ldr	r2, [pc, #116]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  40165a:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40165c:	e016      	b.n	40168c <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40165e:	4b1a      	ldr	r3, [pc, #104]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  401660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401662:	4b1f      	ldr	r3, [pc, #124]	; (4016e0 <SystemCoreClockUpdate+0x194>)
  401664:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401666:	0c1b      	lsrs	r3, r3, #16
  401668:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40166a:	4a19      	ldr	r2, [pc, #100]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  40166c:	6812      	ldr	r2, [r2, #0]
  40166e:	fb02 f303 	mul.w	r3, r2, r3
  401672:	4a17      	ldr	r2, [pc, #92]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  401674:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401676:	4b14      	ldr	r3, [pc, #80]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  401678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40167a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40167c:	4a14      	ldr	r2, [pc, #80]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  40167e:	6812      	ldr	r2, [r2, #0]
  401680:	fbb2 f3f3 	udiv	r3, r2, r3
  401684:	4a12      	ldr	r2, [pc, #72]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  401686:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401688:	e000      	b.n	40168c <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40168a:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40168c:	4b0e      	ldr	r3, [pc, #56]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  40168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401690:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401694:	2b70      	cmp	r3, #112	; 0x70
  401696:	d108      	bne.n	4016aa <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401698:	4b0d      	ldr	r3, [pc, #52]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  40169a:	681b      	ldr	r3, [r3, #0]
  40169c:	4a11      	ldr	r2, [pc, #68]	; (4016e4 <SystemCoreClockUpdate+0x198>)
  40169e:	fba2 2303 	umull	r2, r3, r2, r3
  4016a2:	085b      	lsrs	r3, r3, #1
  4016a4:	4a0a      	ldr	r2, [pc, #40]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  4016a6:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4016a8:	e00a      	b.n	4016c0 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4016aa:	4b07      	ldr	r3, [pc, #28]	; (4016c8 <SystemCoreClockUpdate+0x17c>)
  4016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016b2:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4016b4:	4a06      	ldr	r2, [pc, #24]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  4016b6:	6812      	ldr	r2, [r2, #0]
  4016b8:	fa22 f303 	lsr.w	r3, r2, r3
  4016bc:	4a04      	ldr	r2, [pc, #16]	; (4016d0 <SystemCoreClockUpdate+0x184>)
  4016be:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4016c0:	bf00      	nop
  4016c2:	46bd      	mov	sp, r7
  4016c4:	bc80      	pop	{r7}
  4016c6:	4770      	bx	lr
  4016c8:	400e0400 	.word	0x400e0400
  4016cc:	400e1410 	.word	0x400e1410
  4016d0:	20000010 	.word	0x20000010
  4016d4:	00b71b00 	.word	0x00b71b00
  4016d8:	003d0900 	.word	0x003d0900
  4016dc:	007a1200 	.word	0x007a1200
  4016e0:	07ff0000 	.word	0x07ff0000
  4016e4:	aaaaaaab 	.word	0xaaaaaaab

004016e8 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4016e8:	b480      	push	{r7}
  4016ea:	b083      	sub	sp, #12
  4016ec:	af00      	add	r7, sp, #0
  4016ee:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4016f0:	687b      	ldr	r3, [r7, #4]
  4016f2:	4a22      	ldr	r2, [pc, #136]	; (40177c <system_init_flash+0x94>)
  4016f4:	4293      	cmp	r3, r2
  4016f6:	d808      	bhi.n	40170a <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4016f8:	4b21      	ldr	r3, [pc, #132]	; (401780 <system_init_flash+0x98>)
  4016fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4016fe:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401700:	4b20      	ldr	r3, [pc, #128]	; (401784 <system_init_flash+0x9c>)
  401702:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401706:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401708:	e033      	b.n	401772 <system_init_flash+0x8a>
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40170a:	687b      	ldr	r3, [r7, #4]
  40170c:	4a1e      	ldr	r2, [pc, #120]	; (401788 <system_init_flash+0xa0>)
  40170e:	4293      	cmp	r3, r2
  401710:	d806      	bhi.n	401720 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401712:	4b1b      	ldr	r3, [pc, #108]	; (401780 <system_init_flash+0x98>)
  401714:	4a1d      	ldr	r2, [pc, #116]	; (40178c <system_init_flash+0xa4>)
  401716:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401718:	4b1a      	ldr	r3, [pc, #104]	; (401784 <system_init_flash+0x9c>)
  40171a:	4a1c      	ldr	r2, [pc, #112]	; (40178c <system_init_flash+0xa4>)
  40171c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40171e:	e028      	b.n	401772 <system_init_flash+0x8a>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401720:	687b      	ldr	r3, [r7, #4]
  401722:	4a1b      	ldr	r2, [pc, #108]	; (401790 <system_init_flash+0xa8>)
  401724:	4293      	cmp	r3, r2
  401726:	d806      	bhi.n	401736 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401728:	4b15      	ldr	r3, [pc, #84]	; (401780 <system_init_flash+0x98>)
  40172a:	4a1a      	ldr	r2, [pc, #104]	; (401794 <system_init_flash+0xac>)
  40172c:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40172e:	4b15      	ldr	r3, [pc, #84]	; (401784 <system_init_flash+0x9c>)
  401730:	4a18      	ldr	r2, [pc, #96]	; (401794 <system_init_flash+0xac>)
  401732:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401734:	e01d      	b.n	401772 <system_init_flash+0x8a>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401736:	687b      	ldr	r3, [r7, #4]
  401738:	4a17      	ldr	r2, [pc, #92]	; (401798 <system_init_flash+0xb0>)
  40173a:	4293      	cmp	r3, r2
  40173c:	d806      	bhi.n	40174c <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40173e:	4b10      	ldr	r3, [pc, #64]	; (401780 <system_init_flash+0x98>)
  401740:	4a16      	ldr	r2, [pc, #88]	; (40179c <system_init_flash+0xb4>)
  401742:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401744:	4b0f      	ldr	r3, [pc, #60]	; (401784 <system_init_flash+0x9c>)
  401746:	4a15      	ldr	r2, [pc, #84]	; (40179c <system_init_flash+0xb4>)
  401748:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40174a:	e012      	b.n	401772 <system_init_flash+0x8a>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40174c:	687b      	ldr	r3, [r7, #4]
  40174e:	4a14      	ldr	r2, [pc, #80]	; (4017a0 <system_init_flash+0xb8>)
  401750:	4293      	cmp	r3, r2
  401752:	d808      	bhi.n	401766 <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401754:	4b0a      	ldr	r3, [pc, #40]	; (401780 <system_init_flash+0x98>)
  401756:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40175a:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40175c:	4b09      	ldr	r3, [pc, #36]	; (401784 <system_init_flash+0x9c>)
  40175e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401762:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401764:	e005      	b.n	401772 <system_init_flash+0x8a>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401766:	4b06      	ldr	r3, [pc, #24]	; (401780 <system_init_flash+0x98>)
  401768:	4a0e      	ldr	r2, [pc, #56]	; (4017a4 <system_init_flash+0xbc>)
  40176a:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40176c:	4b05      	ldr	r3, [pc, #20]	; (401784 <system_init_flash+0x9c>)
  40176e:	4a0d      	ldr	r2, [pc, #52]	; (4017a4 <system_init_flash+0xbc>)
  401770:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401772:	bf00      	nop
  401774:	370c      	adds	r7, #12
  401776:	46bd      	mov	sp, r7
  401778:	bc80      	pop	{r7}
  40177a:	4770      	bx	lr
  40177c:	01312cff 	.word	0x01312cff
  401780:	400e0a00 	.word	0x400e0a00
  401784:	400e0c00 	.word	0x400e0c00
  401788:	026259ff 	.word	0x026259ff
  40178c:	04000100 	.word	0x04000100
  401790:	039386ff 	.word	0x039386ff
  401794:	04000200 	.word	0x04000200
  401798:	04c4b3ff 	.word	0x04c4b3ff
  40179c:	04000300 	.word	0x04000300
  4017a0:	05f5e0ff 	.word	0x05f5e0ff
  4017a4:	04000500 	.word	0x04000500

004017a8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4017a8:	b480      	push	{r7}
  4017aa:	b083      	sub	sp, #12
  4017ac:	af00      	add	r7, sp, #0
  4017ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4017b0:	687b      	ldr	r3, [r7, #4]
  4017b2:	2b07      	cmp	r3, #7
  4017b4:	d825      	bhi.n	401802 <osc_get_rate+0x5a>
  4017b6:	a201      	add	r2, pc, #4	; (adr r2, 4017bc <osc_get_rate+0x14>)
  4017b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4017bc:	004017dd 	.word	0x004017dd
  4017c0:	004017e3 	.word	0x004017e3
  4017c4:	004017e9 	.word	0x004017e9
  4017c8:	004017ef 	.word	0x004017ef
  4017cc:	004017f3 	.word	0x004017f3
  4017d0:	004017f7 	.word	0x004017f7
  4017d4:	004017fb 	.word	0x004017fb
  4017d8:	004017ff 	.word	0x004017ff
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4017dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4017e0:	e010      	b.n	401804 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4017e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4017e6:	e00d      	b.n	401804 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4017e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4017ec:	e00a      	b.n	401804 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4017ee:	4b08      	ldr	r3, [pc, #32]	; (401810 <osc_get_rate+0x68>)
  4017f0:	e008      	b.n	401804 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4017f2:	4b08      	ldr	r3, [pc, #32]	; (401814 <osc_get_rate+0x6c>)
  4017f4:	e006      	b.n	401804 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4017f6:	4b08      	ldr	r3, [pc, #32]	; (401818 <osc_get_rate+0x70>)
  4017f8:	e004      	b.n	401804 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4017fa:	4b07      	ldr	r3, [pc, #28]	; (401818 <osc_get_rate+0x70>)
  4017fc:	e002      	b.n	401804 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4017fe:	4b06      	ldr	r3, [pc, #24]	; (401818 <osc_get_rate+0x70>)
  401800:	e000      	b.n	401804 <osc_get_rate+0x5c>
	}

	return 0;
  401802:	2300      	movs	r3, #0
}
  401804:	4618      	mov	r0, r3
  401806:	370c      	adds	r7, #12
  401808:	46bd      	mov	sp, r7
  40180a:	bc80      	pop	{r7}
  40180c:	4770      	bx	lr
  40180e:	bf00      	nop
  401810:	003d0900 	.word	0x003d0900
  401814:	007a1200 	.word	0x007a1200
  401818:	00b71b00 	.word	0x00b71b00

0040181c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40181c:	b580      	push	{r7, lr}
  40181e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401820:	2003      	movs	r0, #3
  401822:	4b04      	ldr	r3, [pc, #16]	; (401834 <sysclk_get_main_hz+0x18>)
  401824:	4798      	blx	r3
  401826:	4602      	mov	r2, r0
  401828:	4613      	mov	r3, r2
  40182a:	011b      	lsls	r3, r3, #4
  40182c:	1a9b      	subs	r3, r3, r2
  40182e:	005b      	lsls	r3, r3, #1

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401830:	4618      	mov	r0, r3
  401832:	bd80      	pop	{r7, pc}
  401834:	004017a9 	.word	0x004017a9

00401838 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401838:	b580      	push	{r7, lr}
  40183a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40183c:	4b02      	ldr	r3, [pc, #8]	; (401848 <sysclk_get_cpu_hz+0x10>)
  40183e:	4798      	blx	r3
  401840:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401842:	4618      	mov	r0, r3
  401844:	bd80      	pop	{r7, pc}
  401846:	bf00      	nop
  401848:	0040181d 	.word	0x0040181d

0040184c <main>:
/** RS485 buffers */
uint32_t rs485RxBuffer[RS485_BUFFER_SIZE];
uint32_t rs485TxBuffer[RS485_BUFFER_SIZE];

int main (void)
{
  40184c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401850:	af00      	add	r7, sp, #0
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  401852:	4b28      	ldr	r3, [pc, #160]	; (4018f4 <main+0xa8>)
  401854:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();	
  401856:	4b28      	ldr	r3, [pc, #160]	; (4018f8 <main+0xac>)
  401858:	4798      	blx	r3
	
	InitRs485Pdc();
  40185a:	4b28      	ldr	r3, [pc, #160]	; (4018fc <main+0xb0>)
  40185c:	4798      	blx	r3
	gpio_configure_pin(PIO_PC23_IDX, (PIO_OUTPUT_1 | PIO_DEFAULT));
  40185e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401862:	2057      	movs	r0, #87	; 0x57
  401864:	4b26      	ldr	r3, [pc, #152]	; (401900 <main+0xb4>)
  401866:	4798      	blx	r3

	rs485TxBuffer[0] = 'M';
  401868:	4b26      	ldr	r3, [pc, #152]	; (401904 <main+0xb8>)
  40186a:	224d      	movs	r2, #77	; 0x4d
  40186c:	601a      	str	r2, [r3, #0]

	Rs485PdcStartRx(rs485RxBuffer, 1);
  40186e:	2101      	movs	r1, #1
  401870:	4825      	ldr	r0, [pc, #148]	; (401908 <main+0xbc>)
  401872:	4b26      	ldr	r3, [pc, #152]	; (40190c <main+0xc0>)
  401874:	4798      	blx	r3
	Rs485PdcStartTx(rs485TxBuffer, 1);
  401876:	2101      	movs	r1, #1
  401878:	4822      	ldr	r0, [pc, #136]	; (401904 <main+0xb8>)
  40187a:	4b25      	ldr	r3, [pc, #148]	; (401910 <main+0xc4>)
  40187c:	4798      	blx	r3

	while(1)	
	{
		gpio_toggle_pin(PIO_PC23_IDX);
  40187e:	2057      	movs	r0, #87	; 0x57
  401880:	4b24      	ldr	r3, [pc, #144]	; (401914 <main+0xc8>)
  401882:	4798      	blx	r3
		delay_ms(1000);
  401884:	4b24      	ldr	r3, [pc, #144]	; (401918 <main+0xcc>)
  401886:	4798      	blx	r3
  401888:	4603      	mov	r3, r0
  40188a:	4618      	mov	r0, r3
  40188c:	f04f 0100 	mov.w	r1, #0
  401890:	4602      	mov	r2, r0
  401892:	460b      	mov	r3, r1
  401894:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  401898:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  40189c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  4018a0:	4652      	mov	r2, sl
  4018a2:	465b      	mov	r3, fp
  4018a4:	015d      	lsls	r5, r3, #5
  4018a6:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  4018aa:	0154      	lsls	r4, r2, #5
  4018ac:	1aa4      	subs	r4, r4, r2
  4018ae:	eb65 0503 	sbc.w	r5, r5, r3
  4018b2:	1824      	adds	r4, r4, r0
  4018b4:	eb45 0501 	adc.w	r5, r5, r1
  4018b8:	ea4f 09c5 	mov.w	r9, r5, lsl #3
  4018bc:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
  4018c0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
  4018c4:	4644      	mov	r4, r8
  4018c6:	464d      	mov	r5, r9
  4018c8:	4620      	mov	r0, r4
  4018ca:	4629      	mov	r1, r5
  4018cc:	f243 62af 	movw	r2, #13999	; 0x36af
  4018d0:	f04f 0300 	mov.w	r3, #0
  4018d4:	1880      	adds	r0, r0, r2
  4018d6:	eb41 0103 	adc.w	r1, r1, r3
  4018da:	4e10      	ldr	r6, [pc, #64]	; (40191c <main+0xd0>)
  4018dc:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4018e0:	f04f 0300 	mov.w	r3, #0
  4018e4:	47b0      	blx	r6
  4018e6:	4602      	mov	r2, r0
  4018e8:	460b      	mov	r3, r1
  4018ea:	4613      	mov	r3, r2
  4018ec:	4618      	mov	r0, r3
  4018ee:	4b0c      	ldr	r3, [pc, #48]	; (401920 <main+0xd4>)
  4018f0:	4798      	blx	r3
	}
  4018f2:	e7c4      	b.n	40187e <main+0x32>
  4018f4:	00400a9d 	.word	0x00400a9d
  4018f8:	0040145d 	.word	0x0040145d
  4018fc:	00400519 	.word	0x00400519
  401900:	00400e91 	.word	0x00400e91
  401904:	20002424 	.word	0x20002424
  401908:	200004e4 	.word	0x200004e4
  40190c:	00400655 	.word	0x00400655
  401910:	00400611 	.word	0x00400611
  401914:	00400e39 	.word	0x00400e39
  401918:	00401839 	.word	0x00401839
  40191c:	00401925 	.word	0x00401925
  401920:	20000001 	.word	0x20000001

00401924 <__aeabi_uldivmod>:
  401924:	b953      	cbnz	r3, 40193c <__aeabi_uldivmod+0x18>
  401926:	b94a      	cbnz	r2, 40193c <__aeabi_uldivmod+0x18>
  401928:	2900      	cmp	r1, #0
  40192a:	bf08      	it	eq
  40192c:	2800      	cmpeq	r0, #0
  40192e:	bf1c      	itt	ne
  401930:	f04f 31ff 	movne.w	r1, #4294967295
  401934:	f04f 30ff 	movne.w	r0, #4294967295
  401938:	f000 b97e 	b.w	401c38 <__aeabi_idiv0>
  40193c:	f1ad 0c08 	sub.w	ip, sp, #8
  401940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401944:	f000 f806 	bl	401954 <__udivmoddi4>
  401948:	f8dd e004 	ldr.w	lr, [sp, #4]
  40194c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401950:	b004      	add	sp, #16
  401952:	4770      	bx	lr

00401954 <__udivmoddi4>:
  401954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401958:	468c      	mov	ip, r1
  40195a:	460e      	mov	r6, r1
  40195c:	4604      	mov	r4, r0
  40195e:	9d08      	ldr	r5, [sp, #32]
  401960:	2b00      	cmp	r3, #0
  401962:	d150      	bne.n	401a06 <__udivmoddi4+0xb2>
  401964:	428a      	cmp	r2, r1
  401966:	4617      	mov	r7, r2
  401968:	d96c      	bls.n	401a44 <__udivmoddi4+0xf0>
  40196a:	fab2 fe82 	clz	lr, r2
  40196e:	f1be 0f00 	cmp.w	lr, #0
  401972:	d00b      	beq.n	40198c <__udivmoddi4+0x38>
  401974:	f1ce 0420 	rsb	r4, lr, #32
  401978:	fa20 f404 	lsr.w	r4, r0, r4
  40197c:	fa01 f60e 	lsl.w	r6, r1, lr
  401980:	ea44 0c06 	orr.w	ip, r4, r6
  401984:	fa02 f70e 	lsl.w	r7, r2, lr
  401988:	fa00 f40e 	lsl.w	r4, r0, lr
  40198c:	ea4f 4917 	mov.w	r9, r7, lsr #16
  401990:	0c22      	lsrs	r2, r4, #16
  401992:	fbbc f0f9 	udiv	r0, ip, r9
  401996:	fa1f f887 	uxth.w	r8, r7
  40199a:	fb09 c610 	mls	r6, r9, r0, ip
  40199e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4019a2:	fb00 f308 	mul.w	r3, r0, r8
  4019a6:	42b3      	cmp	r3, r6
  4019a8:	d909      	bls.n	4019be <__udivmoddi4+0x6a>
  4019aa:	19f6      	adds	r6, r6, r7
  4019ac:	f100 32ff 	add.w	r2, r0, #4294967295
  4019b0:	f080 8122 	bcs.w	401bf8 <__udivmoddi4+0x2a4>
  4019b4:	42b3      	cmp	r3, r6
  4019b6:	f240 811f 	bls.w	401bf8 <__udivmoddi4+0x2a4>
  4019ba:	3802      	subs	r0, #2
  4019bc:	443e      	add	r6, r7
  4019be:	1af6      	subs	r6, r6, r3
  4019c0:	b2a2      	uxth	r2, r4
  4019c2:	fbb6 f3f9 	udiv	r3, r6, r9
  4019c6:	fb09 6613 	mls	r6, r9, r3, r6
  4019ca:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4019ce:	fb03 f808 	mul.w	r8, r3, r8
  4019d2:	45a0      	cmp	r8, r4
  4019d4:	d909      	bls.n	4019ea <__udivmoddi4+0x96>
  4019d6:	19e4      	adds	r4, r4, r7
  4019d8:	f103 32ff 	add.w	r2, r3, #4294967295
  4019dc:	f080 810a 	bcs.w	401bf4 <__udivmoddi4+0x2a0>
  4019e0:	45a0      	cmp	r8, r4
  4019e2:	f240 8107 	bls.w	401bf4 <__udivmoddi4+0x2a0>
  4019e6:	3b02      	subs	r3, #2
  4019e8:	443c      	add	r4, r7
  4019ea:	ebc8 0404 	rsb	r4, r8, r4
  4019ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4019f2:	2100      	movs	r1, #0
  4019f4:	2d00      	cmp	r5, #0
  4019f6:	d062      	beq.n	401abe <__udivmoddi4+0x16a>
  4019f8:	fa24 f40e 	lsr.w	r4, r4, lr
  4019fc:	2300      	movs	r3, #0
  4019fe:	602c      	str	r4, [r5, #0]
  401a00:	606b      	str	r3, [r5, #4]
  401a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a06:	428b      	cmp	r3, r1
  401a08:	d907      	bls.n	401a1a <__udivmoddi4+0xc6>
  401a0a:	2d00      	cmp	r5, #0
  401a0c:	d055      	beq.n	401aba <__udivmoddi4+0x166>
  401a0e:	2100      	movs	r1, #0
  401a10:	e885 0041 	stmia.w	r5, {r0, r6}
  401a14:	4608      	mov	r0, r1
  401a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a1a:	fab3 f183 	clz	r1, r3
  401a1e:	2900      	cmp	r1, #0
  401a20:	f040 8090 	bne.w	401b44 <__udivmoddi4+0x1f0>
  401a24:	42b3      	cmp	r3, r6
  401a26:	d302      	bcc.n	401a2e <__udivmoddi4+0xda>
  401a28:	4282      	cmp	r2, r0
  401a2a:	f200 80f8 	bhi.w	401c1e <__udivmoddi4+0x2ca>
  401a2e:	1a84      	subs	r4, r0, r2
  401a30:	eb66 0603 	sbc.w	r6, r6, r3
  401a34:	2001      	movs	r0, #1
  401a36:	46b4      	mov	ip, r6
  401a38:	2d00      	cmp	r5, #0
  401a3a:	d040      	beq.n	401abe <__udivmoddi4+0x16a>
  401a3c:	e885 1010 	stmia.w	r5, {r4, ip}
  401a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a44:	b912      	cbnz	r2, 401a4c <__udivmoddi4+0xf8>
  401a46:	2701      	movs	r7, #1
  401a48:	fbb7 f7f2 	udiv	r7, r7, r2
  401a4c:	fab7 fe87 	clz	lr, r7
  401a50:	f1be 0f00 	cmp.w	lr, #0
  401a54:	d135      	bne.n	401ac2 <__udivmoddi4+0x16e>
  401a56:	1bf3      	subs	r3, r6, r7
  401a58:	ea4f 4817 	mov.w	r8, r7, lsr #16
  401a5c:	fa1f fc87 	uxth.w	ip, r7
  401a60:	2101      	movs	r1, #1
  401a62:	fbb3 f0f8 	udiv	r0, r3, r8
  401a66:	0c22      	lsrs	r2, r4, #16
  401a68:	fb08 3610 	mls	r6, r8, r0, r3
  401a6c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  401a70:	fb0c f300 	mul.w	r3, ip, r0
  401a74:	42b3      	cmp	r3, r6
  401a76:	d907      	bls.n	401a88 <__udivmoddi4+0x134>
  401a78:	19f6      	adds	r6, r6, r7
  401a7a:	f100 32ff 	add.w	r2, r0, #4294967295
  401a7e:	d202      	bcs.n	401a86 <__udivmoddi4+0x132>
  401a80:	42b3      	cmp	r3, r6
  401a82:	f200 80ce 	bhi.w	401c22 <__udivmoddi4+0x2ce>
  401a86:	4610      	mov	r0, r2
  401a88:	1af6      	subs	r6, r6, r3
  401a8a:	b2a2      	uxth	r2, r4
  401a8c:	fbb6 f3f8 	udiv	r3, r6, r8
  401a90:	fb08 6613 	mls	r6, r8, r3, r6
  401a94:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  401a98:	fb0c fc03 	mul.w	ip, ip, r3
  401a9c:	45a4      	cmp	ip, r4
  401a9e:	d907      	bls.n	401ab0 <__udivmoddi4+0x15c>
  401aa0:	19e4      	adds	r4, r4, r7
  401aa2:	f103 32ff 	add.w	r2, r3, #4294967295
  401aa6:	d202      	bcs.n	401aae <__udivmoddi4+0x15a>
  401aa8:	45a4      	cmp	ip, r4
  401aaa:	f200 80b5 	bhi.w	401c18 <__udivmoddi4+0x2c4>
  401aae:	4613      	mov	r3, r2
  401ab0:	ebcc 0404 	rsb	r4, ip, r4
  401ab4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  401ab8:	e79c      	b.n	4019f4 <__udivmoddi4+0xa0>
  401aba:	4629      	mov	r1, r5
  401abc:	4628      	mov	r0, r5
  401abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ac2:	f1ce 0120 	rsb	r1, lr, #32
  401ac6:	fa06 f30e 	lsl.w	r3, r6, lr
  401aca:	fa07 f70e 	lsl.w	r7, r7, lr
  401ace:	fa20 f901 	lsr.w	r9, r0, r1
  401ad2:	ea4f 4817 	mov.w	r8, r7, lsr #16
  401ad6:	40ce      	lsrs	r6, r1
  401ad8:	ea49 0903 	orr.w	r9, r9, r3
  401adc:	fbb6 faf8 	udiv	sl, r6, r8
  401ae0:	ea4f 4419 	mov.w	r4, r9, lsr #16
  401ae4:	fb08 661a 	mls	r6, r8, sl, r6
  401ae8:	fa1f fc87 	uxth.w	ip, r7
  401aec:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  401af0:	fb0a f20c 	mul.w	r2, sl, ip
  401af4:	429a      	cmp	r2, r3
  401af6:	fa00 f40e 	lsl.w	r4, r0, lr
  401afa:	d90a      	bls.n	401b12 <__udivmoddi4+0x1be>
  401afc:	19db      	adds	r3, r3, r7
  401afe:	f10a 31ff 	add.w	r1, sl, #4294967295
  401b02:	f080 8087 	bcs.w	401c14 <__udivmoddi4+0x2c0>
  401b06:	429a      	cmp	r2, r3
  401b08:	f240 8084 	bls.w	401c14 <__udivmoddi4+0x2c0>
  401b0c:	f1aa 0a02 	sub.w	sl, sl, #2
  401b10:	443b      	add	r3, r7
  401b12:	1a9b      	subs	r3, r3, r2
  401b14:	fa1f f989 	uxth.w	r9, r9
  401b18:	fbb3 f1f8 	udiv	r1, r3, r8
  401b1c:	fb08 3311 	mls	r3, r8, r1, r3
  401b20:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  401b24:	fb01 f60c 	mul.w	r6, r1, ip
  401b28:	429e      	cmp	r6, r3
  401b2a:	d907      	bls.n	401b3c <__udivmoddi4+0x1e8>
  401b2c:	19db      	adds	r3, r3, r7
  401b2e:	f101 32ff 	add.w	r2, r1, #4294967295
  401b32:	d26b      	bcs.n	401c0c <__udivmoddi4+0x2b8>
  401b34:	429e      	cmp	r6, r3
  401b36:	d969      	bls.n	401c0c <__udivmoddi4+0x2b8>
  401b38:	3902      	subs	r1, #2
  401b3a:	443b      	add	r3, r7
  401b3c:	1b9b      	subs	r3, r3, r6
  401b3e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  401b42:	e78e      	b.n	401a62 <__udivmoddi4+0x10e>
  401b44:	f1c1 0e20 	rsb	lr, r1, #32
  401b48:	fa22 f40e 	lsr.w	r4, r2, lr
  401b4c:	408b      	lsls	r3, r1
  401b4e:	4323      	orrs	r3, r4
  401b50:	fa20 f70e 	lsr.w	r7, r0, lr
  401b54:	fa06 f401 	lsl.w	r4, r6, r1
  401b58:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401b5c:	fa26 f60e 	lsr.w	r6, r6, lr
  401b60:	433c      	orrs	r4, r7
  401b62:	fbb6 f9fc 	udiv	r9, r6, ip
  401b66:	0c27      	lsrs	r7, r4, #16
  401b68:	fb0c 6619 	mls	r6, ip, r9, r6
  401b6c:	fa1f f883 	uxth.w	r8, r3
  401b70:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  401b74:	fb09 f708 	mul.w	r7, r9, r8
  401b78:	42b7      	cmp	r7, r6
  401b7a:	fa02 f201 	lsl.w	r2, r2, r1
  401b7e:	fa00 fa01 	lsl.w	sl, r0, r1
  401b82:	d908      	bls.n	401b96 <__udivmoddi4+0x242>
  401b84:	18f6      	adds	r6, r6, r3
  401b86:	f109 30ff 	add.w	r0, r9, #4294967295
  401b8a:	d241      	bcs.n	401c10 <__udivmoddi4+0x2bc>
  401b8c:	42b7      	cmp	r7, r6
  401b8e:	d93f      	bls.n	401c10 <__udivmoddi4+0x2bc>
  401b90:	f1a9 0902 	sub.w	r9, r9, #2
  401b94:	441e      	add	r6, r3
  401b96:	1bf6      	subs	r6, r6, r7
  401b98:	b2a0      	uxth	r0, r4
  401b9a:	fbb6 f4fc 	udiv	r4, r6, ip
  401b9e:	fb0c 6614 	mls	r6, ip, r4, r6
  401ba2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  401ba6:	fb04 f808 	mul.w	r8, r4, r8
  401baa:	45b8      	cmp	r8, r7
  401bac:	d907      	bls.n	401bbe <__udivmoddi4+0x26a>
  401bae:	18ff      	adds	r7, r7, r3
  401bb0:	f104 30ff 	add.w	r0, r4, #4294967295
  401bb4:	d228      	bcs.n	401c08 <__udivmoddi4+0x2b4>
  401bb6:	45b8      	cmp	r8, r7
  401bb8:	d926      	bls.n	401c08 <__udivmoddi4+0x2b4>
  401bba:	3c02      	subs	r4, #2
  401bbc:	441f      	add	r7, r3
  401bbe:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  401bc2:	ebc8 0707 	rsb	r7, r8, r7
  401bc6:	fba0 8902 	umull	r8, r9, r0, r2
  401bca:	454f      	cmp	r7, r9
  401bcc:	4644      	mov	r4, r8
  401bce:	464e      	mov	r6, r9
  401bd0:	d314      	bcc.n	401bfc <__udivmoddi4+0x2a8>
  401bd2:	d029      	beq.n	401c28 <__udivmoddi4+0x2d4>
  401bd4:	b365      	cbz	r5, 401c30 <__udivmoddi4+0x2dc>
  401bd6:	ebba 0304 	subs.w	r3, sl, r4
  401bda:	eb67 0706 	sbc.w	r7, r7, r6
  401bde:	fa07 fe0e 	lsl.w	lr, r7, lr
  401be2:	40cb      	lsrs	r3, r1
  401be4:	40cf      	lsrs	r7, r1
  401be6:	ea4e 0303 	orr.w	r3, lr, r3
  401bea:	e885 0088 	stmia.w	r5, {r3, r7}
  401bee:	2100      	movs	r1, #0
  401bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bf4:	4613      	mov	r3, r2
  401bf6:	e6f8      	b.n	4019ea <__udivmoddi4+0x96>
  401bf8:	4610      	mov	r0, r2
  401bfa:	e6e0      	b.n	4019be <__udivmoddi4+0x6a>
  401bfc:	ebb8 0402 	subs.w	r4, r8, r2
  401c00:	eb69 0603 	sbc.w	r6, r9, r3
  401c04:	3801      	subs	r0, #1
  401c06:	e7e5      	b.n	401bd4 <__udivmoddi4+0x280>
  401c08:	4604      	mov	r4, r0
  401c0a:	e7d8      	b.n	401bbe <__udivmoddi4+0x26a>
  401c0c:	4611      	mov	r1, r2
  401c0e:	e795      	b.n	401b3c <__udivmoddi4+0x1e8>
  401c10:	4681      	mov	r9, r0
  401c12:	e7c0      	b.n	401b96 <__udivmoddi4+0x242>
  401c14:	468a      	mov	sl, r1
  401c16:	e77c      	b.n	401b12 <__udivmoddi4+0x1be>
  401c18:	3b02      	subs	r3, #2
  401c1a:	443c      	add	r4, r7
  401c1c:	e748      	b.n	401ab0 <__udivmoddi4+0x15c>
  401c1e:	4608      	mov	r0, r1
  401c20:	e70a      	b.n	401a38 <__udivmoddi4+0xe4>
  401c22:	3802      	subs	r0, #2
  401c24:	443e      	add	r6, r7
  401c26:	e72f      	b.n	401a88 <__udivmoddi4+0x134>
  401c28:	45c2      	cmp	sl, r8
  401c2a:	d3e7      	bcc.n	401bfc <__udivmoddi4+0x2a8>
  401c2c:	463e      	mov	r6, r7
  401c2e:	e7d1      	b.n	401bd4 <__udivmoddi4+0x280>
  401c30:	4629      	mov	r1, r5
  401c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c36:	bf00      	nop

00401c38 <__aeabi_idiv0>:
  401c38:	4770      	bx	lr
  401c3a:	bf00      	nop

00401c3c <__libc_init_array>:
  401c3c:	b570      	push	{r4, r5, r6, lr}
  401c3e:	4e0f      	ldr	r6, [pc, #60]	; (401c7c <__libc_init_array+0x40>)
  401c40:	4d0f      	ldr	r5, [pc, #60]	; (401c80 <__libc_init_array+0x44>)
  401c42:	1b76      	subs	r6, r6, r5
  401c44:	10b6      	asrs	r6, r6, #2
  401c46:	bf18      	it	ne
  401c48:	2400      	movne	r4, #0
  401c4a:	d005      	beq.n	401c58 <__libc_init_array+0x1c>
  401c4c:	3401      	adds	r4, #1
  401c4e:	f855 3b04 	ldr.w	r3, [r5], #4
  401c52:	4798      	blx	r3
  401c54:	42a6      	cmp	r6, r4
  401c56:	d1f9      	bne.n	401c4c <__libc_init_array+0x10>
  401c58:	4e0a      	ldr	r6, [pc, #40]	; (401c84 <__libc_init_array+0x48>)
  401c5a:	4d0b      	ldr	r5, [pc, #44]	; (401c88 <__libc_init_array+0x4c>)
  401c5c:	1b76      	subs	r6, r6, r5
  401c5e:	f000 f89b 	bl	401d98 <_init>
  401c62:	10b6      	asrs	r6, r6, #2
  401c64:	bf18      	it	ne
  401c66:	2400      	movne	r4, #0
  401c68:	d006      	beq.n	401c78 <__libc_init_array+0x3c>
  401c6a:	3401      	adds	r4, #1
  401c6c:	f855 3b04 	ldr.w	r3, [r5], #4
  401c70:	4798      	blx	r3
  401c72:	42a6      	cmp	r6, r4
  401c74:	d1f9      	bne.n	401c6a <__libc_init_array+0x2e>
  401c76:	bd70      	pop	{r4, r5, r6, pc}
  401c78:	bd70      	pop	{r4, r5, r6, pc}
  401c7a:	bf00      	nop
  401c7c:	00401da4 	.word	0x00401da4
  401c80:	00401da4 	.word	0x00401da4
  401c84:	00401dac 	.word	0x00401dac
  401c88:	00401da4 	.word	0x00401da4

00401c8c <register_fini>:
  401c8c:	4b02      	ldr	r3, [pc, #8]	; (401c98 <register_fini+0xc>)
  401c8e:	b113      	cbz	r3, 401c96 <register_fini+0xa>
  401c90:	4802      	ldr	r0, [pc, #8]	; (401c9c <register_fini+0x10>)
  401c92:	f000 b805 	b.w	401ca0 <atexit>
  401c96:	4770      	bx	lr
  401c98:	00000000 	.word	0x00000000
  401c9c:	00401cad 	.word	0x00401cad

00401ca0 <atexit>:
  401ca0:	2300      	movs	r3, #0
  401ca2:	4601      	mov	r1, r0
  401ca4:	461a      	mov	r2, r3
  401ca6:	4618      	mov	r0, r3
  401ca8:	f000 b814 	b.w	401cd4 <__register_exitproc>

00401cac <__libc_fini_array>:
  401cac:	b538      	push	{r3, r4, r5, lr}
  401cae:	4d07      	ldr	r5, [pc, #28]	; (401ccc <__libc_fini_array+0x20>)
  401cb0:	4c07      	ldr	r4, [pc, #28]	; (401cd0 <__libc_fini_array+0x24>)
  401cb2:	1b2c      	subs	r4, r5, r4
  401cb4:	10a4      	asrs	r4, r4, #2
  401cb6:	d005      	beq.n	401cc4 <__libc_fini_array+0x18>
  401cb8:	3c01      	subs	r4, #1
  401cba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  401cbe:	4798      	blx	r3
  401cc0:	2c00      	cmp	r4, #0
  401cc2:	d1f9      	bne.n	401cb8 <__libc_fini_array+0xc>
  401cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401cc8:	f000 b870 	b.w	401dac <_fini>
  401ccc:	00401dbc 	.word	0x00401dbc
  401cd0:	00401db8 	.word	0x00401db8

00401cd4 <__register_exitproc>:
  401cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401cd8:	4c25      	ldr	r4, [pc, #148]	; (401d70 <__register_exitproc+0x9c>)
  401cda:	6825      	ldr	r5, [r4, #0]
  401cdc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  401ce0:	4606      	mov	r6, r0
  401ce2:	4688      	mov	r8, r1
  401ce4:	4692      	mov	sl, r2
  401ce6:	4699      	mov	r9, r3
  401ce8:	b3c4      	cbz	r4, 401d5c <__register_exitproc+0x88>
  401cea:	6860      	ldr	r0, [r4, #4]
  401cec:	281f      	cmp	r0, #31
  401cee:	dc17      	bgt.n	401d20 <__register_exitproc+0x4c>
  401cf0:	1c43      	adds	r3, r0, #1
  401cf2:	b176      	cbz	r6, 401d12 <__register_exitproc+0x3e>
  401cf4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  401cf8:	2201      	movs	r2, #1
  401cfa:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  401cfe:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  401d02:	4082      	lsls	r2, r0
  401d04:	4311      	orrs	r1, r2
  401d06:	2e02      	cmp	r6, #2
  401d08:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  401d0c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  401d10:	d01e      	beq.n	401d50 <__register_exitproc+0x7c>
  401d12:	3002      	adds	r0, #2
  401d14:	6063      	str	r3, [r4, #4]
  401d16:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  401d1a:	2000      	movs	r0, #0
  401d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d20:	4b14      	ldr	r3, [pc, #80]	; (401d74 <__register_exitproc+0xa0>)
  401d22:	b303      	cbz	r3, 401d66 <__register_exitproc+0x92>
  401d24:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401d28:	f3af 8000 	nop.w
  401d2c:	4604      	mov	r4, r0
  401d2e:	b1d0      	cbz	r0, 401d66 <__register_exitproc+0x92>
  401d30:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  401d34:	2700      	movs	r7, #0
  401d36:	e880 0088 	stmia.w	r0, {r3, r7}
  401d3a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  401d3e:	4638      	mov	r0, r7
  401d40:	2301      	movs	r3, #1
  401d42:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  401d46:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  401d4a:	2e00      	cmp	r6, #0
  401d4c:	d0e1      	beq.n	401d12 <__register_exitproc+0x3e>
  401d4e:	e7d1      	b.n	401cf4 <__register_exitproc+0x20>
  401d50:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  401d54:	430a      	orrs	r2, r1
  401d56:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  401d5a:	e7da      	b.n	401d12 <__register_exitproc+0x3e>
  401d5c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  401d60:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  401d64:	e7c1      	b.n	401cea <__register_exitproc+0x16>
  401d66:	f04f 30ff 	mov.w	r0, #4294967295
  401d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d6e:	bf00      	nop
  401d70:	00401d94 	.word	0x00401d94
  401d74:	00000000 	.word	0x00000000
  401d78:	00002580 	.word	0x00002580
  401d7c:	000000c0 	.word	0x000000c0
  401d80:	00000800 	.word	0x00000800
	...
  401d90:	00000043 	.word	0x00000043

00401d94 <_global_impure_ptr>:
  401d94:	20000018                                ... 

00401d98 <_init>:
  401d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d9a:	bf00      	nop
  401d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401d9e:	bc08      	pop	{r3}
  401da0:	469e      	mov	lr, r3
  401da2:	4770      	bx	lr

00401da4 <__init_array_start>:
  401da4:	00401c8d 	.word	0x00401c8d

00401da8 <__frame_dummy_init_array_entry>:
  401da8:	004000f1                                ..@.

00401dac <_fini>:
  401dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401dae:	bf00      	nop
  401db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401db2:	bc08      	pop	{r3}
  401db4:	469e      	mov	lr, r3
  401db6:	4770      	bx	lr

00401db8 <__fini_array_start>:
  401db8:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <txDone>:
2000000c:	0101                                             .

2000000d <rxDone>:
2000000d:	0001 0000                                        ...

20000010 <SystemCoreClock>:
20000010:	0900 003d 0000 0000                         ..=.....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
2000004c:	1d90 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
